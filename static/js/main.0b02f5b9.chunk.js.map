{"version":3,"sources":["config.js","core/utils.js","serializers/graphson-v3.js","serializers/base.js","core/base-component.js","ui-components/spinner/spinner.js","connectors/base.js","responses/base.js","responses/gremlin.js","connectors/http.js","connectors/websocket.js","responses/invana-engine.js","connectors/invana-engine.js","query-builder/base.js","query-builder/gremlin.js","serializers/invana-engine.js","query-builder/invana-engine.js","canvas/canvas-utils.js","core/data-store.js","core/graph-component.js","views/home.js","views/base.js","ui-components/layout/header.js","ui-components/lists/list.js","ui-components/indicator/indicator.js","ui-components/layout/main.js","ui-components/layout/main-content.js","ui-components/layout/aside-left.js","ui-components/panels/panel.js","ui-components/layout/main-content-middle.js","ui-components/layout/main-content-right.js","ui-components/layout/aside-bottom.js","ui-components/layout/footer.js","ui-components/layout/aside-right.js","viewlets/settings.js","viewlets/learn.js","viewlets/learn-queries.js","viewlets/history.js","viewlets/support.js","viewlets/vertices-management.js","viewlets/edges-management.js","viewlets/about.js","viewlets/selected-data.js","viewlets/vertex-options.js","viewlets/founder-note.js","viewlets/whats-new.js","canvas/error-boundary.js","canvas/graph/events.js","core/graphics-store.js","canvas/graph/graphics-engine.js","canvas/graph/settings.js","core/graph-simulator.js","canvas/graph/node-menu.js","canvas/graph/pixi-canvas.js","canvas/json/json.js","canvas/table/table.js","canvas/raw-response/raw-responses.js","canvas/nav-ui-components/filter-nodes.js","ui-components/modal/modal.js","canvas/nav-ui-components/focus-node.js","canvas/canvas-nav.js","canvas/controller.js","canvas/graph/focused-nodes-list.js","canvas/canvas.js","canvas/nav-ui-components/query-console.js","views/explorer.js","ui-components/error-views/404.js","views/connect.js","views/switch-server.js","App.js","index.js"],"names":["GE_CONSTANTS","gremlinServerUrlKey","httpHeadersKey","graphEngineName","GREMLIN_SERVER_URL","localStorage","getItem","GRAPH_ENGINE_NAME","DefaultMaxTimeElapsedWarningInSeconds","VERSION","ABOUT_TEXT","CONNECT_URL","REPO_URL","UUIDGenerator","replace","c","crypto","getRandomValues","Uint8Array","toString","DefaultNodeBorderColor","DefaultNodeLabelPropertyKey","DefaultNodeStrokeWidth","DefaultNodeRadius","DefaultNodeInShapeTextColor","DefaultNodeLabelColor","DefaultLinkLabelPropertyKey","DefaultLinkLabelColor","DefaultLinkStrokeWidth","DefaultLabelVisibility","managementVertexLabel","historyLocalStorageKey","MAX_HISTORY_COUNT_TO_REMEMBER","DEMO_URL","GraphSONDeSerializer","padZero","str","len","Array","join","slice","convertMapKeysToArray","mapData","data","entries","value","push","invertColor","hex","bw","indexOf","length","Error","r","parseInt","g","b","LightenDarkenColor","col","amt","usePound","num","getDataFromLocalStorage","itemKey","isJson","JSON","parse","setDataToLocalStorage","itemData","stringify","setItem","postData","a","url","extraHeaders","url_analysed","URL","Buffer","byteLength","username","password","btoa","console","log","gremlinUrl","origin","pathname","transporterStatusCode","responseJson","fetch","method","cache","headers","body","response","status","json","error","redirectToConnectIfNeeded","u","window","location","href","setElementColorOptionsToStorageUsingResponse","filterVertex","nodeLabelsConfig","edgeLabelsConfig","forEach","vertexConfig","properties","name","setElementColorOptionsToStorage","vertexOption","_nodes","askToSwitchGremlinServer","confirm","removeItem","property","_single_prop","d","label","vtx","_this","this","id","Object","keys","key","_","convertVertexPropertyToJson","edg","relationId","inV","inVLabel","outV","outVLabel","source","target","convertEdgePropertyToJson","list_item","items","item","processItem","datum","path_item","objects","labels","convertVertex2Json","convertEdge2Json","convertList2Json","convertPath2Json","convertBulkset2Json","convertMap2Json","ignoreManagement","vertices","edges","type","newData","meta","dataGroups","DeSerializerBase","TypeError","BaseComponent","props","loaderTimerIntervalId","state","statusMessage","isLoading","loaderElapsedTimer","loadingMessage","loadingExtraText","clearInterval","setState","messageText","React","Component","LoadSpinner","cls","className","isConnected2Gremlin","loadTimeCounter","showSignOut","ConnectorBase","serverUrl","responseEventsCallback","responseCallback","requestBuilder","responseCls","responsesList","requestsList","existingResponses","transportStatusCode","responseObject","statusCode","isStreaming","addResponse2List","ResponseBase","GremlinResponse","getResponseResult","result","code","DefaultHTTPConnector","query_string","payload","then","gatherDataFromStream","DefaultWebSocketConnector","setIsConnected2Gremlin","onOpenCallback","onMessageCallback","onCloseCallback","ws","defaultOnOpenCallback","defaultOnMessageCallback","defaultOnCloseCallback","query","isConnected","event","setupWebSocket","WebSocket","createWebSocket","connect","onopen","onmessage","onclose","msg","generateQueryPayload","queryData","readyState","send","mask","InvanaEngineResponse","errors","message","InvanaEngineHTTPConnector","queryPayload","QueryManagerBase","queryString","vertexId","limit","skip","GremlinQueryManager","InvanaEngineDeSerializer","InvanaEngineQueryManager","queryParams","colorHash","require","hue","min","max","getColorForString","colorToNumber","renderPropertyData","getLabelOptionsOfElement","element","isNode","labelOptions","showLabel","labelString","shapeOptions","labelPropertyKey","labelText","labelColor","getDefaultMeta","options","metaFromStorage","e","InMemoryDataStore","focusedNodes","Map","linkGraphicsArray","linkLabelGraphicsArray","verticesStats","edgesStats","verticesToRender","edgesToRender","verticesAlreadyRendered","edgesAlreadyRendered","vertexOptions","edgeOptions","edgeUniqueStringDelimiter","schema","resetData","assign","uniqueMap","node","uniqueNodes","values","get","vertex","set","edge","labelTextOrId","Number","isInteger","results","intLabelTextOrIdInt","strLabelTextOrIdInt","nodeId","nodeData","toLowerCase","includes","existingLabelStats","vertexEdges","edgeUniqueStr","generateEdgeUniqueString","inVEdges","outVEdges","checkIfEdgeExistInSchema","vertexLabel","inE","outE","map","vertexEdge","split","sourceLabel","targetLabel","edgeLabel","newVertices","newEdges","onDataUpdated","vertexI","checkIfVertexExist","addVertexToDataSet","addVertexToSchema","addToVertexOptions","edgeI","checkIfEdgeExist","addEdgeToDataSet","addEdgeToSchema","addToEdgeOptions","computeDataDistributionStats","keyValueArray","entry","from","keyValueArrayEdge","mapEdge","link","fillColorHex","links","inVGroups","outVGroups","linkType","checkIfNodeIsInVorOutV","getNodeBasicInfo","edgeFillColorHex","strokeColorHex","verticesData","getAllRawVerticesList","edgesData","getAllRawEdgesList","neighborData","getNeighborNodesAndLinks","groupLinksToInEAndOutEByLabel","inData","outData","newVerticesToRender","newEdgesToRender","size","nodes","nodesCleaned","bgImagePropertyKey","radius","radiusBuffered","strokeWidth","strokeColor","borderColor","fillColor","bgColor","tagOptions","tagHtml","bgImageUrl","prepareNodesDataWithOptions","prepareNodes","nodeOptions","prepareLinkDataWithOptions","same","filter","v","sameAlt","sameAll","concat","s","i","sameIndex","sameTotal","sameTotalHalf","sameUneven","sameMiddleLink","Math","ceil","sameLowerHalf","sameArcDirection","sameIndexCorrected","sort","maxSame","maxSameHalf","round","obj","prepareLinksDataForCurves","neighborNodes","neighborLinks","selectedNodes","notNeighborLinks","notNeighborNodes","checkIfVertexExistInFocused","getUniqueFocusedNodes","indexId","focusedNode","index","splice","edgeId","RemoteGraphComponent","queryStartedAt","queryEndedAt","checkIfGremlinUrlIsValid","connector","checkIfGraphEngineIsValid","graphEngine","responseSerializer","dataStore","protocol","getProtocol","connectorCls","bind","onResponseCallback","reconnectWithWS","shallReRenderD3Canvas","selectedElementData","middleBottomContentName","flushResponses","eventName","eventValue","setStatusMessage","setstatusCode","setIsStreaming","setErrorMessage","eventTranslator","Date","resetLoader","processResponse","errorMessage","bottomContentName","existingHistory","unshift","queryObj","queryOptions","addQueryToHistory","defaultProps","parentGraphComponent","propTypes","PropTypes","string","object","HomeView","initQuery","setTimeout","makeQuery","filterVertices","BaseView","responseSessions","requests","leftContentName","rightContentName","middleTopContentName","contentName","canvasType","selectedLabel","selectedLabelType","selectedData","serializedData","process","getResponseData","separateVerticesAndEdges","addData","extendGraph","reRenderCanvas","resetShallReRenderD3Canvas","labelType","GEHeader","children","GEList","style","Indicator","Main","MainContent","AsideLeft","extraClass","GEPanel","headerStyle","title","showToggleBtn","onClick","onClickToggle","icon","faWindowRestore","showCloseBtn","onClickClose","faWindowClose","bodyStyle","MainContentMiddle","MainContentRight","secondaryChild","AsideBottom","GEFooter","AsideRight","SettingsComponent","__url","host","credentialVisibilityStatus","document","getElementById","display","connectionStringWithoutCreds","showCredentials","faSignInAlt","setLeftFlyOut","LearnComponent","addQueryToConsole","onClose","rel","faExternalLinkSquareAlt","HistoryComponent","historyToShow","existingHistoryItem","dt","SupportComponent","faBook","faGithub","faMedium","faTwitter","VerticesManagement","verticesLabels","getVerticesLabelStats","nodeLabels","nodeLabelOption","getNeighborEdgesAndVertices","faProjectDiagram","setShowVertexOptions","faWrench","getVertexColor","count","EdgesManagement","edgesLabels","getEdgesLabelStats","filterEdgeAndGetNeighborVertices","AboutComponent","SelectedData","cleanedData","getCleanedData","nodeLabelsColoring","linkLabelsColoring","selectedDataColorSchema","propKey","VertexOptions","shallReload","getSelectedLabelConfigData","getOrCreateVertices","prevProps","preventDefault","updateVertexById","getOrCreateVertex","forceUpdate","setShallReRenderD3Canvas","defaultNodeOptions","onSubmit","onFormSubmit","readOnly","spellCheck","defaultValue","maxLength","minLength","placeholder","onChange","handleValueChange","FounderNote","setRightContentName","WhatsNew","faCube","setLeftContent","ErrorBoundary","hasError","errorInfo","EventStore","nodeMenuEl","clickedNodeData","undefined","lastSelectedNodeData","hoveredNodeData","graphicsEngine","linkData","linkGfx","onElementSelected","highlightLink","eventStore","hideMenu","unHighlightLink","left","global","x","settings","NODE_MENU_X_PADDING","top","y","NODE_MENU_Y_PADDING","nodeContainer","showMenu","createNodeMenu","graphicsStore","focusOnElements","requestRender","resetFocus","highlightNodes","unHighlightNode","unsetSelectedNodeData","GraphicsStore","clearAndSetupNew","renderedVertices","nodeDataToNodeGfx","renderedEdges","linkDataToLinkGfx","hoveredNodeGfxOriginalChildren","hoveredNodeLabelGfxOriginalChildren","hoveredlinkGfxOriginalChildren","hoveredlinkLabelOriginalChildren","hoveredNodeChildrenPairs","nodeGfxToNodeData","nodeDataToLabelGfx","labelGfxToNodeData","linkGfxToLinkData","linkDataToLabelGfx","labelGfxToLinkData","nodeDataGfxPairs","linkDataGfxPairs","notNeighborData","getNotNeighborLinks","neighborsData","getElementsToHighlightFromLink","getElementsToHighlightFromNodes","linkGfxLabel","alpha","LINK_UN_HIGHLIGHT_ALPHA","linksLayer","removeChild","frontLayer","addChild","linksLabelsLayer","node2Highlight","labelGfx","NODE_BORDER_UN_HIGHLIGHT_ALPHA","nodesLayer","nodeLabelsLayer","LINK_DEFAULT_ALPHA","NODE_BORDER_HIGHLIGHT_ALPHA","getDataToRender","linkLabelGfx","nodeGfx","NODE_DEFAULT_ALPHA","newNodeDataGfxPairs","nodeDataPair","newLinkDataGfxPairs","linkDataPair","GraphicsEngine","canvasElem","renderRequestId","isRendering","isFirstLoaded","requestAnimationFrame","pixiApp","render","updatePositions","clearLinkCanvas","updateNodePositions","updateLinkPositions","linkLabels","PIXI","width","SCREEN_WIDTH","height","SCREEN_HEIGHT","resolution","RESOLUTION","transparent","antialias","autoStart","forceCanvas","autoDensity","view","addEventListener","stopPropagation","appendChild","viewport","Viewport","screenWidth","screenHeight","worldWidth","WORLD_WIDTH","worldHeight","WORLD_HEIGHT","interaction","renderer","plugins","clampZoom","minScale","ZOOM_CLAMP_MIN_SCALE","maxScale","ZOOM_CLAMP_MAX_SCALE","on","dirty","setupCanvas","preventWheelScrolling","stage","drag","pinch","wheel","decelerate","nodeMenuLayer","center","fit","setZoom","zoom2Point","getNodeBorderGfx","NODE_HIT_RADIUS","LABEL_FONT_FAMILY","LABEL_FONT_SIZE","LABEL_X_PADDING","LABEL_Y_PADDING","NODE_SELECTED_STROKE_WIDTH","NODE_FOCUSED_NODE_BORDER_COLOR","interactive","buttonMode","hitArea","onNodeRightClicked","getVertex","currentTarget","onNodeClicked","onNodeMouseOver","onNodeMouseOut","onNodeUnClicked","circleSelectedBorder","lineStyle","drawCircle","circle","beginFill","circleBorder","nodeLabelContainer","nodeLabelText","fontFamily","fontSize","fill","LABEL_RESOLUTION","anchor","newNodes","createNode","clearNodeCanvas","firstChild","linkGraphics","pop","clear","destroy","linkLabelGraphics","x1","y1","x2","y2","sqrt","padding","linearDistanceBetweenTwoPoints","t","normal","NODE_RADIUS","l","tangent","arrowColor","triangle","dx","dy","nx","ny","ex","ey","sx","sy","topX","topY","moveTo","lineTo","endFill","linkColor","LINK_DEFAULT_LABEL_FONT_SIZE","LINK_DEFAULT_WIDTH","createTriangle","linkLabelText","LINK_DEFAULT_LABEL_COLOR","interval","setInterval","geometry","graphicsData","points","shape","mouseData","onLinkMouseOver","onLinkMouseOut","onLinkClicked","createLink","updateLinkPairs","position","createNodes","updateNodePairs","GESettings","devicePixelRatio","FORCE_LAYOUT_NODE_REPULSION_STRENGTH","FORCE_LAYOUT_ITERATIONS","DEFAULT_LINK_LENGTH","NODE_DEFAULT_BORDER_COLOR","LINK_DEFAULT_COLOR","ICON_FONT_FAMILY","ICON_FONT_SIZE","SQRT2","ICON_TEXT","GraphSimulator","onForceSimulationEnd","alphaDecay","forceSimulator","generateForceSimulation","simulation","d3","force","strength","distance","iterations","vertices2RenderPrepared","edges2RenderPrepared","NodeMenu","onClickFocus","getLastSelectedNodeData","addNode2Focus","setFocusedNodes","getInEdgeVertices","getOutEdgeVertices","alphaTarget","restart","removeAllNodes2Focus","resetViewport","color","elem","querySelector","getFocusedNodes","elementId","setDefaultQuery","getVerboseIdentifier","getIdentifier","checkIfAlreadyFocused","faDotCircle","onClickShowInV","faArrowAltCircleLeft","onClickShowOutV","faArrowAltCircleRight","startNewQuery","faTerminal","faMinusCircle","PIXICanvas","shallReRender","getAllData","clearCanvas","determineAllDataToRender","addDataToGraphSimulation","setDataToRender","setAlreadyRenderedData","nextProps","renderPIXICanvas","offsetWidth","offsetHeight","setGraphicsEngine","checkAndAddNewData2Simulation","renderGraphics","zoom2Node","highlightNodeById","setMiddleBottomContentName","setSelectedElementData","setHideVertexOptions","debug","showVertexOptions","gremlinDeSerializer","JSONCanvas","rjv_component","groupByLabel","removeMeta","theme","src","getJsonOrLoader","VertexTableComponent","elType","getElementType","inELabelsConfig","vertexSchema","inELabel","getEdgeOptions","outELabelsConfig","outELabel","propertyKeys","getPropertyKeys","elColor","getElementColor","colorOptions","colSpan","getInELabels","getOutELabels","getFirstElement","propertyKey","edgeLabelConfig","prop","inELabelConfig","vtxIndex","outELabelConfig","EdgeTableComponent","TableCanvas","vertexGroups","edgeGroups","nodeLabel","getVertexSchema","linkLabel","RawResponsesCanvas","lastResponse","getLastResponse","FilterNodes","GEModal","FocusNode","nodeTextOrId","queryResults","infoMessage","searchWord","searchNodeByNodeLabelTextOrId","onFocusNodeClicked","getGraphicsEngine","setInfoMessage","autoFocus","onQueryChange","CanvasNav","canvasMenuType","defaultQuery","switchToCanvasMenu","canvasCtrl","switchCanvasTo","faTable","confirmFlushCanvas","faTrashAlt","confirmRedrawCanvas","faSync","downloadCanvasImage","faCamera","faSearch","faFilter","CanvasController","updateCanvasState","flushCanvas","canvas","lnk","createElement","download","toDataURL","createEvent","initMouseEvent","dispatchEvent","fireEvent","FocusedNodesList","removeFocusedNode","Canvas","removeNodeFromFocus","addQueryToState","Mousetrap","QueryConsole","onEnterPress","keyCode","shiftKey","formRef","Event","getElementsByTagName","focus","unbind","rawQuery","alert","ref","onKeyDown","defaultPlaceholderText","faPlayCircle","ExplorerView","URLSearchParams","search","getStatusCode","getError","unSetupHotKeys","loadQueryFromUrl","setupHotKeys","getQueryFromUrl","verticesCount","getVerticesCount","edgesCount","getEdgesCount","faCubes","faStickyNote","faCog","alt","setBottomContentName","getLatestResponse","setMiddleTopContentName","faHome","faHistory","faLifeRing","faInfoCircle","Page404","referrer","SetupGremlinServerConnection","showExtraHeaderOptions","extraHeadersCount","querySelectorAll","val","gremlinServerUrl","checkIfSecureProtocol","getHeaders","open","updateInputPlaceholder","el","input","getErrorFromUrlString","headersArrayTemp","faPlug","action","toggleMoreOptions","faAngleDown","headerItem","removeHeader","faTimesCircle","addNewHeader","openDemo","SwitchServerView","App","fallback","exact","path","component","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.0b02f5b9.chunk.js","sourcesContent":["export const GE_CONSTANTS = {\n    gremlinServerUrlKey: \"GREMLIN_SERVER_URL\",\n    httpHeadersKey: \"HTTP_HEADERS\",\n    graphEngineName: \"GRAPH_ENGINE\"\n}\n\n\nexport const GREMLIN_SERVER_URL = localStorage.getItem(GE_CONSTANTS.gremlinServerUrlKey);\nexport const GRAPH_ENGINE_NAME = localStorage.getItem(GE_CONSTANTS.graphEngineName);\n\nexport const DefaultMaxTimeElapsedWarningInSeconds = 180;\n// export const DefaultConnectionRetryTimeout = 20;\n\n\nexport const VERSION = \"pre-beta\";\nexport const ABOUT_TEXT = \"Open source visualiser for exploring knowledge graphs using Invana Engine\";\nexport const CONNECT_URL = \"/connect\";\nexport const REPO_URL = \"https://github.com/invanalabs/graph-explorer\";\nexport const UUIDGenerator = () =>\n    ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n        (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16)\n    );\n\n\nexport const DefaultNodeBorderColor = \"#121212\";\nexport const DefaultNodeLabelPropertyKey = \"id\";\nexport const DefaultNodeStrokeWidth = 2;\nexport const DefaultNodeRadius = 15;\nexport const DefaultNodeInShapeTextColor = \"#dddddd\"; // inside the shape\nexport const DefaultNodeLabelColor = \"#dddddd\";\n\nexport const DefaultLinkLabelPropertyKey = \"id\";\nexport const DefaultLinkPathColor = 0xc9c9c9;\nexport const DefaultLinkLabelColor = \"#c9c9c9\";\nexport const DefaultLinkStrokeWidth = 2;\nexport const DefaultLinkDistance = 180;\n\nexport const DefaultInShapeHTMLFn = (node) => node.properties.name ? node.properties.name.substring(0, 10) : node.id;\n\nexport const DefaultLabelVisibility = false;\nexport const simulationAlpha = 0.8;\nexport const linkCurvature = .85;\n\n\nexport const managementVertexLabel = \"InvanaManagement\";\nexport const historyLocalStorageKey = \"GRAPH_EXPLORER_HISTORY\";\nexport const MAX_HISTORY_COUNT_TO_REMEMBER = 100;\nexport const DEMO_URL = \"https://www.youtube.com/watch?v=SuxC4EH0RCs\";\n\n","import {CONNECT_URL, GE_CONSTANTS} from \"../config\";\nimport GraphSONDeSerializer from \"../serializers/graphson-v3\";\n\nconst gremlinDeSerializer = new GraphSONDeSerializer();\n\nfunction padZero(str, len) {\n    len = len || 2;\n    let zeros = new Array(len).join('0');\n    return (zeros + str).slice(-len);\n}\n\nexport function convertMapKeysToArray(mapData) {\n    let data = [];\n    // eslint-disable-next-line no-unused-vars\n    for (const [key, value] of mapData.entries()) {\n        // console.log(\"=====key\", key);\n        data.push(value);\n    }\n    return data;\n}\n\nexport function convertWeakMapKeysToArray(weakMapData) {\n    console.log(\"weakMap\", weakMapData)\n    let data = [];\n    // eslint-disable-next-line no-unused-vars\n    for (const [key, value] of weakMapData.items()) {\n        // console.log(\"=====key\", key);\n        data.push(value);\n    }\n    return data;\n}\n\nexport function invertColor(hex, bw) {\n    /*\n    https://stackoverflow.com/a/35970186/3448851\n     */\n    if (hex.indexOf('#') === 0) {\n        hex = hex.slice(1);\n    }\n    // convert 3-digit hex to 6-digits.\n    if (hex.length === 3) {\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n    }\n    if (hex.length !== 6) {\n        throw new Error('Invalid HEX color.');\n    }\n    var r = parseInt(hex.slice(0, 2), 16),\n        g = parseInt(hex.slice(2, 4), 16),\n        b = parseInt(hex.slice(4, 6), 16);\n    if (bw) {\n        // http://stackoverflow.com/a/3943023/112731\n        return (r * 0.299 + g * 0.587 + b * 0.114) > 186\n            ? '#000000'\n            : '#FFFFFF';\n    }\n    // invert color components\n    r = (255 - r).toString(16);\n    g = (255 - g).toString(16);\n    b = (255 - b).toString(16);\n    // pad each with zeros and return\n    return \"#\" + padZero(r) + padZero(g) + padZero(b);\n}\n\n\nexport function LightenDarkenColor(col, amt) {\n\n    let usePound = false;\n\n    if (col[0] === \"#\") {\n        col = col.slice(1);\n        usePound = true;\n    }\n\n    let num = parseInt(col, 16);\n\n    let r = (num >> 16) + amt;\n\n    if (r > 255) r = 255;\n    else if (r < 0) r = 0;\n\n\n    let g = ((num >> 8) & 0xff) + amt;\n\n    if (g > 255) g = 255;\n    else if (g < 0) g = 0;\n\n\n    let b = (num & 0xff) + amt;\n\n    if (b > 255) b = 255;\n    else if (b < 0) b = 0;\n\n    return (usePound ? \"#\" : \"\") + ((r << 16) | (g << 8) | b).toString(16);\n\n}\n\nexport function getDataFromLocalStorage(itemKey, isJson) {\n\n    if (isJson) {\n        return JSON.parse(localStorage.getItem(itemKey));\n    } else {\n        return localStorage.getItem(itemKey)\n    }\n\n}\n\nexport function setDataToLocalStorage(itemKey, itemData) {\n    // console.log(\"settings data\", itemKey, itemData)\n    if (typeof itemData === 'object') {\n        itemData = JSON.stringify(itemData);\n    }\n    localStorage.setItem(itemKey, itemData);\n}\n\nexport function removeItemFromLocalStorage(itemKey) {\n    localStorage.removeItem(itemKey);\n}\n\nexport function removeEverythingFromLocalStorage() {\n    localStorage.clear();\n}\n\nexport function getProtocol(gremlinUrl) {\n    const _ = new URL(gremlinUrl).protocol;\n    return _.includes(\"ws\") ? \"ws\" : \"http\";\n}\n\nexport async function postData(url = '', extraHeaders = {}, data = {}) {\n    // Default options are marked with *\n    const url_analysed = new URL(url);\n    extraHeaders[\"Content-Type\"] = \"application/json\";\n    extraHeaders[\"Accept\"] = \"application/json\";\n    extraHeaders['Content-Length'] = Buffer.byteLength(JSON.stringify(data));\n    if (url_analysed.username && url_analysed.password) {\n        extraHeaders['Authorization'] = 'Basic ' + btoa(url_analysed.username + ':' + url_analysed.password);\n    } else if (url_analysed.username && url_analysed.password !== \"\") {\n        extraHeaders['Authorization'] = 'Token ' + url_analysed.username;\n    }\n\n    console.log(\"=====request data\", data);\n    const gremlinUrl = url_analysed.origin + url_analysed.pathname;\n    // let response = null\n    let transporterStatusCode = null;\n    let responseJson = {};\n\n    try {\n        const response = await fetch(gremlinUrl, {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            // credentials: 'include', // include, *same-origin, omit\n            headers: extraHeaders,\n            body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n        });\n        console.log(\"response========\", response);\n\n        transporterStatusCode = response.status\n        try {\n            responseJson = await response.json();\n        } catch (e) {\n            console.error(\"failed to get the json data with error\", e);\n        }\n    } catch (e) {\n        console.error(\"Failed to perform fetch with error \", e);\n        transporterStatusCode = 999;\n    }\n\n    // let statusCode = response.status; // response from the server.\n\n    return {\"response\": responseJson, transporterStatusCode: transporterStatusCode}\n}\n\nexport function redirectToConnectIfNeeded(gremlinUrl) {\n    console.log(\"redirectToConnectIfNeeded\");\n    const u = new URL(window.location.href)\n    if ((gremlinUrl === null || gremlinUrl === \"\") && u.pathname !== \"/connect\") {\n        window.location.href = \"/connect\";\n    } else {\n        return true;\n    }\n}\n\n\nexport function setElementColorOptionsToStorageUsingResponse(response) {\n    /*\n    If sent response from gremlin, it will automatically update those new\n    vertex/edge key data only.\n     */\n    console.log(\"setElementColorOptionsToStorageUsingResponse\", response.response.data.filterVertex);\n    let nodeLabelsConfig = {};\n    let edgeLabelsConfig = {};\n    response.response.data.filterVertex.forEach((vertexConfig) => {\n        // if (vertexConfig)\n        // const defaultOptins\n        nodeLabelsConfig[vertexConfig.properties.name] = vertexConfig.properties;\n    });\n    // response.response.data.filterEdge.forEach((edgeConfig)=> {\n    //    edgeLabelsConfig[edgeConfig.label] = edgeConfig.properties;\n    // });\n    console.log(\"=======((\", nodeLabelsConfig, edgeLabelsConfig)\n    setDataToLocalStorage('nodeLabels', nodeLabelsConfig);\n    setDataToLocalStorage('linkLabels', edgeLabelsConfig);\n}\n\nexport function setElementColorOptionsToStorage(vertexOption) {\n    /*\n    If sent response from gremlin, it will automatically update those new\n    vertex/edge key data only.\n     */\n    console.log(\"setElementColorOptionsToStorage\", vertexOption)\n\n    // if (vertexOption.type === \"g:Vertex\") {\n    let _nodes = getDataFromLocalStorage(\"nodeLabels\", true) || {};\n    _nodes[vertexOption.properties.name] = vertexOption.properties;\n    setDataToLocalStorage('nodeLabels', _nodes);\n\n    // } else {\n    //     let _links = getDataFromLocalStorage(\"linkLabels\", true) || {};\n    //     _links[vertexOption.properties.name] = vertexOption.properties;\n    //     setDataToLocalStorage('linkLabels', _links);\n    //\n    //\n    // }\n\n}\n\n\nexport function askToSwitchGremlinServer() {\n    var r = window.confirm(\"You are about to sign out of the workspace. \" +\n        \"Your query history will be preserved. Do you want to continue?\");\n    if (r === true) {\n        removeItemFromLocalStorage(GE_CONSTANTS.gremlinServerUrlKey);\n        window.location.href = CONNECT_URL;\n    }\n}\n\n\nexport function convertResponses2JSONs(responses) {\n\n    let jsonResponses = [];\n    responses.forEach(function (response) {\n        const _ = gremlinDeSerializer.process(response)\n        jsonResponses.push(_)\n    })\n    return jsonResponses;\n}\n","import DeSerializerBase from \"./base\";\n\nexport default class GraphSONDeSerializer extends DeSerializerBase{\n\n\n    convertVertexPropertyToJson(property) {\n        let _single_prop = property[0];\n        if (_single_prop['@type'] !== \"g:VertexProperty\") {\n            throw new Error(\"Not a VertexProperty error. check if this is of g:VertexProperty type:: \" + JSON.stringify(property));\n        }\n        let d = {};\n        let value = _single_prop['@value'].value;\n        d[_single_prop['@value'].label] = (typeof value === \"string\") ? value : value['@value'];\n        return d;\n    }\n\n\n    convertVertex2Json(vtx) {\n        if (vtx['@type'] !== \"g:Vertex\") {\n            throw new Error(\"Not a vertex error. check if this is of g:Vertex type:: \" + JSON.stringify(vtx));\n        }\n        let _this = this;\n        let d = {};\n        d.type = \"g:Vertex\";\n        d.id = vtx['@value'].id['@value'];\n        d.label = vtx['@value'].label;\n        let properties = vtx['@value'].properties;\n        d.properties = {}\n        if (properties) {\n            Object.keys(properties).forEach(function (key) {\n                let property = properties[key];\n                let _ = _this.convertVertexPropertyToJson(property);\n                d.properties[key] = _[key];\n            });\n        }\n        return d;\n    }\n\n\n    convertEdgePropertyToJson(property) {\n        let _single_prop = property;\n        if (_single_prop['@type'] !== \"g:Property\") {\n            throw new Error(\"Not a g:Property error. check if this is of g:Property type:: \" + JSON.stringify(property));\n        }\n        let d = {};\n        let value = _single_prop['@value'].value;\n        d[_single_prop['@value'].key] = (typeof value === \"string\") ? value : value['@value'];\n        return d;\n    }\n\n\n    convertEdge2Json(edg) {\n        if (edg['@type'] !== \"g:Edge\") {\n            throw new Error(\"Not a edge error. check if this is of g:Edge type:: \" + JSON.stringify(edg));\n        }\n        let _this = this;\n        let d = {};\n        d.type = \"g:Edge\";\n        d.label = edg['@value'].label;\n        d.id = edg['@value'].id['@value'].relationId;\n        d.inV = edg['@value'].inV['@value'];\n        d.inVLabel = edg['@value'].inVLabel;\n        d.outV = edg['@value'].outV['@value'];\n        d.outVLabel = edg['@value'].outVLabel;\n        d.source = d.outV;\n        d.target = d.inV;\n\n        let properties = edg['@value'].properties;\n        d.properties = {}\n        if (properties) {\n            Object.keys(properties).forEach(function (key) {\n                let property = properties[key];\n                let _ = _this.convertEdgePropertyToJson(property);\n                d.properties[key] = _[key];\n            });\n\n        }\n        return d;\n    }\n\n    // convertSet2Json(set_item) {\n\n\n    // if (set_item && \"@type\" in set_item) {\n    //     if (set_item['@type'] !== \"g:Set\") {\n    //         throw new Error(\"Not a g:Set error. check if this is of g:Set type:: \" + JSON.stringify(set_item));\n    //     }\n    // }\n    // let items = [];\n    // if (set_item && '@value' in set_item) {\n    //     set_item['@value'].forEach(function (item) {\n    //         // TODO - NOT IMPLEMENTED - because no use case found yet.\n    //         // let data_list = _this.processItem(item);\n    //         // data_list.forEach(function (datum) {\n    //         //     items.push(datum);\n    //         // });\n    //     });\n    // }\n    // return items;\n\n    // }\n\n    convertList2Json(list_item) {\n        // console.log(\"convertList2Json list_item\", list_item);\n        if (list_item && \"@type\" in list_item) {\n            if (list_item['@type'] !== \"g:List\") {\n                throw new Error(\"Not a List error. check if this is of g:List type:: \" + JSON.stringify(list_item));\n            }\n        }\n        let _this = this;\n        let items = [];\n        if (list_item && '@value' in list_item) {\n            list_item['@value'].forEach(function (item) {\n                let data_list = _this.processItem(item);\n                // console.log(\"data_list\", data_list);\n                data_list.forEach(function (datum) {\n                    items.push(datum);\n                });\n            });\n        }\n        return items;\n    }\n\n    convertBulkset2Json(list_item) {\n        // console.log(\"Bulkset\", list_item);\n        if (list_item && \"@type\" in list_item) {\n            if (list_item['@type'] !== \"g:BulkSet\") {\n                throw new Error(\"Not a g:BulkSet error. check if this is of g:BulkSet type:: \" + JSON.stringify(list_item));\n            }\n        }\n        let _this = this;\n        let items = [];\n        if (list_item && '@value' in list_item) {\n            list_item['@value'].forEach(function (item) {\n                let data_list = _this.processItem(item);\n                // console.log(\"====datalist\", data_list, item);\n                data_list.forEach(function (datum) {\n                    items.push(datum);\n                });\n            });\n        }\n        return items;\n    }\n\n    convertMap2Json(list_item) {\n        if (list_item && \"@type\" in list_item) {\n            if (list_item['@type'] !== \"g:Map\") {\n                throw new Error(\"Not a g:Map error. check if this is of g:Map type:: \" + JSON.stringify(list_item));\n            }\n        }\n        let _this = this;\n        let items = [];\n        if (list_item && '@value' in list_item) {\n            list_item['@value'].forEach(function (item) {\n                let data_list = _this.processItem(item);\n                data_list.forEach(function (datum) {\n                    items.push(datum);\n                });\n            });\n        }\n        return items;\n    }\n\n\n    convertPath2Json(path_item) {\n        if (path_item && \"@type\" in path_item) {\n            if (path_item['@type'] !== \"g:Path\") {\n                throw new Error(\"Not a g:Path error. check if this is of g:Path type:: \" + JSON.stringify(path_item));\n            }\n        }\n        let _this = this;\n        let items = [];\n        if (path_item && '@value' in path_item) {\n            if (\"objects\" in path_item['@value']) {\n                path_item['@value'].objects['@value'].forEach(function (item) {\n                    let data_list = _this.processItem(item);\n                    data_list.forEach(function (datum) {\n                        items.push(datum);\n                    });\n                });\n            } else if (\"labels\" in path_item['@value']) {\n                path_item['@value'].labels['@value'].forEach(function (item) {\n                    let data_list = _this.processItem(item);\n                    data_list.forEach(function (datum) {\n                        items.push(datum);\n                    });\n                });\n            }\n        }\n        return items;\n    }\n\n    processItem(item) {\n        // this is very useful to route to the respective renderers;\n        let _this = this;\n        // console.log(\"process item\", typeof item, item);\n        if (item && typeof item === \"object\" && '@type' in item) {\n            if (item['@type'] === \"g:Vertex\") {\n                let _ = _this.convertVertex2Json(item);\n                return [_];\n            } else if (item['@type'] === \"g:Edge\") {\n                let _ = _this.convertEdge2Json(item);\n                return [_];\n            } else if (item['@type'] === \"g:List\") {\n                // console.log(\"=======items\", item);\n                return _this.convertList2Json(item);\n            } else if (item['@type'] === \"g:Path\") {\n                // console.log(\"=======items\", item);\n                return _this.convertPath2Json(item);\n            } else if (item['@type'] === \"g:Set\") {\n                // console.log(\"=======items\", item);\n                throw new Error(\"@type g:Set serialisation not implemented\");\n                // return _this.convertSet2Json(item);\n            } else if (item['@type'] === \"g:BulkSet\") {\n                // console.log(\"=======items\", item);\n                return _this.convertBulkset2Json(item);\n            } else if (item['@type'] === \"g:Map\") {\n                // console.log(\"=======items\", item);\n                return _this.convertMap2Json(item);\n            } else {\n                return [];\n            }\n        } else {\n            return [];\n        }\n    }\n\n    process(data) {\n        return this.convertList2Json(data);\n    }\n\n    separateVerticesAndEdges(data, ignoreManagement) {\n        if (typeof ignoreManagement === \"undefined\") {\n            ignoreManagement = true;\n        }\n        let vertices = [];\n        let edges = [];\n        if (data) {\n            data.forEach(function (d) {\n                if (ignoreManagement) {\n                    if (d.type === \"g:Vertex\" && d.label !== \"InvanaManagement\") {\n                        vertices.push(d);\n                    } else if (d.type === \"g:Edge\" && d.label !== \"InvanaManagement\") {\n                        edges.push(d);\n                    }\n                } else {\n                    if (d.type === \"g:Vertex\") {\n                        vertices.push(d);\n                    } else if (d.type === \"g:Edge\") {\n                        edges.push(d);\n                    }\n                }\n\n            });\n        }\n        return {\"nodes\": vertices, \"links\": edges};\n    }\n\n\n    removeMeta(data) {\n        if (!data) {\n            data = [];\n        }\n        let newData = []\n        data.forEach(function (datum) {\n            delete datum.meta\n            newData.push({\n                type: datum.type,\n                label: datum.label,\n                id: datum.id,\n                properties: datum.properties,\n            })\n        })\n        return newData;\n    }\n\n\n    groupByLabel(data) {\n\n\n        let dataGroups = {};\n        data.forEach(function (datum) {\n            // TODO - review this for performance.\n            if (datum.label in dataGroups) {\n                dataGroups[datum.label].push(datum)\n            } else {\n                dataGroups[datum.label] = [datum];\n            }\n        });\n        return dataGroups;\n    }\n}\n","/*\n\n */\n\nexport default class DeSerializerBase {\n\n    /*\n\nconst serializedData = _this.responseSerializer.process(response.getResponseData());\nconst separatedData = _this.responseSerializer.separateVerticesAndEdges(serializedData);\n\n\n\n     */\n    processItem(item) {\n        throw new TypeError(\"Please implement abstract method processItem. Ignoring\", item);\n\n    }\n\n    convertList2Json(list_item) {\n        throw new TypeError(\"Please implement abstract method convertList2Json. Ignoring\", list_item);\n    }\n\n    separateVerticesAndEdges(items) {\n        throw new TypeError(\"Please implement abstract method separateVerticesAndEdges. \" +\n            \"Ignoring\", items);\n    }\n\n    process(data) {\n        return this.convertList2Json(data);\n    }\n}\n","import React from 'react';\n// import {DefaultMaxTimeElapsedWarningInSeconds} from \"../config\";\n\n\nexport default class BaseComponent extends React.Component {\n\n    /*\n\n\n     */\n\n    loaderTimerIntervalId = null;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            statusMessage: null,\n            isLoading: false,\n            loaderElapsedTimer: 0,\n            loadingMessage: null,\n            loadingExtraText: null,\n        }\n    }\n\n\n    resetLoader() {\n        clearInterval(this.loaderTimerIntervalId);\n        this.setState({\n            loadingMessage: null,\n            loadingExtraText: null,\n            isLoading: false,\n            loaderElapsedTimer: null\n        })\n\n    }\n\n\n    setStatusMessage(messageText) {\n        this.setState({statusMessage: messageText});\n    }\n\n\n}\n","import React from \"react\";\nimport {DefaultMaxTimeElapsedWarningInSeconds} from \"../../config\";\nimport \"./spinner.scss\";\nimport PropTypes from \"prop-types\";\n\nexport default class LoadSpinner extends React.Component {\n\n    static propTypes = {\n        isLoading: PropTypes.bool,\n        loadingMessage: PropTypes.string,\n        loadTimeCounter: PropTypes.number,\n        loadingExtraText: PropTypes.string,\n        isConnected2Gremlin: PropTypes.bool,\n        showSignOut: PropTypes.bool\n    }\n\n    render() {\n\n        let cls = \"loadingDivExplorerView\";\n        if (window.location.pathname === \"/\") {\n            cls = \"loadingDivFull\";\n        }\n\n        return (\n            <div>\n                {this.props.isLoading ? (\n                    <div className={cls}>\n                        {\n                            this.props.isConnected2Gremlin\n                                ? <h3>{this.props.loadingMessage}</h3>\n                                : <h3>Failed to connect to the database.</h3>\n                        }\n                        <p>\n                            {this.props.loadTimeCounter ? (\n                                <span>Elapsed {this.props.loadTimeCounter}s.</span>\n                            ) : (\n                                <span/>\n                            )}{\" \"}\n                            {this.props.loadingExtraText}\n                        </p>\n                        {this.props.loadTimeCounter >=\n                        DefaultMaxTimeElapsedWarningInSeconds ? (\n                            <span>Strange! this operation took more than{\" \"}\n                                {DefaultMaxTimeElapsedWarningInSeconds} seconds</span>\n                        ) : (\n                            <span/>\n                        )}\n                        {this.props.showSignOut === true ? (\n                            <p>\n                                <a href=\"/switch-server\">\n                                    <u>switch</u> to a different server.\n                                </a>\n                            </p>\n                        ) : (\n                            <span/>\n                        )}\n                    </div>\n                ) : (\n                    <span/>\n                )}\n            </div>\n        );\n    }\n}\n","/*\n\n\n */\n\n\nclass ConnectorBase {\n\n    /*\n\n        Connector is supposed to take care of requests and responses data.\n        It is supplied with requestBuilder too, so that developers\n        can build and query at convenience.\n\n\n\n\n     */\n\n    responseCls = null;\n    responsesList = [];\n    requestsList = [];\n\n    constructor(serverUrl, responseEventsCallback, responseCallback, requestBuilder) {\n        /*\n        responseEventsCallback is to send the update events during fetching the data.\n        responseCallback is for the final data.\n\n\n         */\n        console.log(\"connector constructor\");\n        this.serverUrl = serverUrl;\n        this.responseEventsCallback = responseEventsCallback;\n        this.responseCallback = responseCallback;\n        this.requestBuilder = requestBuilder;\n    }\n\n\n    flushResponses(){\n        this.responsesList = [];\n    }\n\n    addResponse2List(response) {\n        const existingResponses = this.responsesList;\n        existingResponses.push(response);\n        this.requestsList = existingResponses;\n\n    }\n\n    getLastResponse() {\n        return this.responsesList[this.responsesList.length - 1];\n    }\n\n    getResponses() {\n        return this.responsesList;\n    }\n\n    flushResponseList() {\n        this.responsesList = [];\n    }\n\n    gatherDataFromStream(response, transportStatusCode) {\n        console.log(\"onmessage received\", response);\n        const responseObject = new this.responseCls(response, transportStatusCode);\n        if (transportStatusCode >= 200 && transportStatusCode < 300) {\n            if (transportStatusCode === 206) {\n                this.responseEventsCallback({\n                    statusMessage: \"Gathering data from the stream\",\n                    statusCode: transportStatusCode,\n                    isStreaming: true\n                })\n                this.addResponse2List(responseObject);\n            } else {\n                this.responseEventsCallback({\n                    statusMessage: \"Responded to the Query Successfully\",\n                    statusCode: transportStatusCode,\n                    isStreaming: false\n                })\n                this.addResponse2List(responseObject);\n                // const responses = Object.assign(this.responsesList);\n                // this.flushResponseList();\n                this.responseCallback(responseObject);\n            }\n        } else {\n            console.log(\"response===========\", response);\n            this.addResponse2List(responseObject);\n            // const responses = Object.assign(this.responsesList);\n            this.responseEventsCallback({\n                statusMessage: \"Query Failed with \" + transportStatusCode + \" error.\",\n                statusCode: transportStatusCode,\n                isStreaming: false\n            })\n            this.responseCallback(responseObject);\n        }\n    }\n\n\n}\n\nexport default ConnectorBase\n","/*\n\n*/\n\n\nexport default class ResponseBase {\n\n    constructor(response, transporterStatusCode) {\n        this.response = response;\n        this.transporterStatusCode = transporterStatusCode;\n    }\n\n    getResponseData() {\n        throw new TypeError(\"Please implement abstract method getResponseData.\");\n\n    }\n\n    getResponseResult() {\n        throw new TypeError(\"Please implement abstract method getResponseResult.\");\n    }\n\n    getStatusCode() {\n        throw new TypeError(\"Please implement abstract method getStatusCode.\");\n    }\n\n    getError() {\n        throw new TypeError(\"Please implement abstract method getStatusCode.\");\n    }\n}\n","import ResponseBase from \"./base\";\n\nexport default class GremlinResponse extends ResponseBase{\n\n\n    getResponseData() {\n        return this.getResponseResult().data;\n    }\n\n    getResponseResult() {\n        return this.response.result;\n    }\n\n    getStatusCode() {\n        return this.response.status.code || this.transporterStatusCode;\n    }\n\n    getError() {\n        return this.response.status;\n    }\n}\n","import ConnectorBase from \"./base\";\nimport {getDataFromLocalStorage, postData} from \"../core/utils\";\nimport {GE_CONSTANTS} from \"../config\";\nimport GremlinResponse from \"../responses/gremlin\";\n\nexport default class DefaultHTTPConnector extends ConnectorBase {\n\n    responseCls = GremlinResponse;\n\n    query(query_string) {\n        const payload = {\"gremlin\": query_string};\n        const extraHeaders = getDataFromLocalStorage(GE_CONSTANTS.httpHeadersKey, true) || {};\n        const _this = this;\n        postData(this.serverUrl, extraHeaders, payload).then((data) => {\n            // check the status and response type and change isConnected\n            _this.gatherDataFromStream(data.response, data.transporterStatusCode);\n        });\n\n    }\n}\n","import ConnectorBase from \"./base\";\nimport {UUIDGenerator} from \"../config\";\nimport GremlinResponse from \"../responses/gremlin\";\n\n\nexport default class DefaultWebSocketConnector extends ConnectorBase {\n    ws = null;\n    responseCls = GremlinResponse;\n\n    constructor(serverUrl, responseEventsCallback, responseCallback, setIsConnected2Gremlin,\n                onOpenCallback, onMessageCallback, onCloseCallback) {\n        super(serverUrl, responseEventsCallback, responseCallback,);\n        this.onOpenCallback = onOpenCallback || this.defaultOnOpenCallback;\n        this.onMessageCallback = onMessageCallback || this.defaultOnMessageCallback;\n        this.onCloseCallback = onCloseCallback || this.defaultOnCloseCallback;\n        this.setIsConnected2Gremlin = setIsConnected2Gremlin;\n    }\n\n    generateQueryPayload(query) {\n        return {\n            \"requestId\": UUIDGenerator(),\n            \"op\": \"eval\",\n            \"processor\": \"\",\n            \"args\": {\n                \"gremlin\": query,\n                \"bindings\": {},\n                \"language\": \"gremlin-groovy\"\n            }\n        };\n    }\n\n\n    defaultOnOpenCallback() {\n        console.log('connected')\n        this.responseEventsCallback({\n            statusMessage: \"Connected\",\n            isConnected: true\n        })\n    }\n\n    defaultOnMessageCallback(event) {\n        const response = JSON.parse(event.data)\n        console.log(\"onmessage\", response);\n        this.gatherDataFromStream(response, response.status.code);\n    }\n\n    defaultOnCloseCallback(event) {\n        let _this = this;\n        if (event.code !== 3001) {\n            console.log('ws connection error');\n        }\n        // automatically try to reconnectWithWS on connection loss\n        _this.setIsConnected2Gremlin(false);\n    }\n\n\n    connect() {\n        this.setupWebSocket();\n    }\n\n    createWebSocket() {\n        return new WebSocket(this.serverUrl);\n    }\n\n    reconnectWithWS() {\n        this.ws = this.createWebSocket();\n        this.connect();\n    }\n\n    setupWebSocket() {\n        let _this = this;\n        console.log(\"setupWebSocket triggered===========================\")\n        this.ws.onopen = () => {\n            // on connecting, do nothing but log it to the console\n            _this.onOpenCallback();\n        }\n\n        this.ws.onmessage = event => {\n            // listen to data sent from the websocket server\n            _this.onMessageCallback(event);\n        }\n\n        this.ws.onclose = (event) => {\n            console.log('disConnected2Gremlin');\n            this.onCloseCallback(event);\n\n        }\n    }\n\n    query(query) {\n        /*\n\n         */\n\n        let msg = this.generateQueryPayload(query);\n        let queryData = JSON.stringify(msg);\n        console.log(\"Query long one\", queryData);\n        let _this = this;\n        if (this.ws.readyState === 1) {\n            _this.ws.send(queryData, {mask: true});\n            this.responseEventsCallback({\n                statusMessage: \"Querying...\"\n            });\n        } else {\n            _this.ws.onopen = function () {\n                _this.ws.send(queryData, {mask: true});\n                this.responseEventsCallback({\n                    statusMessage: \"Querying...\"\n                })\n            };\n        }\n    }\n\n}\n","import ResponseBase from \"./base\";\n\nexport default class InvanaEngineResponse extends ResponseBase {\n\n\n    getResponseData() {\n        return this.getResponseResult();\n    }\n\n    getResponseResult() {\n        // console.log(\"getResponseResult\", this.response, Object.keys(this.response.data)[0],  this.response.data[Object.keys(this.response.data)[0]]);\n        if (this.response.data) {\n            return this.response.data[Object.keys(this.response.data)[0]];\n        } else {\n            return [];\n        }\n    }\n\n    getStatusCode() {\n        return this.transporterStatusCode;\n    }\n\n    getError() {\n        if (this.response.errors && this.response.errors.length > 0) {\n            return this.response.errors[0].message;\n        } else {\n            return null;\n        }\n\n    }\n}\n\n","import ConnectorBase from \"./base\";\nimport {getDataFromLocalStorage, postData} from \"../core/utils\";\nimport {GE_CONSTANTS} from \"../config\";\nimport InvanaEngineResponse from \"../responses/invana-engine\";\n\nexport default class InvanaEngineHTTPConnector extends ConnectorBase {\n\n    responseCls = InvanaEngineResponse\n\n    query(queryPayload) {\n        // queryPayload = JSON.stringify(queryPayload);\n        // const payload = {\"query\": \"{rawQuery(gremlin:\" + JSON.stringify(queryPayload) + \"){id,type,label,properties, inV, inVLabel, outV, outVLabel}}\"};\n        const extraHeaders = getDataFromLocalStorage(GE_CONSTANTS.httpHeadersKey, true) || {};\n        const _this = this;\n        postData(this.serverUrl, extraHeaders, queryPayload).then((data) => {\n            // check the status and response type and change isConnected\n            console.log(\"InvanaEngineHTTPConnector\", data);\n            _this.gatherDataFromStream(data.response, data.transporterStatusCode);\n        });\n    }\n}\n","/*\n\n*/\n\n\n\n\n\nexport default class QueryManagerBase {\n\n    initQuery() {\n        throw new TypeError(\"Please implement abstract method initQuery.\");\n    }\n\n    rawQuery(queryString) {\n        return queryString;\n    }\n\n\n    // eslint-disable-next-line no-unused-vars\n    getOutEdgeVertices(vertexId) {\n        throw new TypeError(\"Please implement abstract method getOutEdgeVertices.\");\n\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    getInEdgeVertices(vertexId) {\n        throw new TypeError(\"Please implement abstract method getInEdgeVertices.\");\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    managementGetVertexLabelStats(limit, skip) {\n        throw new TypeError(\"Please implement abstract method managementGetVertexLabelStats.\");\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    managementGetEdgeLabelStats(limit, skip) {\n        throw new TypeError(\"Please implement abstract method managementGetEdgeLabelStats.\");\n    }\n\n}\n","import QueryManagerBase from \"./base\";\n\n\nexport default class GremlinQueryManager extends QueryManagerBase {\n\n    initQuery() {\n        return \"g.V().limit(10).toList()\";\n    }\n\n    getOutEdgeVertices(vertexId) {\n        // #TODO - improve query performance ?\n        console.log(\"===vertexId\", vertexId);\n        return \"node=g.V(\" + vertexId + \").toList(); \" +\n            \"edges = g.V(\" + vertexId + \").inE().dedup().toList(); \" +\n            \"other_nodes = g.V(\" + vertexId + \").inE().otherV().dedup().toList();\" +\n            \"[other_nodes,edges,node]\";\n    }\n\n    getInEdgeVertices(vertexId) {\n        // #TODO - improve query performance ?\n\n        console.log(\"===vertexId\", vertexId);\n        return \"node=g.V(\" + vertexId + \").toList(); \" +\n            \"edges = g.V(\" + vertexId + \").outE().dedup().toList(); \" +\n            \"other_nodes = g.V(\" + vertexId + \").outE().otherV().dedup().toList();\" +\n            \"[other_nodes,edges,node]\";\n    }\n\n}\n\n","import DeSerializerBase from \"./base\";\n\n\nexport default class InvanaEngineDeSerializer extends DeSerializerBase {\n\n\n    processItem(item) {\n        return item;\n    }\n\n    convertEdge2Json(edg) {\n        edg.source = edg.outV;\n        edg.target = edg.inV;\n        return edg;\n    }\n\n    separateVerticesAndEdges(data, ignoreManagement) {\n        if (typeof ignoreManagement === \"undefined\") {\n            ignoreManagement = true;\n        }\n        let vertices = [];\n        let edges = [];\n        if (!data) {\n            data = []\n        }\n        let _this = this;\n        data.forEach(function (d) {\n            if (ignoreManagement) {\n                if (d.type === \"g:Vertex\" && d.label !== \"InvanaManagement\") {\n                    vertices.push(d);\n                } else if (d.type === \"g:Edge\" && d.label !== \"InvanaManagement\") {\n                    edges.push(_this.convertEdge2Json(d));\n                }\n            } else {\n                if (d.type === \"g:Vertex\") {\n                    vertices.push(d);\n                } else if (d.type === \"g:Edge\") {\n                    edges.push(_this.convertEdge2Json(d));\n                }\n            }\n        });\n\n\n        return {\"nodes\": vertices, \"links\": edges};\n    }\n\n    convertList2Json(items) {\n        return items;\n    }\n\n}\n\n","import QueryManagerBase from \"./base\";\n\n\nexport default class InvanaEngineQueryManager extends QueryManagerBase {\n\n    getOrCreateVertices(label, properties) {\n        return {\n            \"query\": \"{getOrCreateVertex(label:\\\"\" + label + \"\\\", properties: \"\n                + JSON.stringify(JSON.stringify(properties)) + \"){id,type,label,properties}}\"\n        };\n    }\n\n    updateVertexById(vertexId, properties) {\n        return {\n            \"query\": \"mutation{updateVertexById(id: \" + vertexId + \", properties: \"\n                + JSON.stringify(JSON.stringify(properties)) + \"){id,type,label,properties}}\"\n        };\n    }\n\n    getOutEdgeVertices(vertexId) {\n        return {\"query\": \"{getOutEdgesAndVertices(id:\" + JSON.stringify(vertexId) + \"){id,type,label,properties, inV, inVLabel, outV, outVLabel}}\"};\n    }\n\n    getInEdgeVertices(vertexId) {\n        return {\"query\": \"{getInEdgesAndVertices(id:\" + JSON.stringify(vertexId) + \"){id,type,label,properties, inV, inVLabel, outV, outVLabel}}\"};\n    }\n\n    getVerticesLabelStats() {\n        return {\"query\": \"{getVerticesLabelStats{label, count}}\"};\n    }\n\n    getEdgesLabelStats() {\n        return {\"query\": \"{getEdgesLabelStats{label, count}}\"};\n    }\n\n    initQuery() {\n        return {\"query\": \"{filterVertex(limit: 10){id,type,label,properties, inV, inVLabel, outV, outVLabel}}\"};\n    }\n\n    filterVertices(label, limit, skip) {\n\n        let queryParams = \"\";\n        if (label) {\n            queryParams += \"label: \\\"\" + label + \"\\\",\";\n        }\n        if (limit) {\n            queryParams += \"limit: \" + limit + \",\";\n        }\n        if (skip) {\n            queryParams += \"skip: \" + skip;\n        }\n\n        queryParams = queryParams.replace(/,\\s*$/, \"\");\n        return {\"query\": \"{filterVertex(\" + queryParams + \"){id,type,label,properties}}\"};\n    }\n\n    getNeighborEdgesAndVertices(label, limit, skip) {\n\n        let queryParams = \"\";\n        if (label) {\n            queryParams += \"label: \\\"\" + label + \"\\\",\";\n        }\n        if (limit) {\n            queryParams += \"limit: \" + limit + \",\";\n        }\n        if (skip) {\n            queryParams += \"skip: \" + skip;\n        }\n\n        queryParams = queryParams.replace(/,\\s*$/, \"\");\n        return {\"query\": \"{getNeighborEdgesAndVertices(\" + queryParams + \"){id,type,label,properties, inV, inVLabel, outV, outVLabel}}\"};\n    }\n\n    filterEdges(label, limit, skip) {\n\n        let queryParams = \"\";\n        if (label) {\n            queryParams += \"label: \\\"\" + label + \"\\\",\";\n        }\n        if (limit) {\n            queryParams += \"limit: \" + limit + \",\";\n        }\n        if (skip) {\n            queryParams += \"skip: \" + skip;\n        }\n\n        queryParams = queryParams.replace(/,\\s*$/, \"\");\n        return {\"query\": \"{filterEdge(\" + queryParams + \"){id,type,label,properties, inV, inVLabel, outV, outVLabel}}\"};\n    }\n\n    filterEdgeAndGetNeighborVertices(label, limit, skip) {\n\n        let queryParams = \"\";\n        if (label) {\n            queryParams += \"label: \\\"\" + label + \"\\\",\";\n        }\n        if (limit) {\n            queryParams += \"limit: \" + limit + \",\";\n        }\n        if (skip) {\n            queryParams += \"skip: \" + skip;\n        }\n\n        queryParams = queryParams.replace(/,\\s*$/, \"\");\n        return {\"query\": \"{filterEdgeAndGetNeighborVertices(\" + queryParams + \"){id,type,label,properties, inV, inVLabel, outV, outVLabel}}\"};\n    }\n\n    rawQuery(queryString) {\n        return {\"query\": \"{rawQuery(gremlin:\" + JSON.stringify(queryString) + \"){id,type,label,properties, inV, inVLabel, outV, outVLabel}}\"};\n    }\n\n}\n\n","import {\n    DefaultNodeRadius,\n    DefaultNodeBorderColor,\n    DefaultNodeStrokeWidth,\n    DefaultNodeInShapeTextColor,\n    DefaultLabelVisibility,\n    DefaultNodeLabelColor,\n    DefaultNodeLabelPropertyKey,\n    DefaultLinkStrokeWidth,\n    DefaultLinkLabelPropertyKey,\n    DefaultLinkLabelColor\n} from \"../config\";\nimport {LightenDarkenColor} from \"../core/utils\";\n\nconst ColorHash = require('color-hash');\n\nlet colorHash = new ColorHash({hue: [{min: 120, max: 190}, {min: 120, max: 190}, {min: 120, max: 190}]});\n\nexport function getColorForString(label) {\n    return colorHash.hex(label); // '#8796c5'\n}\n\nexport const colorToNumber = (c) => {\n    return parseInt(c.slice(1), 16)\n}\n\n\nexport function renderPropertyData(key, value) {\n    // console.log(\"renderPropertyData\", typeof value, value instanceof Boolean, value,);\n    if (typeof value === \"boolean\") {\n        return value.toString();\n    } else if (value === null) {\n        return \"None\";\n    }\n    return value;\n}\n\nexport function getDefaultNodeOptions(label) {\n\n    return {\n        bgColor: getColorForString(label),\n        borderColor: DefaultNodeBorderColor,\n        bgImageUrl: null,\n        bgImagePropertyKey: null,\n        labelPropertyKey: DefaultNodeLabelPropertyKey,\n        tagHtml: null\n    }\n}\n\n// export function getDefaultLinkOptions(label) {\n//     return {\n//         bgColor: getColorForString(label),\n//         labelPropertyKey: DefaultNodeLabelPropertyKey,\n//     }\n// }\n\nexport function removeVertexMeta(data) {\n    let newData = [];\n    data.forEach((datum) => {\n        delete datum.meta;\n        delete datum.x;\n        delete datum.y;\n        delete datum.vx;\n        delete datum.vy;\n        delete datum.index;\n        newData.push(datum)\n    });\n    return newData\n}\n\nexport function removeEdgeMeta(data) {\n    console.log(\"removeEdgeMeta\")\n    let newData = [];\n    data.forEach((datum) => {\n        // delete datum.meta;\n        // delete datum.x;\n        // delete datum.y;\n        // delete datum.vx;\n        // delete datum.vy;\n        // delete datum.index;\n        if (typeof datum.source === \"object\") {\n            datum.source = datum.source.id;\n        }\n        if (typeof datum.target === \"object\") {\n            datum.target = datum.target.id;\n        }\n        newData.push(datum)\n    });\n    return newData\n}\n\nfunction getLabelOptionsOfElement(element, isNode) {\n    // nodeLabelOptions\n    if (!element.meta.labelOptions) {\n        element.meta.labelOptions = {}\n    }\n    if (typeof element.meta.labelOptions.showLabel === \"undefined\") {\n        element.meta.labelOptions.showLabel = DefaultLabelVisibility\n    }\n    let labelString = null;\n    if (element.meta.shapeOptions && element.meta.shapeOptions.labelPropertyKey) {\n        labelString = element.properties[element.meta.shapeOptions.labelPropertyKey];\n    }\n    if (!labelString && isNode === true) { // fallback to id as default label for nodes\n        labelString = element.id;\n    }\n\n    element.meta.labelOptions.labelText = labelString\n    if (!element.meta.labelOptions.labelColor) {\n        element.meta.labelOptions.labelColor = isNode ? colorToNumber(DefaultNodeLabelColor) :\n            colorToNumber(DefaultLinkLabelColor);\n    }\n    return element;\n\n}\n\nexport function prepareLinksDataForCurves(links) {\n    /*\n    This method will set attributes on to the links that will\n    help us controls the curves of the links.\n     */\n\n    // const nodeLabels = Object.assign({}, JSON.parse(localStorage.getItem('nodeLabels')));\n\n    links.forEach(function (link) {\n\n        // find other links with same target+source or source+target\n        let same = links.filter(function (v) {\n            return ((v.source === link.source && v.target === link.target));\n        })\n        let sameAlt = links.filter(function (v) {\n            return ((v.source === link.target && v.target === link.source));\n        })\n\n        let sameAll = same.concat(sameAlt);\n        sameAll.forEach(function (s, i) {\n            s.sameIndex = (i + 1);\n            s.sameTotal = sameAll.length;\n            s.sameTotalHalf = (s.sameTotal / 2);\n            s.sameUneven = ((s.sameTotal % 2) !== 0);\n            s.sameMiddleLink = ((s.sameUneven === true) && (Math.ceil(s.sameTotalHalf) === s.sameIndex));\n            s.sameLowerHalf = (s.sameIndex <= s.sameTotalHalf);\n            s.sameArcDirection = s.sameLowerHalf ? 0 : 1;\n            s.sameIndexCorrected = s.sameLowerHalf ? s.sameIndex : (s.sameIndex - Math.ceil(s.sameTotalHalf));\n\n            // if (s.sameIndexCorrected === 2) {\n            //     s.sameArcDirection = 1;\n            // }\n            // if (s.sameIndexCorrected === 1) {\n            //     s.sameArcDirection = 0;\n            // }\n        });\n    });\n\n    links.sort(function (a, b) {\n        if (a.sameTotal < b.sameTotal) return -1;\n        if (a.sameTotal > b.sameTotal) return 1;\n        return 0;\n    });\n\n    if (links.length > 0) {\n        const maxSame = links[links.length - 1].sameTotal;\n\n        links.forEach(function (link, i) {\n            links[i].maxSameHalf = Math.round(maxSame / 3);\n        });\n\n    }\n\n\n    return links.map(link => {\n        let obj = link;\n        obj.source = link.source;\n        obj.target = link.target;\n        return obj;\n    })\n}\n\nexport function prepareLinkDataWithOptions(links, options) {\n\n    if (typeof options === \"undefined\") {\n        options = {};\n    } else if (typeof options === \"string\") {\n        options = JSON.parse(options);\n    }\n\n    links.forEach((link) => {\n        const metaFromStorage = getDefaultMeta(link.label, options);\n\n        link.meta = {};\n\n        if (!link.meta.shapeOptions) {\n            link.meta.shapeOptions = {}\n        }\n\n        link = getLabelOptionsOfElement(link, false);\n\n        if (!link.meta.shapeOptions.strokeWidth) {\n            link.meta.shapeOptions.strokeWidth = DefaultLinkStrokeWidth\n        }\n        if (!link.meta.shapeOptions.strokeColor) {\n            // link.meta.shapeOptions.strokeColor = metaFromStorage.borderColor ?\n            //     metaFromStorage.borderColor : getColorForString(link.label);\n            link.meta.shapeOptions.strokeColor = colorToNumber(getColorForString(link.label));\n        }\n        if (!link.meta.shapeOptions.strokeColorHex) {\n            // link.meta.shapeOptions.strokeColor = metaFromStorage.borderColor ?\n            //     metaFromStorage.borderColor : getColorForString(link.label);\n            link.meta.shapeOptions.strokeColorHex = getColorForString(link.label);\n        }\n        // if (!node.meta.shapeOptions.fillColor) {\n        //     node.meta.shapeOptions.fillColor = metaFromStorage.bgColor || getColorForString(node.label)\n        // }\n        if (!link.meta.shapeOptions.labelColor) {\n            link.meta.shapeOptions.labelColor = DefaultNodeInShapeTextColor\n        }\n        if (!link.meta.shapeOptions.labelPropertyKey) {\n            link.meta.shapeOptions.labelPropertyKey = metaFromStorage.labelPropertyKey || DefaultLinkLabelPropertyKey;\n        }\n    });\n\n    return links;\n}\n\n\nfunction getDefaultMeta(label, options) {\n    let metaFromStorage = {}\n    try {\n        metaFromStorage = options[label];\n    } catch (e) {\n        metaFromStorage = {}\n    }\n    if (!metaFromStorage) {\n        metaFromStorage = {}\n    }\n    return metaFromStorage\n}\n\nexport function prepareNodesDataWithOptions(nodes, options) {\n    /*\n        options = {\n            \"Planet\": {\n                \"bgImagePropertyKey\": \"image\",\n                \"nodeShape\": \"circle\",\n                \"shapeOptions\": {\n                    \"radius\": \"20\",\n                    \"strokeWidth\": \"2px\",\n                    \"strokeColor\": \"#333333\",\n                    \"fillColor\": \"#999999\"\n                }\n            },\n             \"Satellite\": {\n                \"bgImageUrl\": \"https://pngimg.com/uploads/moon/moon_PNG19.png\",\n                \"nodeShape\": \"circle\",\n                \"shapeOptions\": {\n                    \"radius\": \"20\",\n                    \"strokeWidth\": \"2px\",\n                    \"strokeColor\": \"#333333\",\n                    \"fillColor\": \"#999999\"\n                }\n            }\n        }\n\n     */\n    if (typeof options === \"undefined\") {\n        options = {};\n    } else if (typeof options === \"string\") {\n        options = JSON.parse(options);\n    }\n\n    let nodesCleaned = [];\n    nodes.forEach(function (nodeData) {\n        // let node = Object.assign({}, nodeData)\n        let node = nodeData;\n        // check if options data has node.label meta data or set defaults.\n\n        const metaFromStorage = getDefaultMeta(node.label, options);\n        node.meta = {\"bgImageUrl\": null, \"nodeShape\": \"circle\"};\n        node.meta.bgImagePropertyKey = metaFromStorage.bgImagePropertyKey;\n        if (!node.meta.shapeOptions) {\n            node.meta.shapeOptions = {}\n        }\n        // shapeOptions\n        if (!node.meta.shapeOptions.radius) {\n            node.meta.shapeOptions.radius = DefaultNodeRadius;\n        }\n        if (!node.meta.shapeOptions.radiusBuffered) {\n            node.meta.shapeOptions.radiusBuffered = DefaultNodeRadius + 5;\n        }\n        if (!node.meta.shapeOptions.strokeWidth) {\n            node.meta.shapeOptions.strokeWidth = DefaultNodeStrokeWidth;\n        }\n        if (!node.meta.shapeOptions.strokeColor) {\n            node.meta.shapeOptions.strokeColor = metaFromStorage.borderColor\n                ? colorToNumber(metaFromStorage.borderColor)\n                : colorToNumber(LightenDarkenColor(getColorForString(node.label), -40))\n        }\n        if (!node.meta.shapeOptions.fillColor) {\n            node.meta.shapeOptions.fillColor = metaFromStorage.bgColor\n                ? colorToNumber(metaFromStorage.bgColor)\n                : colorToNumber(getColorForString(node.label))\n        }\n        if (!node.meta.shapeOptions.fillColorHex) {\n            node.meta.shapeOptions.fillColorHex = metaFromStorage.bgColor\n                ? metaFromStorage.bgColor\n                : getColorForString(node.label)\n        }\n        if (!node.meta.shapeOptions.labelColor) {\n            node.meta.shapeOptions.labelColor = DefaultNodeInShapeTextColor\n        }\n        if (!node.meta.shapeOptions.labelPropertyKey) {\n            node.meta.shapeOptions.labelPropertyKey = metaFromStorage.labelPropertyKey || DefaultNodeLabelPropertyKey;\n        }\n        // if (node.meta.shapeOptions.inShapeHTMLFn) {\n        //     node.meta.shapeOptions.textPropertyKey = node.meta.shapeOptions.inShapeHTMLFn(node)\n        // } else {\n        //     node.meta.shapeOptions.inShapeHTML = DefaultInShapeHTMLFn(node);\n        // }\n\n\n        node = getLabelOptionsOfElement(node, true);\n\n        // tagOptions\n        if (!node.meta.tagOptions) {\n            node.meta.tagOptions = {}\n        }\n        if (metaFromStorage.tagHtml) {\n            node.meta.tagOptions.tagHtml = metaFromStorage.tagHtml\n        }\n        // nodeImageOptions\n        if (node.meta.bgImagePropertyKey) {\n            node.meta.bgImageUrl = node.properties[node.meta.bgImagePropertyKey];\n        }\n        if (!node.meta.bgImageUrl) {\n            node.meta.bgImageUrl = metaFromStorage.bgImageUrl;\n        }\n        // nodesCleaned.push(JSON.parse(JSON.stringify(node)))\n        if (node.target) {\n            delete node.target\n        }\n        if (node.source) {\n            delete node.source\n        }\n        nodesCleaned.push(node)\n    });\n\n    return nodesCleaned;\n}\n","import {convertMapKeysToArray} from \"./utils\";\nimport {\n    prepareLinkDataWithOptions,\n    prepareLinksDataForCurves,\n    prepareNodesDataWithOptions\n} from \"../canvas/canvas-utils\";\n\nexport default class InMemoryDataStore {\n    /*\n    in-memory data storage to save the responses data\n\n    TODO - tons of performance issues to fix;\n     review neighbor and not neighbor calc methods to start with\n\n\n     */\n\n    focusedNodes = [];\n\n    // Data of raw  data from the response objects; for storage and retrieval purpose\n    #vertices = new Map()\n    #edges = new Map()\n\n    // For moving and controlling highlighting of the links\n    // TODO - move this to graphics store\n    linkGraphicsArray = [];\n    linkLabelGraphicsArray = [];\n\n    verticesStats = new Map();\n    edgesStats = new Map();\n\n    // Data of the 2D arrangement of vertices and links\n    verticesToRender = [];\n    edgesToRender = [];\n\n    verticesAlreadyRendered = [];\n    edgesAlreadyRendered = [];\n\n\n    vertexOptions = new Map() // to save vertex meta options\n    edgeOptions = new Map() // to save edge meta options.\n\n\n    edgeUniqueStringDelimiter = \"=====\"; // used to create unique links info for the schema\n    schema = new Map() // {'sourceLabel': ['sourceLabel--targetLabel--edgeLabel],\n    // 'targetLabel': ['sourceLabel--targetLabel--edgeLabel],\n    // 'otherLabel': [] // no links)\n    //{ \"vertexId\": {\"neighbourLinks\": [ \"linkid-1\", \"linkid-2\"], \"neighbourNodes\": [\"nodeid-1\" ]}\n    // neighbourVerticesAndLinksMap = new Map();\n\n    constructor() {\n        this.resetData()\n    }\n\n\n    getUniqueFocusedNodes() {\n        const focusedNodes = Object.assign([], this.focusedNodes);\n        let uniqueMap = {};\n        focusedNodes.forEach((node) => {\n            uniqueMap[node.id] = node;\n        });\n        const uniqueNodes = Object.values(uniqueMap);\n        console.log(\"=========uniqueNodes==>>\", uniqueNodes)\n        return uniqueNodes;\n    }\n\n    checkIfVertexExist(vertexId) {\n        return !!this.#vertices.get(vertexId);\n    }\n\n    checkIfEdgeExist(vertexId) {\n        return !!this.#edges.get(vertexId)\n    }\n\n    addVertexToDataSet(vertex) {\n        this.#vertices.set(vertex.id, vertex);\n    }\n\n    addEdgeToDataSet(edge) {\n        this.#edges.set(edge.id, edge);\n    }\n\n    // computeNeighbors() {\n    //\n    //\n    //     // this.neighbourVerticesAndLinksMap\n    // }\n    //\n    // getNodeByNodeLabelTextOrId(labelTextOrId) {\n    //\n    //     for (const [nodeId, nodeData] of this.#vertices.entries()) {\n    //         // console.log(\"=====key\", key);\n    //         if (labelTextOrId === nodeId) {\n    //             return nodeData;\n    //         }\n    //         if (nodeData.meta.labelOptions.labelText === labelTextOrId) {\n    //             return nodeData;\n    //         }\n    //         // data.push(value);\n    //     }\n    //\n    //     return\n    // }\n\n    searchNodeByNodeLabelTextOrId(labelTextOrId) {\n        console.log(\"searchNodeByNodeLabelTextOrId\", labelTextOrId, Number.isInteger(labelTextOrId))\n        let results = [];\n        const intLabelTextOrIdInt = parseInt(labelTextOrId);\n        const strLabelTextOrIdInt = labelTextOrId.toString();\n        for (const [nodeId, nodeData] of this.#vertices.entries()) {\n            // console.log(\"=====key\", key);\n            if (strLabelTextOrIdInt === nodeId || intLabelTextOrIdInt === nodeId) {\n                // covers both text and string version of the word\n                results.push(nodeData);\n            } else if (nodeData.meta.labelOptions.labelText) {\n                // const intVersionOfTextOrId = parseInt(nodeData.meta.labelOptions.labelText);\n                const strVersionOfTextOrId = nodeData.meta.labelOptions.labelText.toString().toLowerCase();\n                if (strVersionOfTextOrId.includes(strLabelTextOrIdInt)) {\n                    results.push(nodeData);\n                }\n                // .includes(labelTextOrId)\n            }\n            // data.push(value);\n        }\n\n        return results;\n    }\n\n    computeDataDistributionStats() {\n        this.verticesStats = new Map(); // resetting the stats\n        this.edgesStats = new Map(); // resetting the stats\n\n        convertMapKeysToArray(this.#vertices).forEach((vertex) => {\n            const existingLabelStats = this.verticesStats.get(vertex.label);\n            if (this.verticesStats.get(vertex.label)) {\n                this.verticesStats.set(vertex.label, existingLabelStats + 1)\n            } else {\n                this.verticesStats.set(vertex.label, 1)\n            }\n        })\n\n        convertMapKeysToArray(this.#edges).forEach((edge) => {\n            const existingLabelStats = this.edgesStats.get(edge.label);\n            if (this.edgesStats.get(edge.label)) {\n                this.edgesStats.set(edge.label, existingLabelStats + 1)\n            } else {\n                this.edgesStats.set(edge.label, 1)\n            }\n        })\n    }\n\n\n    addVertexToSchema(vertex) {\n\n        if (!this.schema.get(vertex.label)) {\n            this.schema.set(vertex.label, []);\n        }\n    }\n\n    checkIfEdgeExistInSchema(vertexEdges, edgeUniqueStr) {\n        // const nodeSchema = this.schema.get(vertexLabel);\n        return vertexEdges.includes(edgeUniqueStr);\n    }\n\n    generateEdgeUniqueString(edge) {\n        // sourceVLabel + delimiter + targetVLabel + delimiter + edgeLabel\n        return edge.outVLabel + this.edgeUniqueStringDelimiter + edge.inVLabel + this.edgeUniqueStringDelimiter + edge.label;\n    }\n\n    addEdgeToSchema(edge) {\n        const edgeUniqueStr = this.generateEdgeUniqueString(edge);\n        // inV label data\n        const inVEdges = this.schema.get(edge.inVLabel);\n        const outVEdges = this.schema.get(edge.outVLabel);\n        if (inVEdges && !this.checkIfEdgeExistInSchema(inVEdges, edgeUniqueStr)) {\n            inVEdges.push(edgeUniqueStr);\n            this.schema.set(edge.inVLabel, inVEdges);\n        }\n        if (outVEdges && !this.checkIfEdgeExistInSchema(outVEdges, edgeUniqueStr)) {\n            outVEdges.push(edgeUniqueStr);\n            this.schema.set(edge.outVLabel, outVEdges);\n        }\n    }\n\n    getVertexSchema(vertexLabel) {\n        const vertexEdges = this.schema.get(vertexLabel);\n        let inE = [];\n        let outE = [];\n\n        vertexEdges.map((vertexEdge) => {\n            const [sourceLabel, targetLabel, edgeLabel] = vertexEdge.split(this.edgeUniqueStringDelimiter);\n            if (sourceLabel === vertexLabel) {\n                if (!outE.includes(sourceLabel)) {\n                    outE.push(edgeLabel)\n                }\n            } else if (targetLabel === vertexLabel) {\n                if (!inE.includes(targetLabel)) {\n                    inE.push(edgeLabel)\n                }\n            }\n        });\n        return {inE, outE}\n    }\n\n    addToVertexOptions(vertex) {\n        if (!this.vertexOptions.get(vertex.label)) {\n            this.vertexOptions.set(vertex.label, vertex.meta);\n        }\n    }\n\n    getVertexOptions(vertexLabel) {\n        return this.vertexOptions.get(vertexLabel);\n    }\n\n    getEdgeOptions(edgeLabel) {\n        return this.edgeOptions.get(edgeLabel);\n    }\n\n    addToEdgeOptions(edge) {\n        if (!this.edgeOptions.get(edge.label)) {\n            this.edgeOptions.set(edge.label, edge.meta);\n        }\n    }\n\n    addData(newVertices, newEdges, onDataUpdated) {\n        // make sure the newly added edges data has respective nodes data.\n        let _this = this;\n        for (let vertexI in newVertices) {\n            let vertex = newVertices[vertexI];\n            let doesNodeExist = _this.checkIfVertexExist(vertex.id);\n            if (!doesNodeExist) {\n                _this.addVertexToDataSet(vertex);\n            }\n            this.addVertexToSchema(vertex);\n            this.addToVertexOptions(vertex);\n        }\n        for (let edgeI in newEdges) {\n            let edge = newEdges[edgeI];\n            let doesEdgeExist = _this.checkIfEdgeExist(edge.id);\n            if (!doesEdgeExist) {\n                this.addEdgeToDataSet(edge)\n            }\n            let checkIfInVExistInStore = _this.checkIfVertexExist(edge.inV);\n            // console.log(\"checkIfInVExistInStore\", checkIfInVExistInStore, edge.inV);\n            if (!checkIfInVExistInStore) {\n                this.addVertexToDataSet({id: edge.inV, label: edge.inVLabel, type: \"g:Vertex\", properties: {}});\n            }\n            let checkIfOutVExistInStore = _this.checkIfVertexExist(edge.outV);\n\n            if (!checkIfOutVExistInStore) {\n                this.addVertexToDataSet({id: edge.outV, label: edge.outVLabel, type: \"g:Vertex\", properties: {}});\n            }\n            this.addEdgeToSchema(edge);\n            this.addToEdgeOptions(edge);\n        }\n        // this will compute the stats of each nodes and links\n        this.computeDataDistributionStats();\n        if (onDataUpdated) {\n            onDataUpdated();\n        }\n    }\n\n    getAllData() {\n        return {vertices: this.#vertices, edges: this.#edges}\n    }\n\n    setDataToRender(verticesToRender, edgesToRender) {\n        console.log(\"=====setDataToRender triggered\", verticesToRender.length, edgesToRender.length);\n        this.verticesToRender = verticesToRender;\n        this.edgesToRender = edgesToRender;\n    }\n\n    getDataToRender() {\n        const keyValueArray = this.verticesToRender.map(entry => [entry['id'], entry]);\n        const map = new Map(keyValueArray);\n        const verticesToRender = Array.from(map.values());\n\n        const keyValueArrayEdge = this.edgesToRender.map(entry => [entry['id'], entry]);\n        const mapEdge = new Map(keyValueArrayEdge);\n        const edgesToRender = Array.from(mapEdge.values());\n        return {verticesToRender: verticesToRender, edgesToRender: edgesToRender};\n    }\n\n    checkIfNodeIsInVorOutV(link, nodeData) {\n        if (link.inV === nodeData.id) {\n            return \"inV\";\n        } else if (link.outV === nodeData.id) {\n            return \"outV\";\n        }\n    }\n\n\n    getNodeBasicInfo(nodeData) {\n        return {\n            id: nodeData.id,\n            labelText: nodeData.meta.labelOptions.labelText,\n            label: nodeData.label,\n            fillColorHex: nodeData.meta.shapeOptions.fillColorHex\n        }\n    }\n\n    groupLinksToInEAndOutEByLabel(links, nodeData) {\n        let inVGroups = {};\n        let outVGroups = {};\n        let _this = this;\n        links.forEach(function (link) {\n            // TODO - review this for performance.\n\n            const linkType = _this.checkIfNodeIsInVorOutV(link, nodeData);\n            if (linkType === \"inV\") {\n                // so this node is an inV, so lets gather the info or outV for this, which is source (from d3)\n                if (link.label in inVGroups) {\n                    inVGroups[link.label].vertices.push(_this.getNodeBasicInfo(link.source))\n                } else {\n                    inVGroups[link.label] = {\n                        // edgeLabel: \"InE Label 1\",\n                        edgeFillColorHex: link.meta.shapeOptions.strokeColorHex,\n                        vertices: [_this.getNodeBasicInfo(link.source)]\n                    }\n\n                }\n            } else if (linkType === \"outV\") {\n                if (link.label in outVGroups) {\n                    outVGroups[link.label].vertices.push(_this.getNodeBasicInfo(link.target))\n                } else {\n                    outVGroups[link.label] = {\n                        // edgeLabel: \"InE Label 1\",\n                        edgeFillColorHex: link.meta.shapeOptions.strokeColorHex,\n                        vertices: [_this.getNodeBasicInfo(link.target)]\n                    }\n                }\n            }\n\n        });\n        return {inVGroups, outVGroups};\n    }\n\n    determineAllDataToRender() {\n        console.log(\"=====getDataToRender triggered\");\n        const verticesData = this.getAllRawVerticesList();\n        const edgesData = this.getAllRawEdgesList();\n        const _this = this;\n\n\n        verticesData.map((vertex) => {\n            // TODO - fix performance ASAP.\n            const neighborData = this.getNeighborNodesAndLinks([vertex])\n\n            // const links = neighborData.links;\n            const {inVGroups, outVGroups} = _this.groupLinksToInEAndOutEByLabel(neighborData.links, vertex)\n\n            // group links by label\n            vertex.inData = inVGroups;\n            vertex.outData = outVGroups;\n        });\n\n        // edgesData.map((edge) => {\n        //\n        // });\n\n        const {newVerticesToRender, newEdgesToRender} = {\n            newVerticesToRender: verticesData,\n            newEdgesToRender: edgesData\n        }\n\n\n        console.log(\"======newVerticesToRender, newEdgesToRender\", newVerticesToRender, newEdgesToRender)\n\n        return {\n            verticesToRender: newVerticesToRender,\n            edgesToRender: newEdgesToRender\n        }\n    }\n\n    getVerticesCount() {\n        return this.#vertices.size;\n    }\n\n    checkIfShouldBeConvertedToGraphics() {\n\n    }\n\n    resetData() {\n        this.#vertices = new Map()\n        this.#edges = new Map()\n        this.linkGraphicsArray = [];\n        this.linkLabelGraphicsArray = [];\n    }\n\n    prepareNodes(vertices) {\n        const nodeOptions = Object.assign({}, JSON.parse(localStorage.getItem('nodeLabels')));\n        // const cleanedVertices = removeVertexMeta(convertMapKeysToArray(this.#vertices));\n        return prepareNodesDataWithOptions(vertices, nodeOptions);\n\n    }\n\n    getAllRawVerticesList() {\n        return this.prepareNodes(convertMapKeysToArray(this.#vertices))\n    }\n\n    getAllRawEdgesList() {\n        const nodeOptions = Object.assign({}, JSON.parse(localStorage.getItem('nodeLabels')));\n        return prepareLinkDataWithOptions(prepareLinksDataForCurves(convertMapKeysToArray(this.#edges)), nodeOptions);\n    }\n\n    getAlreadyRenderedData() {\n        return {\n            verticesAlreadyRendered: this.verticesAlreadyRendered,\n            edgesAlreadyRendered: this.edgesAlreadyRendered\n        }\n    }\n\n    setAlreadyRenderedData(verticesAlreadyRendered, edgesAlreadyRendered) {\n        this.verticesAlreadyRendered = verticesAlreadyRendered;\n        this.edgesAlreadyRendered = edgesAlreadyRendered;\n    }\n\n    getNeighborNodesAndLinksOfNode(nodeId) {\n        let neighborNodes = [];\n        let neighborLinks = [];\n        // get the links attached to nodeId\n        this.getAllRawEdgesList().forEach((link) => {\n            if (link.target.id === nodeId) {\n                neighborLinks.push(link);\n                neighborNodes.push(link.source);\n            } else if (link.source.id === nodeId) {\n                neighborLinks.push(link);\n                neighborNodes.push(link.target);\n            }\n        })\n\n\n        return {\n            nodes: neighborNodes,\n            links: neighborLinks\n        }\n    }\n\n\n    getNeighborNodesAndLinks(nodes) {\n        let neighborNodes = [];\n        let neighborLinks = [];\n        // get the links attached to nodeId\n        this.getAllRawEdgesList().forEach((link) => {\n            nodes.forEach((nodeData) => {\n                if (link.target.id === nodeData.id) {\n                    neighborLinks.push(link);\n                    neighborNodes.push(link.source);\n                } else if (link.source.id === nodeData.id) {\n                    neighborLinks.push(link);\n                    neighborNodes.push(link.target);\n                }\n            })\n        })\n\n\n        return {\n            nodes: neighborNodes,\n            links: neighborLinks\n        }\n    }\n\n    getNotNeighborLinks(selectedNodes) {\n        let notNeighborLinks = [];\n        let notNeighborNodes = [];\n        const {nodes, links} = this.getNeighborNodesAndLinks(selectedNodes);\n\n        nodes.push(...selectedNodes);\n        this.getAllRawVerticesList().forEach((node) => {\n            if (!nodes.includes(node)) {\n                notNeighborNodes.push(node);\n            }\n        })\n        this.getAllRawEdgesList().forEach((link) => {\n            if (!links.includes(link)) {\n                notNeighborLinks.push(link);\n            }\n        })\n        console.log(\"=====notNeighborNodes\", notNeighborNodes, notNeighborLinks)\n        return {notNeighborLinks, notNeighborNodes};\n    }\n\n\n    removeAllNodes2Focus() {\n        this.focusedNodes = [];\n    }\n\n    checkIfVertexExistInFocused(nodeData) {\n        this.focusedNodes.forEach((node) => {\n            console.log(\"======checkIfVertexExistInFocused node, nodeData\", node.id, nodeData.id);\n            if (nodeData.id === node.id) {\n                return true;\n            }\n        })\n        return false;\n    }\n\n    addNode2Focus(nodeData) {\n        if (this.checkIfVertexExistInFocused(nodeData) === false) {\n            this.focusedNodes.push(nodeData);\n        }\n    }\n\n    removeNodeFromFocus(nodeId) {\n        let focusedNodes = this.getUniqueFocusedNodes();\n        let indexId = null\n\n        focusedNodes.forEach((focusedNode, index) => {\n            if (focusedNode.id === nodeId) {\n                indexId = index\n                return index;\n            }\n        });\n        focusedNodes.splice(indexId, 1);\n\n        this.focusedNodes = focusedNodes;\n    }\n\n    getEdgesCount() {\n        return this.#edges.size;\n    }\n\n    getEdge(edgeId) {\n        return this.#edges.get(edgeId);\n    }\n\n    getVertex(nodeId) {\n        return this.#vertices.get(nodeId);\n    }\n}\n","import React from 'react';\nimport BaseComponent from \"./base-component\";\nimport {\n    GREMLIN_SERVER_URL, historyLocalStorageKey,\n    MAX_HISTORY_COUNT_TO_REMEMBER, GRAPH_ENGINE_NAME\n} from \"../config\";\nimport {\n    getDataFromLocalStorage, redirectToConnectIfNeeded, setDataToLocalStorage,\n} from \"./utils\";\nimport LoadSpinner from \"../ui-components/spinner/spinner\";\nimport PropTypes from \"prop-types\";\nimport DefaultHTTPConnector from \"../connectors/http\";\nimport DefaultWebSocketConnector from \"../connectors/websocket\";\nimport InvanaEngineHTTPConnector from \"../connectors/invana-engine\";\nimport GremlinQueryManager from \"../query-builder/gremlin\";\nimport GraphSONDeSerializer from \"../serializers/graphson-v3\";\nimport InvanaEngineDeSerializer from \"../serializers/invana-engine\";\nimport InvanaEngineQueryManager from \"../query-builder/invana-engine\";\nimport InMemoryDataStore from \"./data-store\";\n\nexport default class RemoteGraphComponent extends BaseComponent {\n    /*\n\nRemoteGraphComponent shall have abilities to connect to remote\ngraph-engines and render data.\n\n    Usage\n\nimport React from \"react\";\nimport GremlinBasedViewBase from \"core/gremlin-component\";\n\nexport default class GremlinQueryBox extends RemoteGraphComponent {\n\n// use makeQuery(\"g.V().toList()\") to query\n// use processResponse(responses) method to listen to the responses.\n\n    componentDidMount() {\n        super.componentDidMount();\n        const _this = this;\n\n        setTimeout(function () {\n            _this.makeQuery(\"g.V().limit(5).toList()\", false);\n        }, 1000)\n    }\n\n    processResponse(responses) {\n        console.log(\"Response is \", responses);\n    }\n\n    flushResponsesData(){\n        // this will delete responses,\n    }\n\n\n    // to access responses use this.connector.getLastResponse or this.connector.getLatestResponse\n\n\n\n}\n\n\n     */\n    // timer = null;\n    // timer2 = null;\n    // queryElapsedTimerId = null;\n    // reconnectingTimerId = null;\n    queryStartedAt = null;\n    queryEndedAt = null;\n    ws = null;\n    // responsesList = null;\n    static defaultProps = {\n        gremlinUrl: GREMLIN_SERVER_URL,\n        graphEngine: GRAPH_ENGINE_NAME,\n        parentGraphComponent: null\n        // reRenderCanvas: () => console.error(\"reRenderCanvas prop not added for VertexOptions\")\n    }\n\n\n    static propTypes = {\n        gremlinUrl: PropTypes.string,\n        graphEngine: PropTypes.string,\n        parentGraphComponent: PropTypes.object\n    }\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state,\n            isConnected2Gremlin: null,\n            query: null,\n            isStreaming: null,\n\n            // responses: [],\n            // vertices: [],\n            // edges: []\n        }\n\n        if (this.checkIfGremlinUrlIsValid()) {\n            this.connector = this.connect();\n        }\n        if (this.checkIfGraphEngineIsValid() && this.props.graphEngine === \"invana-engine\") {\n            // this.requestBuilder = new InvanaEngineQueryManager();\n            this.responseSerializer = new InvanaEngineDeSerializer();\n        } else {\n            // this.requestBuilder = new GremlinQueryManager();\n            this.responseSerializer = new GraphSONDeSerializer();\n        }\n        this.dataStore = new InMemoryDataStore();\n\n    }\n\n    checkIfGremlinUrlIsValid() {\n        return !!this.props.gremlinUrl;\n    }\n\n    checkIfGraphEngineIsValid() {\n        return !!this.props.graphEngine;\n    }\n\n    connect() {\n        const protocol = this.getProtocol();\n        let connectorCls = null;\n\n        if (this.props.graphEngine === \"invana-engine\") {\n            connectorCls = InvanaEngineHTTPConnector;\n        } else {\n            if (protocol === \"ws\") {\n                connectorCls = DefaultWebSocketConnector\n            } else {\n                connectorCls = DefaultHTTPConnector;\n            }\n        }\n        let requestBuilder = new GremlinQueryManager()\n        if (this.checkIfGraphEngineIsValid() && this.props.graphEngine === \"invana-engine\") {\n            requestBuilder = new InvanaEngineQueryManager();\n        }\n\n        return new connectorCls(\n            this.props.gremlinUrl,\n            this.responseEventsCallback.bind(this),\n            this.onResponseCallback.bind(this),\n            requestBuilder\n        );\n    }\n\n\n    getProtocol() {\n        if (this.props.gremlinUrl) {\n            const _ = new URL(this.props.gremlinUrl).protocol;\n            return _.includes(\"ws\") ? \"ws\" : \"http\";\n        } else {\n            return null;\n        }\n    }\n\n\n    setIsConnected2Gremlin(status) {\n        // this.props.eventHandler({isConnected2Gremlin: status});\n        console.log(\"setIsConnected2Gremlin\", status)\n        this.setState({isConnected2Gremlin: status});\n    }\n\n\n    componentDidMount() {\n        console.log(\"gremlin-component componentDidMount\")\n        let shallConnect = redirectToConnectIfNeeded(this.props.gremlinUrl);\n        if (shallConnect) {\n            const protocol = this.getProtocol();\n            console.log(\"We will be using \" + protocol + \" protocol\");\n            // DEPRECATED - not using ws for now.\n            if (protocol === \"ws\") {\n                try {\n                    this.connector.reconnectWithWS()\n                } catch (e) {\n                    console.error(\"Failed to connect to websocket\", e);\n                    window.location.href = \"/connect?error=Failed to connect. \" +\n                        \"WebSocket connections are not supported at the moment.\"\n                }\n            } else {\n                console.log(\"protocol will be \" + protocol);\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        console.log(\"gremlin-component componentWillUnmount triggered\");\n        // clearInterval(this.queryElapsedTimerId);\n        // clearInterval(this.reconnectingTimerId);\n        // super.componentWillUnmount();\n    }\n\n\n    flushCanvas() {\n        this.setState({\n            // responses: [],\n            // vertices: [],\n            // edges: [],\n            shallReRenderD3Canvas: true,\n            selectedElementData: null,\n            middleBottomContentName: null\n        })\n        this.dataStore.resetData();\n        this.connector.flushResponses();\n    }\n\n    setIsStreaming(status) {\n        this.setState({isStreaming: status});\n    }\n\n    setstatusCode(statusCode) {\n        this.setState({\"statusCode\": statusCode});\n    }\n\n    eventTranslator(eventName, eventValue) {\n        console.log(\"===eventName\", eventName, eventValue);\n\n        if (eventName === \"statusMessage\") {\n            this.setStatusMessage(eventValue);\n        } else if (eventName === \"statusCode\") {\n            this.setstatusCode(eventValue);\n        } else if (eventName === \"isStreaming\") {\n            this.setIsStreaming(eventValue);\n        } else if (eventName === \"errorMessage\") {\n            this.setErrorMessage(eventValue);\n        } else if (eventName === \"isConnected\") {\n            this.setIsConnected2Gremlin(eventValue);\n        } else {\n            this.setState({eventName: eventValue});\n        }\n    }\n\n\n    responseEventsCallback(event) {\n        console.log(\"received event\", event);\n        for (const [key, value] of Object.entries(event)) {\n            this.eventTranslator(key, value)\n        }\n    }\n\n    //\n    // processResponse = (responses) => console.error(\"processResponse not implemented. This functions \" +\n    //     \"will get the responses from gremlin server. Use this to access the query response data.\");\n\n    onResponseCallback(response) {\n        this.queryEndedAt = new Date();\n        this.resetLoader(); // updates the status of the ui\n        this.processResponse(response);\n\n    }\n\n\n    setErrorMessage(message) {\n        if (message) {\n            this.setState({\n                errorMessage: message,\n                bottomContentName: \"error-console\"\n            })\n        } else {\n            this.setState({\n                errorMessage: null,\n                bottomContentName: null\n            })\n        }\n    }\n\n    addQueryToState(query) {\n        console.log(\"======addQueryToState\", query);\n        this.setState({\n            query: query\n        })\n    }\n\n    setQueryToUrl(query) {\n        console.log(\"===setQueryToUrl\", query);\n        // let u = new URL(window.location.href);\n        // let searchParams = new URLSearchParams(window.location.search);\n        // if (query && query !== \"null\") {\n        //     searchParams.set(\"query\", query);\n        //     window.history.pushState({}, null, u.origin + u.pathname + \"?\" + searchParams.toString());\n        // }\n    }\n\n    addQueryToHistory(query, source) {\n        //\n        let existingHistory = getDataFromLocalStorage(historyLocalStorageKey, true) || [];\n\n        existingHistory = existingHistory.slice(0, MAX_HISTORY_COUNT_TO_REMEMBER)\n        existingHistory.unshift({\n            \"query\": query,\n            \"source\": source,\n            \"dt\": new Date()\n        })\n        setDataToLocalStorage(historyLocalStorageKey, existingHistory);\n    }\n\n\n    makeQuery(queryObj, queryOptions) {\n\n        /*\n            queryOptions.source = \"internal|console|canvas\"\n         */\n\n        // TODO - add logic to wait till server connects.\n\n        if (typeof queryOptions === \"undefined\") {\n            queryOptions = {}\n        }\n        if (typeof queryOptions.source === \"undefined\") {\n            queryOptions.source = \"internal\";\n        }\n        if (queryOptions.source) {\n            // this.setQueryToUrl(queryObj);\n            // this.addQueryToState(queryObj)\n            this.addQueryToHistory(queryObj, queryOptions.source)\n        } // remove this part from here soon.\n\n        this.setState({statusMessage: \"Querying...\"})\n        console.log(\"makeQuery :::  query\", JSON.stringify(queryObj));\n        if (queryObj) {\n            // this.startQueryTimer();\n            // this.startLoader(\"Connecting..\");\n            this.queryStartedAt = new Date();\n            this.queryEndedAt = new Date();\n            this.connector.query(queryObj);\n\n        }\n    }\n\n    render() {\n        return (\n            <LoadSpinner\n                loadingMessage={this.state.loadingMessage}\n                isConnected2Gremlin={this.state.isConnected2Gremlin}\n                loadingExtraText={this.state.loadingExtraText}\n                isLoading={this.state.isLoading}\n                showSignOut={true}\n                loadTimeCounter={this.state.loaderElapsedTimer}/>\n        )\n    }\n}\n","import RemoteGraphComponent from \"../core/graph-component\";\n// import GraphSONDeSerializer from \"../serializers/graphson-v3\";\n// import {managementVertexLabel} from \"../config\";\nimport {\n    managementVertexLabel\n} from \"../config\";\nimport {setElementColorOptionsToStorageUsingResponse} from \"../core/utils\";\n\nexport default class HomeView extends RemoteGraphComponent {\n\n\n    componentDidMount() {\n        super.componentDidMount();\n        let _this = this;\n        console.log(\"=_this.connector.requestBuilder.initQuery()\", _this.connector.requestBuilder.initQuery())\n        setTimeout(function () {\n            _this.makeQuery(_this.connector.requestBuilder.filterVertices(\n                managementVertexLabel, 50\n            ), {source: \"internal\"});\n        }, 200)\n    }\n\n    processResponse(response) {\n        let _this = this;\n        // let response = this.connector.getLastResponse();\n        console.log(\"processResponse received\", response);\n        // const statusCode = response.getStatusCode();\n        const transporterStatusCode = response.transporterStatusCode;\n        if (transporterStatusCode >= 200 && transporterStatusCode < 300) {\n            setElementColorOptionsToStorageUsingResponse(response);\n            window.location.href = \"/explorer\";\n        } else {\n            window.location.href = \"/connect?error=Failed to connect&transporterStatus=\" + transporterStatusCode;\n            _this.setState({\n                \"errorMessage\": JSON.stringify(response,),\n                \"showErrorMessage\": true,\n                \"statusMessage\": \"Query Successfully Responded.\" +\n                    \" But returned non 200 status[\" + response.status.code + \"]\"\n            })\n        }\n    }\n\n    render() {\n        return super.render();\n    }\n\n}\n","// import React from \"react\";\nimport RemoteGraphComponent from \"../core/graph-component\";\n\n\nclass RemoteGraphComponentViewBase extends RemoteGraphComponent {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state,\n            canvasType: \"graph\",\n            selectedElementData: null,\n            selectedLabel: null,\n            selectedLabelType: null,\n            query: null,\n            // vertices: [],\n            // edges: []\n        };\n    }\n\n    setSelectedElementData(selectedData) {\n        console.log(\"=====selectedData\", selectedData)\n        this.setState({\n            selectedElementData: selectedData,\n        })\n    }\n\n    // getUniqueItems(data) {\n    //     let uniqueItems = [];\n    //     data.forEach(function (item) {\n    //         const i = uniqueItems.findIndex(x => x.id === item.id);\n    //         if (i <= -1) {\n    //             uniqueItems.push(item);\n    //         }\n    //     });\n    //     return uniqueItems\n    //\n    // }\n\n    extendGraph(response) {\n        console.log(\"extending the graph data .\")\n        let _this = this;\n        const serializedData = _this.responseSerializer.process(response.getResponseData());\n        const {nodes, links} = _this.responseSerializer.separateVerticesAndEdges(serializedData);\n\n        console.log(\"extending graph=========\", Object.assign(nodes, {}), Object.assign(links, {}));\n        this.dataStore.addData(nodes, links,\n            //\n            () => {\n                _this.setState({\n                    shallReRenderD3Canvas: true\n                })\n            }\n        );\n\n\n        // responses.forEach(function (response) {\n        //     const serializedData = _this.responseSerializer.process(response.getResponseData());\n        //     const separatedData = _this.responseSerializer.separateVerticesAndEdges(serializedData);\n        //     overallNodes = overallNodes.concat(separatedData['nodes']);\n        //     overallLinks = overallLinks.concat(separatedData['links']);\n        // });\n        // const uniqueNodes = this.getUniqueItems(overallNodes);\n        // const uniqueLinks = this.getUniqueItems(overallLinks);\n        // this.setState({\n        //     vertices: uniqueNodes,\n        //     edges: uniqueLinks,\n        //     shallReRenderD3Canvas: true\n        // })\n    }\n\n    //\n    processResponse(response) {\n\n        console.log(\"processResponse\", response);\n        this.extendGraph(response);\n        this.reRenderCanvas();\n    }\n\n\n    reRenderCanvas() {\n        console.log(\"reRenderCanvas\",)\n        // this.setState({\n        //     vertices: this.dataStore.getAllRawVerticesList(),\n        //     edges: this.dataStore.getAllRawEdgesList()\n        // })\n        //\n        this.resetShallReRenderD3Canvas();\n        // this.render()\n        // this.forceUpdate();\n    }\n\n\n    setHideVertexOptions() {\n        this.setState({\n            selectedLabel: null,\n            selectedLabelType: null,\n            middleBottomContentName: null\n        })\n    }\n\n\n    setShowVertexOptions(label, labelType) {\n        console.log(\"setShowVertexOptions\", label, labelType)\n        this.setState({\n            selectedLabel: label,\n            selectedLabelType: labelType,\n            middleBottomContentName: \"vertex-options\"\n        })\n    }\n\n\n    componentDidMount() {\n        super.componentDidMount();\n    }\n\n\n    resetShallReRenderD3Canvas() {\n        console.log(\"======resetShallReRenderD3Canvas\", this.state.shallReRenderD3Canvas)\n        this.setState({\n            shallReRenderD3Canvas: false\n        })\n    }\n\n    setShallReRenderD3Canvas(status) {\n        this.setState({\n            shallReRenderD3Canvas: status\n        })\n    }\n\n\n}\n\nexport default class BaseView extends RemoteGraphComponentViewBase {\n\n\n    responseSessions = []; // responses from all the queries\n    requests = []\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state,\n            // layout var start\n            leftContentName: null,\n            rightContentName: null,\n            bottomContentName: null,\n            middleBottomContentName: null,\n            middleTopContentName: \"vertices-management\"\n            // layout var ends\n        };\n\n\n    }\n\n\n    setLeftContent(contentName) {\n        this.setState({leftContentName: contentName});\n    }\n\n    setRightContentName(contentName) {\n        this.setState({rightContentName: contentName});\n    }\n\n    setBottomContentName(contentName) {\n        this.setState({bottomContentName: contentName});\n    }\n\n    setMiddleBottomContentName(contentName) {\n        this.setState({middleBottomContentName: contentName});\n    }\n\n    setMiddleTopContentName(contentName) {\n        this.setState({middleTopContentName: contentName});\n    }\n\n\n}\n\n\n","import React from \"react\";\nimport \"./header.scss\";\nimport PropTypes from \"prop-types\";\n\nexport default class GEHeader extends React.Component {\n\n    static propTypes = {\n        children: PropTypes.any\n    }\n\n    render() {\n        return <div className={\"header\"}>{this.props.children}</div>;\n    }\n}\n","import React from \"react\";\nimport \"./list.scss\";\nimport PropTypes from \"prop-types\";\n\nexport default class GEList extends React.Component {\n    /*\n\n      type can be \"default\" or \"nav\"\n    */\n    static defaultProps = {\n        type: \"default\"\n    };\n\n    static propTypes = {\n        type: PropTypes.string,\n        children: PropTypes.any,\n        style: PropTypes.any\n    }\n\n    render() {\n        return (\n            <ul className={this.props.type + \"-list list\"} style={this.props.style}>{this.props.children}</ul>\n        );\n    }\n}\n\n\n","import React from \"react\";\nimport \"./indicator.scss\";\nimport PropTypes from \"prop-types\";\n\nexport default class Indicator extends React.Component {\n\n    static defaultProps = {\n        isConnected2Gremlin: null\n    }\n\n    static propTypes = {\n        isConnected2Gremlin: PropTypes.bool\n    }\n\n    render() {\n        return (\n            (this.props.isConnected2Gremlin === true)\n                ? <span className={\"connectionIndicator connected\"}></span>\n                : this.props.isConnected2Gremlin === false\n                ? <span className={\"connectionIndicator notConnected\"}></span>\n                : <span className={\"connectionIndicator unknownStatus\"}></span>\n        )\n    }\n}\n","import React from \"react\";\nimport \"./main.scss\";\nimport PropTypes from \"prop-types\";\n\nexport default class Main extends React.Component {\n    static propTypes = {\n        children: PropTypes.any\n    }\n\n    render() {\n        return <div className={\"main\"}>{this.props.children}</div>;\n    }\n}\n","import React from \"react\";\r\nimport \"./main-content.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class MainContent extends React.Component {\r\n    static propTypes = {\r\n        children: PropTypes.any\r\n    }\r\n\r\n    render() {\r\n        return <div className={\"main-content\"}>{this.props.children}</div>;\r\n    }\r\n}\r\n","import React from \"react\";\nimport \"./aside-left.scss\";\nimport PropTypes from \"prop-types\"\n\nexport default class AsideLeft extends React.Component {\n    static defaultProps = {\n        extraClass: \"\"\n    }\n\n    static propTypes = {\n        extraClass: PropTypes.string,\n        children: PropTypes.any\n    }\n\n    render() {\n        return (\n            <div className={\"aside-left \" + this.props.extraClass}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport \"./panel.scss\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faWindowClose,\n    faWindowRestore\n} from \"@fortawesome/free-solid-svg-icons\";\nimport GEList from \"../lists/list\";\nimport PropTypes from \"prop-types\";\n\nexport default class GEPanel extends React.Component {\n    static defaultProps = {\n        title: null,\n        onClickToggle: () => console.error(\"onClickToggle prop not added to GUIPanel\"),\n        onClickClose: () => console.error(\"onCickClose prop not added to GUIPanel\"),\n        showCloseBtn: true,\n        showToggleBtn: true,\n        headerStyle: null,\n        bodyStyle: null\n    };\n\n    static propTypes = {\n        title: PropTypes.string,\n        showToggleBtn: PropTypes.bool,\n        showCloseBtn: PropTypes.bool,\n        onClickClose: PropTypes.func,\n        onClickToggle: PropTypes.func,\n        children: PropTypes.any,\n        headerStyle: PropTypes.object,\n        bodyStyle: PropTypes.object\n    }\n\n    render() {\n        return (\n            <div className={\"ge-panel\"}>\n                <div className={\"ge-panel-header\"} style={this.props.headerStyle}>\n                    <h4>{this.props.title}</h4>\n                    <div className={\"ge-panel-options\"}>\n                        <GEList>\n                            {this.props.showToggleBtn ? (\n                                <li>\n                                    <button style={this.props.headerStyle} onClick={() => this.props.onClickToggle()}>\n                                        <FontAwesomeIcon icon={faWindowRestore}/>\n                                    </button>\n                                </li>\n                            ) : (\n                                <span/>\n                            )}\n                            {this.props.showCloseBtn ? (\n                                <li>\n                                    <button style={this.props.headerStyle} onClick={() => this.props.onClickClose()}>\n                                        <FontAwesomeIcon icon={faWindowClose}/>\n                                    </button>\n                                </li>\n                            ) : (\n                                <span/>\n                            )}\n                        </GEList>\n                    </div>\n                </div>\n                <div className={\"ge-panel-body\"}>{this.props.children}</div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport \"./main-content-middle.scss\";\nimport PropTypes from \"prop-types\";\n\nexport default class MainContentMiddle extends React.Component {\n\n    static propTypes = {\n        children: PropTypes.any\n    }\n\n    render() {\n        return <div className={\"main-content-middle\"}>{this.props.children}</div>;\n    }\n}\n","import React from \"react\";\nimport \"./main-content-right.scss\";\nimport PropTypes from \"prop-types\";\n\nexport default class MainContentRight extends React.Component {\n    static defaultProps = {\n        extraClass: \"\"\n    };\n    static propTypes = {\n        extraClass: PropTypes.string,\n        secondaryChild: PropTypes.any,\n        children: PropTypes.any\n    }\n\n    render() {\n        return (\n            <div className={\"main-content-right \" + this.props.extraClass}>\n                {this.props.children}\n                <div>{this.props.secondaryChild}</div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport \"./aside-bottom.scss\";\nimport PropTypes from \"prop-types\"\n\nexport default class AsideBottom extends React.Component {\n  static defaultProps = {\n    extraClass: \"\"\n  };\n\n  static propTypes = {\n    extraClass: PropTypes.string,\n    children: PropTypes.any\n  }\n\n  render() {\n    return (\n      <div className={\"aside-bottom \" + this.props.extraClass}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./footer.scss\";\nimport PropTypes from \"prop-types\";\n\nexport default class GEFooter extends React.Component {\n    static propTypes = {\n        children: PropTypes.any\n    }\n\n    render() {\n        return <div className={\"footer\"}>{this.props.children}</div>;\n    }\n}\n","import React from \"react\";\nimport \"./aside-right.scss\";\nimport PropTypes from \"prop-types\";\n\nexport default class AsideRight extends React.Component {\n\n    static propTypes = {\n        children: PropTypes.any,\n        size: PropTypes.string\n    }\n\n    render() {\n        // let clsName = (this.props.size === \"lg\"? \"aside-right aside-right-lg\" : \"aside-right\");\n        return <div className={this.props.size === \"lg\"? \"aside-right aside-right-lg\" : \"aside-right\"}>{this.props.children}</div>;\n    }\n}\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSignInAlt} from \"@fortawesome/free-solid-svg-icons\";\nimport {GREMLIN_SERVER_URL, GRAPH_ENGINE_NAME} from \"../config\";\nimport {askToSwitchGremlinServer} from \"../core/utils\";\n\nexport default class SettingsComponent extends React.Component {\n\n    static defaultProps = {\n        setLeftFlyOut: () => console.error(\"setCenterModal prop not set for SettingsFlyOut\"),\n    }\n\n\n    connectionStringWithoutCreds() {\n        const __url = new URL(GREMLIN_SERVER_URL);\n        return __url.protocol + \"//\" + __url.host + __url.pathname;\n    }\n\n    showCredentials() {\n\n        let credentialVisibilityStatus = document.getElementById(\"connection-string\").style.display;\n        if (credentialVisibilityStatus === \"none\") {\n            document.getElementById(\"connection-string\").style.display = \"inline-block\";\n            // document.querySelector(\"connectionStringBtn small\").innerText = \"hide full connection string\";\n        } else {\n            document.getElementById(\"connection-string\").style.display = \"none\";\n            // document.querySelector(\"connectionStringBtn small\").innerText = \"show full connection string\";\n        }\n    }\n\n    render() {\n        return (\n            <div className={\"p-10\"}>\n                <p className={\"mb-10\"}><strong>Graph Engine Name:</strong> <br/>\n                    <span>{GRAPH_ENGINE_NAME}</span></p>\n                <p className={\"mb-0\"}><strong>Connection String: </strong> <br/>\n                    <span>{this.connectionStringWithoutCreds()}</span></p>\n                <p>\n                    <button id={\"connectionStringBtn\"} onClick={this.showCredentials.bind(this)} className={\"selected\"}>\n                        <small>show full connection string(toggle)</small>\n                    </button>\n                </p>\n                <p id={\"connection-string\"} style={{\"display\": \"none\"}}>{GREMLIN_SERVER_URL}</p>\n\n                <p></p>\n                <button className={\"button small\"} onClick={() => askToSwitchGremlinServer()} title={\"Switch Server\"}>\n                    switch gremlin server <FontAwesomeIcon icon={faSignInAlt}/>\n                </button>\n            </div>\n        )\n    }\n\n}\n","import React from \"react\";\nimport {faExternalLinkSquareAlt} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport \"./learn.scss\";\nimport {q1CreateData, q3, q4} from \"./learn-queries\";\nimport GEList from \"../ui-components/lists/list\";\nimport PropTypes from \"prop-types\";\n\nexport default class LearnComponent extends React.Component {\n\n\n    static defaultProps = {\n        addQueryToConsole : () => console.error(\"addQueryToConsole not implemented\"),\n        onClose : () => console.error(\"onClose not implemented\")\n    }\n    static propTypes = {\n        onClose: PropTypes.func,\n        addQueryToConsole: PropTypes.func\n    };\n\n\n    render() {\n        return (\n            <div className={\"p-10\"}>\n                <p>Learn how to use gremlin queries to create a simple graph.\n                    I will illustrate simple data story of me and the project using\n                    Graph databases for a starter.</p>\n                <GEList type={\"vertical\"}>\n                    <li>\n                        <button onClick={() => this.props.addQueryToConsole(q1CreateData)}>\n                            1. Add a <strong>Person</strong> and <strong>GitHubProject</strong> nodes</button>\n                    </li>\n                    <li>\n                        <button onClick={() => this.props.addQueryToConsole(q3)}>\n                            2. Update properties of the Node</button>\n                    </li>\n                    <li>\n                        <button onClick={() => this.props.addQueryToConsole(q4)}>\n                            3. Add a relation between both the nodes.</button>\n                    </li>\n\n\n                </GEList>\n                <p>Awesome! <u><button onClick={() => this.props.onClose()}> Close this tour </button></u> and start exploring\n                    your graph data.\n                </p>\n                <h3 style={{\"marginTop\": \"30px\"}}>More Resources</h3>\n                <GEList type={\"vertical\"}>\n                    <li>\n                        <a target={\"_blank\"} rel=\"noopener noreferrer\"\n                           href=\"https://medium.com/invanalabs/crud-cheatsheet-to-apache-tinkerpop-gremlin-393540cd46ae?source=collection_home---4------1-----------------------\">\n                            1. CRUD CheatSheet to Apache TinkerPop Gremlin. <FontAwesomeIcon className={\"small\"}\n                                                                                             icon={faExternalLinkSquareAlt}/>\n                        </a>\n                    </li>\n                    <li>\n                        <a target={\"_blank\"} rel=\"noopener noreferrer\"  href=\"https://tinkerpop.apache.org/docs/current/reference/\">\n                            2. Apache Tinkerpop Documentation <FontAwesomeIcon className={\"small\"}\n                                                                               icon={faExternalLinkSquareAlt}/>\n                        </a>\n                    </li>\n                </GEList>\n            </div>\n        )\n    }\n\n}\n","export const q1CreateData = \"// Adding data of type `Person`\\n\\n\" +\n    \"person = g.addV('Person')\\n\" +\n    \".property('name', 'Ravi Raja')\\n\" +\n    \".iterate();\\n\\n\" +\n    \"// Adding data of type `GitHubProject`\\n\\n\" +\n    \"project = g.addV('GitHubProject')\\n\" +\n    \".property('name', 'Graph Explorer')\\n\" +\n    \".iterate();\\n\" +\n    \"\\n\" +\n    \"// show the results back\\n\" +\n    \"nodes = g.V().limit(2).toList();\";\n\n\nexport const q3 = \"// this will update existing property `name` and adds a new properties\" +\n    \"`full_name` and `profile_pic`.\\n\\n\" +\n    \"g\\n\" +\n    \".V()\\n\" +\n    \".hasLabel('Person')\\n\" +\n    \".has('name', 'Ravi Raja')\\n\" +\n    \".property('name', 'rrmerugu')\\n\" +\n    \".property('full_name', 'Ravi Raja Merugu')\\n\" +\n    \".property('profile_pic', 'https://avatars1.githubusercontent.com/u/4606947')\\n\" +\n    \".iterate()\\n;\" +\n    \"\\n\" +\n    \"nodes = g.V().limit(2).toList();\\n\"\n\n\nexport const q4 = \"// this will add a relation ship between Person and GitHubProject data.\\n\\n\" +\n    \"g\\n\" +\n    \".V()\\n\" +\n    \".hasLabel('Person')\\n\" +\n    \".has('name','rrmerugu')\\n\" +\n    \".as('person')\\n\" +\n    \"\\n\" +\n    \".V()\\n\" +\n    \".hasLabel('GitHubProject')\\n\" +\n    \".has('name','Graph Explorer')\\n\" +\n    \"\\n\" +\n    \".addE('authored')\\n\" +\n    \".from('person')\\n\" +\n    \".property('since',2020).next();\\n\"\n\n\nexport const q5 =\"// this will show all the nodes, edges and the links between. \\n\" +\n    \"\\n\" +\n    \"node=g.V().toList();\\n\" +\n    \"\\n\" +\n    \"edges = g\\n\" +\n    \".V()\\n\" +\n    \".bothE()\\n\" +\n    \".dedup()\\n\" +\n    \".toList();\\n\" +\n    \"\\n\" +\n    \"other_nodes = g\\n\" +\n    \".V()\\n\" +\n    \".bothE()\\n\" +\n    \".otherV()\\n\" +\n    \".dedup()\\n\" +\n    \".toList();\\n\" +\n    \"[other_nodes,edges,node]\"\n","import React from \"react\";\nimport {getDataFromLocalStorage} from \"../core/utils\";\nimport {historyLocalStorageKey} from \"../config\";\nimport \"./history.scss\";\nimport GEList from \"../ui-components/lists/list\";\nimport PropTypes from \"prop-types\";\n\nexport default class HistoryComponent extends React.Component {\n\n    static defaultProps = {\n        makeQuery: (query) => console.log(\"makeQuery prop not set to HistoryFlyOut\", query),\n        // connector: null,\n        addQueryToConsole: (query) => console.log(\"addQueryToConsole prop not set to HistoryFlyOut\", query),\n        query: null\n    }\n\n    static propTypes = {\n        makeQuery: PropTypes.func,\n        // connector: PropTypes.func,\n        addQueryToConsole: PropTypes.func,\n        query: PropTypes.string\n    };\n\n\n    render() {\n        const existingHistory = getDataFromLocalStorage(historyLocalStorageKey, true) || [];\n        const historyToShow = existingHistory.filter(item => item.source !== \"internal\");\n        return (\n            <div>\n                {historyToShow.length > 0\n                    ?\n                    <GEList type={\"vertical\"}>\n                        {\n                            historyToShow.filter(item => item.source !== \"internal\").map((existingHistoryItem, i) => {\n                                return (\n                                    <li className={\"historyItem\"} key={i}>\n                                        <pre>{JSON.stringify(existingHistoryItem.query, null, 2)}</pre>\n                                        <div>\n                                            <button className={\"small\"}\n                                                    onClick={() => this.props.makeQuery(existingHistoryItem.query, {source: 'canvas'})}>\n                                                Run Again\n                                            </button>\n                                            <button className={\"small\"}\n                                                    onClick={() => this.props.addQueryToConsole(existingHistoryItem.query)}>\n                                                Edit Query in Console\n                                            </button>\n                                        </div>\n                                        <div className={\"small\"}>\n                                            Queried from {existingHistoryItem.source} at {existingHistoryItem.dt}\n                                        </div>\n                                    </li>\n                                )\n                            })\n                        }\n                    </GEList>\n                    : <p>Hm! No user query history found!.</p>\n                }\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport {faBook} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faGithub,\n    // faGitter,\n    faMedium, faTwitter\n} from \"@fortawesome/free-brands-svg-icons\";\nimport \"./support.scss\";\nimport GEList from \"../ui-components/lists/list\";\n\nexport default class SupportComponent extends React.Component {\n\n\n    render() {\n        return (\n            <div className={\"p-10\"}>\n                <GEList type={\"vertical\"}>\n\n                    <li>\n                        <a target={\"_blank\"} rel=\"noopener noreferrer\"\n                           href={\"https://invana.io/help.html\"}>\n                            <h4><FontAwesomeIcon icon={faBook}/> Documentation</h4>\n                            <p>Beginner tutorials, usage and developer documentation.</p>\n                        </a>\n                    </li>\n                    <li>\n                        <a target={\"_blank\"} rel=\"noopener noreferrer\"\n                           href=\"https://github.com/invanalabs/graph-explorer/issues\">\n                            <h4><FontAwesomeIcon icon={faGithub}/> GitHub</h4>\n                            <p>Bugs, Feature Requests on GitHub</p>\n\n                        </a>\n                    </li>\n                    <li>\n                        <a target={\"_blank\"} rel=\"noopener noreferrer\" href=\"https://medium.com/invanalabs\">\n                            <h4><FontAwesomeIcon icon={faMedium}/> Medium</h4>\n                            <p>Blogs on latest implementations and more use cases.</p>\n                        </a>\n                    </li>\n\n                    <li>\n                        <a target={\"_blank\"} rel=\"noopener noreferrer\" href={\"https://twitter.com/invanalabs\"}>\n                            <h4><FontAwesomeIcon icon={faTwitter}/> Twitter</h4>\n                            <p>Stay upto date about the releases, updates, use case blogs, </p>\n                        </a>\n                    </li>\n                    {/*<li>*/}\n                    {/*    <button onClick={() => alert('Its a work in progress')}>*/}\n                    {/*        <h4><FontAwesomeIcon icon={faGitter}/> Gitter Community [WIP]</h4>*/}\n                    {/*        <p>Chatroom for Community</p>*/}\n                    {/*    </button>*/}\n                    {/*</li>*/}\n                </GEList>\n\n                <p>If you need any support beyond the above,\n                    please get in touch with us at <br/><span className={\"selected\"}>hi[ at ]invana.io</span>\n                </p>\n\n            </div>\n        )\n    }\n\n}\n","import React from \"react\";\nimport RemoteGraphComponent from \"../core/graph-component\";\nimport GEList from \"../ui-components/lists/list\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faWrench, faProjectDiagram} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./management.scss\";\nimport {managementVertexLabel} from \"../config\";\nimport {getColorForString} from \"../canvas/canvas-utils\";\n\nexport default class VerticesManagement extends RemoteGraphComponent {\n\n    state = {\n        verticesLabels: []\n    }\n    // static defaultProps = {\n    //     setShowVertexOptions: (selectedLabel) => console.debug(\"this.setShowVertexOptions not set\", selectedLabel),\n    //\n    // }\n\n    componentDidMount() {\n        // this.prop\n        console.log(\"======\", this.props, this.requestBuilder);\n        const queryPayload = this.connector.requestBuilder.getVerticesLabelStats();\n        this.makeQuery(queryPayload);\n    }\n\n    processResponse(response) {\n        console.log(\"=====responses===\", response);\n        // if (response.status.code !== 200) {\n        //     // this.props.setErrorMessage(response.status);\n        //     console.log(\"Failed to get the vertices labels\");\n        // }else {\n        console.log(\"===>>\", response.getResponseResult());\n        const lastResponse = response.getResponseResult();\n        if (lastResponse) {\n            this.setState({verticesLabels: response.getResponseResult()})\n\n        }\n        // }\n        // if (this.props.selectedElementData) {\n        //\n        // }\n\n    }\n\n    getVertexColor(label, nodeLabels) {\n        const nodeLabelOption = nodeLabels[label];\n        if (nodeLabelOption && nodeLabelOption.bgColor) {\n            return nodeLabelOption.bgColor;\n        } else {\n            return getColorForString(label);\n        }\n    }\n\n\n    render() {\n\n        const nodeLabels = Object.assign({}, JSON.parse(localStorage.getItem('nodeLabels')));\n\n        return (\n\n            <div className={\" p-10\"}>\n                {\n                    this.state.verticesLabels.length === 0\n                        ? <span className={\"text-muted\"}>No vertices data found</span>\n                        : <span></span>\n                }\n                <GEList type={\"vertical-no-border\"}>\n                    {\n                        this.state.verticesLabels.filter((label) => {\n                            return label.label !== managementVertexLabel\n                        }).map((vertexLabel, index) => {\n                            return (\n                                <li style={{\"marginBottom\": \"5px\",}} key={index}>\n                                    <button className={\"management-icon-btn\"}\n                                            title={\"Show connected edges and vertices\"}\n                                            onClick={() => this.props.parentGraphComponent.makeQuery(\n                                                this.connector.requestBuilder.getNeighborEdgesAndVertices(\n                                                    vertexLabel.label, 10, 0), {'source': 'canvas'})}>\n                                        <FontAwesomeIcon icon={faProjectDiagram}/>\n                                    </button>\n                                    {/*<button className={\"management-icon-btn\"} title={\"Show \"}*/}\n                                    {/*        onClick={() => this.props.parentGraphComponent.makeQuery(*/}\n                                    {/*            this.connector.requestBuilder.filterVertices(vertexLabel.label, 50, 0),*/}\n                                    {/*            {'source': 'canvas'})}>*/}\n                                    {/*    <FontAwesomeIcon icon={faCircle}/>*/}\n                                    {/*</button>*/}\n                                    <button className={\"management-icon-btn\"} title={\"Show the vertices options\"}\n                                            onClick={() => this.props.setShowVertexOptions(vertexLabel.label, \"g:Vertex\")}>\n                                        <FontAwesomeIcon icon={faWrench}/>\n                                    </button>\n                                    <span style={{\n                                        'display': 'inline',\n                                        'color': this.getVertexColor(vertexLabel.label, nodeLabels)\n                                    }}>\n                                    {vertexLabel.label} <small style={{\"color\": \"#656565\"}}>\n                                            ({this.props.parentGraphComponent.dataStore.verticesStats.get(vertexLabel.label)\n                                    || 0} of {vertexLabel.count})\n                                        </small>\n                                    </span>\n\n                                </li>)\n                        })\n                    }\n                </GEList>\n            </div>\n\n        );\n    }\n}\n","import React from \"react\";\nimport RemoteGraphComponent from \"../core/graph-component\";\nimport GEList from \"../ui-components/lists/list\";\nimport {managementVertexLabel} from \"../config\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faProjectDiagram, faWrench} from \"@fortawesome/free-solid-svg-icons\";\nimport {getColorForString} from \"../canvas/canvas-utils\";\n\nexport default class EdgesManagement extends RemoteGraphComponent {\n\n    state = {\n        edgesLabels: []\n    }\n\n    componentDidMount() {\n        const queryPayload = this.connector.requestBuilder.getEdgesLabelStats();\n        this.makeQuery(queryPayload);\n    }\n\n    processResponse(response) {\n        console.log(\"=====responses===\", response);\n        const result = response.getResponseResult();\n        if (result) {\n            this.setState({edgesLabels: response.getResponseResult()})\n        }\n    }\n\n    getVertexColor(label, nodeLabels) {\n        const nodeLabelOption = nodeLabels[label];\n        if (nodeLabelOption && nodeLabelOption.bgColor) {\n            return nodeLabelOption.bgColor;\n        } else {\n            return getColorForString(label);\n        }\n    }\n\n    render() {\n        const nodeLabels = Object.assign({}, JSON.parse(localStorage.getItem('nodeLabels')));\n        console.log(\"=====this.state.edgesLabels\", this.state.edgesLabels);\n        return (\n\n            <div className={\" p-10\"}>\n                {\n                    this.state.edgesLabels.length === 0\n                        ? <span className={\"text-muted\"}>No edges data found</span>\n                        : <span></span>\n                }\n                <GEList type={\"vertical-no-border\"}>\n                    {\n                        this.state.edgesLabels.filter((edgeLabel) => {\n                            return edgeLabel.label !== managementVertexLabel\n                        }).map((edgeLabel, index) => {\n                            return (\n                                <li style={{\"marginBottom\": \"5px\",}} key={index}>\n                                    <button className={\"management-icon-btn\"}\n                                            title={\"Show connected edges and their vertices\"}\n                                            onClick={() => this.props.parentGraphComponent.makeQuery(\n                                                this.connector.requestBuilder.filterEdgeAndGetNeighborVertices(\n                                                    edgeLabel.label, 10, 0), {'source': 'canvas'})\n                                            }>\n                                        <FontAwesomeIcon icon={faProjectDiagram}/>\n                                    </button>\n                                    <button style={{\"display\": \"none\"}} className={\"management-icon-btn\"}\n                                            title={\"Show the vertices options\"}\n                                            onClick={() => this.props.setShowVertexOptions(edgeLabel.label, \"g:Edge\")}>\n                                        <FontAwesomeIcon icon={faWrench}/>\n                                    </button>\n                                    <span style={{\n                                        'display': 'inline',\n                                        'color': this.getVertexColor(edgeLabel.label, nodeLabels)\n                                    }}>\n                                    {edgeLabel.label} <small style={{\"color\": \"#656565\"}}>\n                                            ({this.props.parentGraphComponent.dataStore.edgesStats.get(edgeLabel.label)\n                                    || 0} of {edgeLabel.count})\n                                        </small>\n                                    </span>\n\n                                </li>)\n                        })\n                    }\n                </GEList>\n            </div>\n\n        );\n    }\n}\n","import React from \"react\";\nimport {ABOUT_TEXT, VERSION} from \"../config\";\n\nexport default class AboutComponent extends React.Component {\n\n\n    render() {\n        return (\n            <div className={\"p-10\"}>\n                <h3 style={{  \"fontWeight\": \"20px\"}}>Graph Explorer <small>({VERSION})</small></h3>\n                <p style={{\"marginTop\": \"0\"}}>\n                    {ABOUT_TEXT} <br/>\n                </p>\n                <p>\n                    <strong>License:</strong> Apache License 2.0\n                </p>\n                <p><a rel=\"noopener noreferrer\" target={\"_blank\"}\n                                             href=\"http://github.com/invanalabs/graph-explorer/\">http://github.com/invanalabs/graph-explorer/</a>\n                </p>\n\n                <p>This is an open source project under Apache License 2.0, so\n                    feel free to <u><a target={\"_blank\"} rel=\"noopener noreferrer\"\n                                       href=\"http://github.com/invanalabs/graph-explorer/\">star</a></u> and <u><a rel=\"noopener noreferrer\" target={\"_blank\"}\n                          href=\"http://github.com/invanalabs/graph-explorer/\">fork.</a></u>\n                    &nbsp;Any contributions are welcome :)</p>\n\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport \"./selected-data.scss\";\nimport PropTypes from \"prop-types\";\nimport {renderPropertyData} from \"../canvas/canvas-utils\";\n\nexport default class SelectedData extends React.Component {\n\n    static defaultProps = {\n        selectedData: null,\n        onClose: () => console.error(\"onFlyOutSelectedDataClose not implemented\")\n    }\n\n    static propTypes = {\n        selectedData: PropTypes.object\n    }\n\n    getCleanedData() {\n        // removes position attributes etc.\n        let data = Object.assign({}, this.props.selectedData);\n\n        if (data.type) {\n            let properties = data.properties;\n            let cleanedData = {};\n            cleanedData.label = data.label;\n            cleanedData.type = data.type.replace(\"g:\", \"\");\n            cleanedData.id = data.id;\n            cleanedData.properties = properties;\n            cleanedData.target = data.target;\n            cleanedData.source = data.source;\n            return cleanedData;\n        } else {\n            return {\"properties\": {}};\n        }\n    }\n\n\n\n\n    render() {\n        let cleanedData = this.getCleanedData();\n        let nodeLabelsColoring = Object.assign({}, JSON.parse(localStorage.getItem('nodeLabels')));\n        let linkLabelsColoring = Object.assign({}, JSON.parse(localStorage.getItem('linkLabels')));\n        let selectedDataColorSchema = {};\n\n        if (cleanedData.type === \"Vertex\") {\n            selectedDataColorSchema = nodeLabelsColoring[cleanedData.label];\n        } else if (cleanedData.type === \"Edge\") {\n            selectedDataColorSchema = linkLabelsColoring[cleanedData.label];\n        }\n        if (!selectedDataColorSchema) {\n            selectedDataColorSchema = {bgColor: \"#7d8296\"};\n        }\n\n        console.log(\"cleanedData\", cleanedData)\n\n\n        return (\n            <div>\n                {/*<div className={\"SelectedDataHeading\"}>*/}\n                {/*    <span className={\"itemLabel\"} style={{*/}\n                {/*        \"backgroundColor\":*/}\n                {/*        selectedDataColorSchema.bgColor*/}\n                {/*    }}>*/}\n                {/*        {cleanedData.label}*/}\n                {/*    </span>*/}\n                {/*    {cleanedData.properties.name || cleanedData.id}*/}\n\n                {/*</div>*/}\n                <div className=\"SelectedDataList mainDetails\">\n\n\n                    <div className={'singleProperty dark'} key={cleanedData.id}>\n                        <div className={\"propertyData\"}>\n                            <strong className={\"propertyKey\"}>id:</strong> {cleanedData.id}\n                        </div>\n                    </div>\n                    <div className={'singleProperty dark'} key={cleanedData.type}>\n                        <div className={\"propertyData\"}>\n                            <strong className={\"propertyKey\"}>type:</strong> {cleanedData.type}\n                        </div>\n                    </div>\n                    <div className={'singleProperty dark'} key={cleanedData.label}>\n                        <div className={\"propertyData\"}>\n                            <strong className={\"propertyKey\"}>label:</strong> {cleanedData.label}\n                        </div>\n                    </div>\n                    {\n                        cleanedData.source\n                            ? <div className={'singleProperty dark'} key={cleanedData.source.id}>\n                                <div className={\"propertyData\"}>\n                                    <strong className={\"propertyKey\"}>source:</strong>\n                                    <span style={{\"color\": cleanedData.source.meta.shapeOptions.fillColorHex}}>\n                                          &nbsp;{cleanedData.source.meta.labelOptions.labelText}\n                                    </span>\n                                </div>\n                            </div>\n                            : <span></span>\n                    }\n\n                    {\n                        cleanedData.target\n                            ? <div className={'singleProperty dark'} key={cleanedData.target.id}>\n                                <div className={\"propertyData\"}>\n                                    <strong className={\"propertyKey\"}>target:</strong>\n                                    <span style={{\"color\": cleanedData.target.meta.shapeOptions.fillColorHex}}>\n                                         &nbsp;{cleanedData.target.meta.labelOptions.labelText}\n                                    </span>\n                                </div>\n                            </div>\n                            : <span></span>\n                    }\n\n                </div>\n                <div className=\"SelectedDataList\">\n                    <div className={'singleProperty darkest'} key={\"properties-list\"}>\n                        <div className={\"propertyData\"}>\n                            <strong className={\"propertyKey \"}>PROPERTIES</strong>\n                        </div>\n                    </div>\n                    {\n                        Object.keys(cleanedData.properties).length === 0\n                            ? <div className={'singleProperty'} key={cleanedData.id + \"-no-properties-exist\"}>\n                                <div className={\"propertyData\"}><span\n                                    className={\"text-muted\"}>No properties exist for this {cleanedData.type}</span>\n                                </div>\n                            </div>\n                            : <span></span>\n                    }\n                    {\n                        Object.keys(cleanedData.properties).map((propKey) => {\n                            return (\n                                <div className={'singleProperty'} key={cleanedData.id + \"-\" + propKey}>\n                                    <div className={\"propertyData\"}>\n                                        <strong className={\"propertyKey\"}>{propKey}:</strong>\n                                        <div\n                                            style={{\"marginTop\": \"5px\"}}>{renderPropertyData(propKey, cleanedData.properties[propKey])}</div>\n                                    </div>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n\n            </div>\n        )\n    }\n\n}\n","import React from \"react\";\nimport RemoteGraphComponent from \"../core/graph-component\";\nimport {\n    setElementColorOptionsToStorage,\n} from \"../core/utils\";\nimport {\n    managementVertexLabel\n} from \"../config\";\nimport {getDefaultNodeOptions} from \"../canvas/canvas-utils\";\n\n\nexport default class VertexOptions extends RemoteGraphComponent {\n\n    state = {\n        ...this.state,\n        nodeOptions: null\n    }\n    shallReload = true;\n\n    // firstTime = false;\n    //\n    // componentWillUnmount() {\n    //     this.setState({nodeOptions: null});\n    //     // super.componentWillUnmount();\n    //     // alert(\"vertex options unmounted\")\n    // }\n\n    componentDidMount() {\n        console.log(\"VO componentDidMount\")\n\n        // super.componentDidMount();\n        console.log(\"======\", this.props, this.requestBuilder);\n        this.getSelectedLabelConfigData();\n    }\n\n    getSelectedLabelConfigData() {\n        const queryPayload = this.connector.requestBuilder.getOrCreateVertices(\n            managementVertexLabel, {name: this.props.selectedLabel}\n        );\n        this.makeQuery(queryPayload);\n    }\n\n    componentDidUpdate(prevProps) {\n        console.log(\"VO componentDidUpdate\")\n        if (prevProps.selectedLabel !== this.props.selectedLabel) {\n            // already data exist\n            this.setState({nodeOptions: null});\n            this.getSelectedLabelConfigData();\n        }\n    }\n\n    onFormSubmit(e) {\n        e.preventDefault();\n        console.log(\"formdata\", e.target);\n\n        let properties = this.state.nodeOptions.properties;\n        properties['label_type'] = this.props.selectedLabelType;\n        const query_string = this.connector.requestBuilder.updateVertexById(\n            this.state.nodeOptions.id, properties\n        );\n        this.makeQuery(query_string, {'source': 'canvas'});\n    }\n\n    // add this vertex options to\n\n    // updateThisLabelSettings(response) {\n    //     setElementColorOptionsToStorageUsingResponse(response);\n    // }\n\n    // shouldComponentUpdate(nextProps, nextState, nextContext) {\n    //     return nextProps.selectedLabel !== this.props.selectedLabel || nextState.nodeOptions !== this.state.nodeOptions;\n    //     // return this.shallReload;\n    // }\n\n\n    processResponse(response) {\n        this.shallReload = true;\n        console.log(\"=====response===\", response);\n        if (response.response.data && response.response.data.getOrCreateVertex) {\n            // get the init data of the vertex options.\n            setElementColorOptionsToStorage(response.response.data.getOrCreateVertex);\n            this.setState({nodeOptions: response.response.data.getOrCreateVertex})\n            this.forceUpdate();\n        } else if (response.response.data && response.response.data.updateVertexById) {\n            // mutation data - update the vertex options.\n            setElementColorOptionsToStorage(response.response.data.updateVertexById);\n            this.props.setStatusMessage(\"Updated options for label '\" + this.props.selectedLabel + \"'\");\n            this.setState({nodeOptions: response.response.data.updateVertexById})\n            // this.props.reRenderCanvas();\n            this.props.setShallReRenderD3Canvas(true);\n            if (response.transporterStatusCode !== 200) {\n                this.props.setErrorMessage(response.transporterStatusCode);\n            }\n        }\n    }\n\n    handleValueChange(e) {\n        console.log(\"handleValueChange=====\", e);\n        let nodeOptions = this.state.nodeOptions;\n\n        nodeOptions.properties[e.target.name] = e.target.value;\n        console.log(\"<<<>>>nodeOptions\", nodeOptions)\n        this.setState({nodeOptions: nodeOptions});\n\n    }\n\n    render() {\n        const selectedLabel = this.props.selectedLabel;\n        // let thisNodeOptions = this.state.nodeOptions;\n        // if (!thisNodeOptions.properties) {\n        //     thisNodeOptions.properties = {};\n        // }\n        console.log(\"======this.state.nodeOptions \", this.state.nodeOptions)\n        const defaultNodeOptions = getDefaultNodeOptions(selectedLabel,);\n        console.log(\"========defaultNodeOptions\", defaultNodeOptions)\n        console.log(\"***\");\n        this.shallReload = false;\n\n        return (\n            <div className={\"p-10\"}>\n                {this.state.nodeOptions &&\n\n                <form onSubmit={this.onFormSubmit.bind(this)}>\n\n                    {/*<label>Vertex Label</label>*/}\n                    <input type=\"hidden\" name={\"name\"} readOnly={true} spellCheck=\"false\"\n                           defaultValue={selectedLabel}/>\n                    <input type=\"hidden\" name={\"label\"}\n                           defaultValue={selectedLabel}/>\n                    {/*<input type=\"hidden\" name={\"uid\"} defaultValue={selectedElementData.id}/>*/}\n\n                    <label className={\"\"}>Background Color</label>\n                    <input type=\"text\" name={\"bgColor\"} maxLength={7} minLength={7}\n                           placeholder={\"bgColor\"} spellCheck=\"false\"\n                           onChange={this.handleValueChange.bind(this)}\n                           defaultValue={this.state.nodeOptions.properties.bgColor || defaultNodeOptions.bgColor}/>\n\n                    <label style={{\"display\": \"none\"}} className={\"\"}>Border Color</label>\n                    <input type=\"hidden\" name={\"borderColor\"} maxLength={7} minLength={7}\n                           placeholder={\"borderColor\"} spellCheck=\"false\" readOnly={\"readonly\"}\n\n                           defaultValue={this.state.nodeOptions.properties.borderColor || defaultNodeOptions.borderColor}/>\n\n                    {/*<label className={\"\"}>Background Image (from web)</label>*/}\n                    <input type=\"hidden\" name={\"bgImageUrl\"} placeholder={\"bgImage (optional)\"}\n                           spellCheck=\"false\"\n                           onChange={this.handleValueChange.bind(this)}\n                           defaultValue={this.state.nodeOptions.properties.bgImageUrl || defaultNodeOptions.bgImageUrl}/>\n\n                    <label style={{\"display\": \"none\"}} className={\"\"}>Background Image (from data field)</label>\n                    <input type=\"hidden\" name={\"bgImagePropertyKey\"}\n                           spellCheck=\"false\"\n                           onChange={this.handleValueChange.bind(this)}\n                           placeholder={\"bgImagePropertyKey (optional)\"} readOnly={\"readonly\"}\n                           defaultValue={this.state.nodeOptions.properties.bgImagePropertyKey || defaultNodeOptions.bgImagePropertyKey}/>\n\n                    <label className={\"\"}>Label Property Key (from data fields)</label>\n                    <input type=\"text\" name={\"labelPropertyKey\"}\n                           spellCheck=\"false\"\n                           placeholder={\"labelPropertyKey (optional)\"}\n                           onChange={this.handleValueChange.bind(this)}\n                           defaultValue={this.state.nodeOptions.properties.labelPropertyKey || defaultNodeOptions.labelPropertyKey}/>\n\n                    {/*<label className={\"\"}>Background HTML</label>*/}\n                    <input type=\"hidden\" name={\"tagHtml\"}\n                           spellCheck=\"false\"\n                           placeholder={\"tagHtml (optional)\"}\n                           defaultValue={this.state.nodeOptions.properties.tagHtml || \"\"}/>\n                    <br/>\n                    <button className={\"mt-10 button primary-btn\"} type={\"submit\"}>update</button>\n                </form>\n\n                }\n\n            </div>\n        )\n    }\n\n}\n","import React from \"react\";\nimport {ABOUT_TEXT, VERSION, REPO_URL} from \"../config\";\nimport PropTypes from \"prop-types\";\n\nexport default class FounderNote extends React.Component {\n\n    static defaultProps = {\n        onClose: () => console.error(\"onClose prop not set for <FounderNote> component\"),\n        setRightContentName: () => console.error(\"setRightContentName prop not set for <FounderNote> component\")\n    }\n\n\n    static propTypes = {\n        setRightContentName: PropTypes.func,\n        onClose: PropTypes.func\n    };\n\n    render() {\n        return (\n\n            <div className={'p-10'}>\n\n                <p>Hi there! </p>\n                <p>Introducing Graph Explorer ({VERSION}) - {ABOUT_TEXT}</p>\n                <p>In the words of General Patton, “If a man does his best, what else is there!”, so I\n                    believe there is always a next best thing. In the spirit of\n                    every <em>new technology</em> that disrupts the way Humans solves the problems.\n                    This project is yet an attempt to gather the best of the tech\n                    from graph computing and\n                    data visualisations, to give Innovators a great way to find\n                    problems and the solutions with the help of data.\n                </p>\n                <p>\n                    Also, I am really excited about the potential of Graph Databases -\n                    they establish connections between the data\n                    during the write operations, giving faster read time abilities for\n                    handling complex queries like never before.\n                </p>\n                <p>This project is shared\n                    under open source <em>Apache License 2.0</em> license.\n                    Please feel free to contribute and star\n                    the project at <a href={REPO_URL} rel=\"noopener noreferrer\" target={\"_blank\"}\n                                      className={\"selected\"}>Github.</a>.</p>\n                <p>Best <br/>\n                    Ravi Raja Merugu <a target={\"_blank\"} rel=\"noopener noreferrer\"\n                                        href=\"https://www.linkedin.com/in/rrmerugu/\">(linkedin.com/in/rrmerugu/)</a>\n                </p>\n\n                <p>\n                    <button className={\"selected\"} onClick={() => this.props.setRightContentName(\"learn\")}>\n                        <u>Build your first Graph &rarr;</u>\n                    </button>\n                    <span style={{\"marginLeft\": \"5px\", \"marginRight\": \"5px\"}}>|</span>\n\n\n                    <button onClick={() => this.props.setRightContentName(\"support\")}>\n                        check support\n                    </button>\n\n                    <span style={{\"marginLeft\": \"5px\", \"marginRight\": \"5px\"}}>|</span>\n                    <button onClick={() => this.props.onClose()}>\n                        close\n                    </button>\n                </p>\n\n\n            </div>\n\n        )\n    }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport GEList from \"../ui-components/lists/list\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCube} from \"@fortawesome/free-solid-svg-icons\";\n\nexport default class WhatsNew extends React.Component {\n\n    static defaultProps = {\n        onClose: () => console.error(\"onClose prop not set for <WhatsNew> component\"),\n        setLeftContent: () => console.error(\"setLeftContent prop not set for <WhatsNew> component\")\n    }\n\n\n    static propTypes = {\n        setLeftContent: PropTypes.func,\n        onClose: PropTypes.func\n    };\n\n    render() {\n        return (\n\n            <div className={'p-10'}>\n                <GEList type={\"vertical\"}>\n                    <li>\n                        <h4 className={\"mt-20\"}><FontAwesomeIcon icon={faCube}/> Switch Visualisation Canvas</h4>\n                        <p>Visualise your data as Graph, Tables & JSON.</p>\n                    </li>\n                    <li>\n                        <h4 className={\"mt-20\"}><FontAwesomeIcon icon={faCube}/> Browse using HotKeys</h4>\n                        <p>Use keyboard shortcuts for a seamless data browsing experience.</p>\n                    </li>\n                    <li>\n                        <h4 className={\"mt-20\"}><FontAwesomeIcon icon={faCube}/> Gremlin Query Console</h4>\n                        <p>Run queries on your graph data using Apache TinkerPop&quot;s Gremlin Query Language.</p>\n                    </li>\n                    <li>\n                        <h4 className={\"mt-20\"}><FontAwesomeIcon icon={faCube}/> Connect to HTTP or WebSocket</h4>\n                        <p>Connect to gremlin server over `http` or `ws` protocols.</p>\n                    </li>\n                    <li>\n                        <h4 className={\"mt-20\"}><FontAwesomeIcon icon={faCube}/> Secure Connections with Auth</h4>\n                        <p>Connect to gremlin server using basic or token based authentication.</p>\n                    </li>\n                </GEList>\n            </div>\n\n        )\n    }\n}\n","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nexport default class ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {hasError: false};\n    }\n    static propTypes = {\n        children: PropTypes.any\n    }\n\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        console.log(\"getDerivedStateFromError error is \", error);\n        return {hasError: true};\n    }\n\n    componentDidCatch(error, errorInfo) {\n        // You can also log the error to an error reporting service\n        console.log(\"ERROR=================\", error, errorInfo)\n        // logErrorToMyService(error, errorInfo);\n    }\n\n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return <h1>Something went wrong.</h1>;\n        }\n\n        return this.props.children;\n    }\n}\n","// import {colorToNumber, getColor, getLinkLabel, getNodeLabel} from \"./old/utils\";\n// import * as PIXI from 'pixi.js-legacy'\n\n// import {node} from \"prop-types\";\n\nexport default class EventStore {\n\n    clickedNodeData = undefined;//\n    lastSelectedNodeData = undefined;// used to get the last selected data for nav-ui-components.\n    hoveredNodeData = undefined;\n\n    nodeMenuEl = undefined;\n\n    constructor(nodeMenuEl) {\n        this.nodeMenuEl = nodeMenuEl;\n    }\n\n    showMenu() {\n        this.nodeMenuEl.style.display = \"block\";\n    }\n\n    hideMenu() {\n        this.nodeMenuEl.style.display = \"none\";\n    }\n\n    onLinkClicked(graphicsEngine, linkData, linkGfx, event) {\n        console.log(\"onNodeClicked\", linkData.id, linkGfx, event,)\n        this.clickedNodeData = null;\n        // this.lastSelectedNodeData = null;\n        // graphicsEngine.eventStore.hideMenu();\n        graphicsEngine.onElementSelected(linkData);\n    }\n\n    onLinkMouseOver(graphicsEngine, linkData, linkGfx, event) {\n        console.log(linkData.id, linkGfx, event, \"link MouseOver\");\n        // this.lastSelectedNodeData = null;\n        if (graphicsEngine.dataStore.getUniqueFocusedNodes().length > 0) {\n            // if (graphicsEngine.dataStore.checkIfNodeExistInFocused(nodeData){\n            // dont hover-highlight when there is focus selected.\n            return\n        }\n\n        this.highlightLink(graphicsEngine, linkData);\n        graphicsEngine.eventStore.hideMenu();\n        graphicsEngine.onElementSelected(linkData);\n\n    }\n\n    onLinkMouseOut(graphicsEngine, linkData, linkGfx, event) {\n        console.log(linkData.id, linkGfx, event, \"link MouseOut\");\n        // this.lastSelectedNodeData = null;\n        // graphicsEngine.eventStore.hideMenu();\n\n        if (graphicsEngine.dataStore.getUniqueFocusedNodes().length > 0) {\n            // if (graphicsEngine.dataStore.checkIfNodeExistInFocused(nodeData){\n            // dont hover-highlight when there is focus selected.\n            return\n        }\n        this.unHighlightLink(graphicsEngine, linkData);\n        graphicsEngine.onElementSelected(null);\n    }\n\n    createNodeMenu(graphicsEngine, nodeData, event) {\n        console.log(\"createNode Menu\", nodeData, event);\n        this.nodeMenuEl.style.left = event.data.global.x + graphicsEngine.settings.NODE_MENU_X_PADDING + \"px\";\n        this.nodeMenuEl.style.top = event.data.global.y + graphicsEngine.settings.NODE_MENU_Y_PADDING + \"px\";\n    }\n\n\n    onNodeRightClicked(graphicsEngine, nodeData, nodeContainer, event) {\n        this.showMenu();\n        this.clickedNodeData = nodeData;\n        this.lastSelectedNodeData = nodeData;\n        console.log(this.clickedNodeData.id, \" clicked\");\n        graphicsEngine.onElementSelected(nodeData);\n        console.log(\"clicked\", event);\n        this.createNodeMenu(graphicsEngine, nodeData, event);\n        // if (nodeData) {\n        //     this.highlightNodes(graphicsEngine, [nodeData])\n        // }\n\n    }\n\n    onNodeClicked(graphicsEngine, nodeData, nodeContainer, event) {\n        console.log(\"onNodeClicked\", nodeContainer, event)\n        this.clickedNodeData = nodeData;\n        this.lastSelectedNodeData = nodeData;\n        console.log(this.clickedNodeData.id, \" clicked\");\n        graphicsEngine.onElementSelected(nodeData);\n    }\n\n    focusGraph(graphicsEngine) {\n        console.log(\"====graphicsEngine\", graphicsEngine)\n    }\n\n    highlightNodes(graphicsEngine, nodes) {\n        console.log(\"highlightNodes \", nodes);\n        // add hover effect\n        graphicsEngine.graphicsStore.focusOnElements(nodes);\n        graphicsEngine.requestRender();\n    }\n\n    highlightLink(graphicsEngine, linkData) {\n        console.log(\"highlightLink \", linkData);\n        graphicsEngine.graphicsStore.focusOnElements(null, linkData);\n        graphicsEngine.requestRender();\n    }\n\n    unHighlightLink(graphicsEngine, linkData) {\n        console.log(\"unHighlightLink \", linkData);\n        graphicsEngine.graphicsStore.resetFocus();\n        graphicsEngine.requestRender();\n    }\n\n    unHighlightNode(graphicsEngine, nodeData) {\n        console.log(\"=====unHighlightNode\", nodeData)\n        graphicsEngine.graphicsStore.resetFocus();\n        graphicsEngine.requestRender();\n    }\n\n    onNodeMouseOver(graphicsEngine, nodeData, nodeContainer, event) {\n        console.log(nodeData.id, nodeContainer, event, \" mouseover\");\n\n        graphicsEngine.onElementSelected(nodeData);\n\n        // if the last selected element is not this node, hide the menu.\n        // const lastSelectedNodeData  = graphicsEngine.dataStore.lastSelectedNodeData;\n        if (this.clickedNodeData && this.clickedNodeData.id !== nodeData.id) {\n            this.hideMenu();\n        }\n\n\n        if (graphicsEngine.dataStore.getUniqueFocusedNodes().length > 0) {\n            // if (graphicsEngine.dataStore.checkIfNodeExistInFocused(nodeData){\n            // dont hover-highlight when there is focus selected.\n            return\n        }\n\n        if (nodeData) {\n            // let focusedNodes = graphicsEngine.dataStore.getUniqueFocusedNodes();\n            // const isExist = graphicsEngine.dataStore.checkIfVertexExistInFocused(nodeData);\n            // if (!isExist){\n            //     focusedNodes.push(nodeData);\n            // }\n            this.highlightNodes(graphicsEngine, [nodeData])\n            // for drag feature\n            if (this.clickedNodeData) {\n                return;\n            }\n            this.hoveredNodeData = nodeData;\n        }\n\n    }\n\n    onNodeMouseOut(graphicsEngine, nodeData, nodeContainer, event) {\n        console.log(nodeData.id, nodeContainer, event, \" mouseout\");\n        if (graphicsEngine.dataStore.getUniqueFocusedNodes().length > 0) {\n            // if (graphicsEngine.dataStore.checkIfNodeExistInFocused(nodeData){\n            // dont hover-highlight when there is focus selected.\n            return\n        }\n        this.unHighlightNode(graphicsEngine, nodeData)\n\n        if (this.clickedNodeData) {\n            return;\n        }\n    }\n\n    unsetSelectedNodeData() {\n        this.clickedNodeData = undefined;\n    }\n\n\n    onNodeUnClicked(graphicsEngine, nodeData, nodeContainer, event) {\n        console.log(\"===onNodeUnClicked\", nodeContainer, event, nodeData);\n        this.unsetSelectedNodeData();\n\n        // // disable node dragging\n        // graphicsEngine.pixiApp.renderer.plugins.interaction.off('mousemove', (event) => this.appMouseMove(event, graphicsEngine));\n        // // enable viewport dragging\n        // graphicsEngine.viewport.pause = false;\n    }\n\n}\n","import {convertMapKeysToArray} from \"./utils\";\n\nexport default class GraphicsStore {\n\n\n    constructor(dataStore, graphicsEngine) {\n        this.dataStore = dataStore;\n        this.graphicsEngine = graphicsEngine;\n        this.clearAndSetupNew();\n    }\n\n    alreadyRenderedData() {\n        // TODO fix this later\n        // const {renderedVertices, renderedEdges} = this.dataStore.getAllData()\n        // const {vertices, edges} = this.dataStore.getAllData()\n        return {\n            renderedVertices: convertMapKeysToArray(this.nodeDataToNodeGfx),\n            renderedEdges: convertMapKeysToArray(this.linkDataToLinkGfx)\n        }\n        // return {vertices, edges}\n    }\n\n    clearAndSetupNew() {\n        this.hoveredNodeGfxOriginalChildren = [];\n        this.hoveredNodeLabelGfxOriginalChildren = [];\n\n        this.hoveredlinkGfxOriginalChildren = [];\n        this.hoveredlinkLabelOriginalChildren = [];\n\n\n        this.hoveredNodeChildrenPairs = {};\n        this.nodeDataToNodeGfx = new Map();\n        this.nodeGfxToNodeData = new Map();\n        this.nodeDataToLabelGfx = new Map();\n        this.labelGfxToNodeData = new Map();\n\n\n        this.linkDataToLinkGfx = new Map();\n        this.linkGfxToLinkData = new Map();\n        this.linkDataToLabelGfx = new Map();\n        this.labelGfxToLinkData = new Map();\n\n        this.nodeDataGfxPairs = [];\n        this.linkDataGfxPairs = [];\n    }\n\n\n    getElementsToHighlightFromNodes(nodes) {\n        /*\n        This method will return the nodes and links to highlight.\n        from nodes.\n         */\n\n        const notNeighborData = this.dataStore.getNotNeighborLinks(nodes);\n        // const {verticesToRender, edgesToRender} = this.dataStore.getDataToRender()\n        const neighborsData = this.dataStore.getNeighborNodesAndLinks(nodes);\n        // let notNeighborData ={}\n        return {notNeighborData, neighborsData}\n\n    }\n\n    getElementsToHighlightFromLink(linkData) {\n        /*\n        This method will return the nodes and links to highlight\n        from link.\n         */\n\n        const neighborsData = {\n            links: [linkData],\n            nodes: [linkData.source, linkData.target]\n        }\n        let notNeighborData = {\n            notNeighborNodes: [],\n            notNeighborLinks: []\n        }\n\n        this.dataStore.getAllRawVerticesList().forEach((node) => {\n            if (!neighborsData.nodes.includes(node)) {\n                notNeighborData.notNeighborNodes.push(node);\n            }\n        })\n        this.dataStore.getAllRawEdgesList().forEach((link) => {\n            if (!neighborsData.links.includes(link)) {\n                notNeighborData.notNeighborLinks.push(link);\n            }\n        })\n\n        return {notNeighborData, neighborsData}\n\n    }\n\n\n    focusOnElements(nodes, linkData) {\n        console.log(\"=====focusOnElements\", nodes, linkData);\n        let _this = this;\n        // this.resetFocus();\n        let data = null;\n\n        if (linkData) {\n            data = this.getElementsToHighlightFromLink(linkData)\n        } else {\n            data = this.getElementsToHighlightFromNodes(nodes)\n        }\n        if (!nodes) {\n            nodes = data.neighborsData.nodes;\n        }\n        // // unhighlighting not  neighbors\n        data.notNeighborData.notNeighborLinks.forEach((linkData) => {\n            let linkGfx = _this.linkDataToLinkGfx.get(linkData.id);\n            let linkGfxLabel = _this.linkDataToLabelGfx.get(linkData.id);\n\n            linkGfx.alpha = _this.graphicsEngine.settings.LINK_UN_HIGHLIGHT_ALPHA;\n            linkGfxLabel.alpha = _this.graphicsEngine.settings.LINK_UN_HIGHLIGHT_ALPHA;\n\n            // move to front layer\n            _this.graphicsEngine.linksLayer.removeChild(linkGfx);\n            _this.graphicsEngine.frontLayer.addChild(linkGfx);\n            _this.graphicsEngine.linksLabelsLayer.removeChild(linkGfxLabel);\n            _this.graphicsEngine.frontLayer.addChild(linkGfxLabel);\n        })\n        data.notNeighborData.notNeighborNodes.forEach((node2Highlight) => {\n            let nodeContainer = _this.nodeDataToNodeGfx.get(node2Highlight.id);\n            // console.log(\"==nodeContainer\", node2Highlight, nodeContainer);\n            const labelGfx = _this.nodeDataToLabelGfx.get(node2Highlight.id);\n\n            // reset the border\n            nodeContainer.children[0].alpha = _this.graphicsEngine.settings.NODE_BORDER_UN_HIGHLIGHT_ALPHA;\n\n            // reset alpha\n            nodeContainer.alpha = _this.graphicsEngine.settings.LINK_UN_HIGHLIGHT_ALPHA;\n            labelGfx.alpha = _this.graphicsEngine.settings.LINK_UN_HIGHLIGHT_ALPHA;\n\n            // move to front layer\n            _this.graphicsEngine.nodesLayer.removeChild(nodeContainer);\n            _this.graphicsEngine.frontLayer.addChild(nodeContainer);\n            _this.graphicsEngine.nodeLabelsLayer.removeChild(labelGfx);\n            _this.graphicsEngine.frontLayer.addChild(labelGfx);\n\n        });\n\n\n        // highlighting neighbors\n        data.neighborsData.links.forEach((linkData) => {\n            let linkGfx = _this.linkDataToLinkGfx.get(linkData.id);\n            let linkGfxLabel = _this.linkDataToLabelGfx.get(linkData.id);\n\n            linkGfx.alpha = _this.graphicsEngine.settings.LINK_DEFAULT_ALPHA;\n            linkGfxLabel.alpha = _this.graphicsEngine.settings.LINK_DEFAULT_ALPHA;\n\n            // move to front layer\n            _this.graphicsEngine.linksLayer.removeChild(linkGfx);\n            _this.graphicsEngine.frontLayer.addChild(linkGfx);\n            _this.graphicsEngine.linksLabelsLayer.removeChild(linkGfxLabel);\n            _this.graphicsEngine.frontLayer.addChild(linkGfxLabel);\n        })\n        data.neighborsData.nodes.forEach((node2Highlight) => {\n            let nodeContainer = _this.nodeDataToNodeGfx.get(node2Highlight.id);\n            // console.log(\"==nodeContainer\", node2Highlight, nodeContainer);\n            const labelGfx = _this.nodeDataToLabelGfx.get(node2Highlight.id);\n\n            // reset the border\n            nodeContainer.children[0].alpha = _this.graphicsEngine.settings.NODE_BORDER_UN_HIGHLIGHT_ALPHA;\n\n            // reset alpha\n            nodeContainer.alpha = _this.graphicsEngine.settings.LINK_DEFAULT_ALPHA;\n            labelGfx.alpha = _this.graphicsEngine.settings.LINK_DEFAULT_ALPHA;\n\n            // move to front layer\n            _this.graphicsEngine.nodesLayer.removeChild(nodeContainer);\n            _this.graphicsEngine.frontLayer.addChild(nodeContainer);\n            _this.graphicsEngine.nodeLabelsLayer.removeChild(labelGfx);\n            _this.graphicsEngine.frontLayer.addChild(labelGfx);\n\n        });\n\n        nodes.forEach((node) => {\n            // let nodeContainer = _this.nodeDataToNodeGfx.get(node.id);\n            // console.log(\"==nodeContainer\", node, nodeContainer);\n\n            let nodeContainer = _this.nodeDataToNodeGfx.get(node.id);\n            console.log(\"==nodeContainer\", node, nodeContainer);\n            if (nodeContainer) {\n                // TODO - check why nodeContainer is undefined sometimes.\n                nodeContainer.children[0].alpha = _this.graphicsEngine.settings.NODE_BORDER_HIGHLIGHT_ALPHA;\n            }\n            const labelGfx = _this.nodeDataToLabelGfx.get(node.id);\n\n            nodeContainer.alpha = _this.graphicsEngine.settings.LINK_DEFAULT_ALPHA;\n            labelGfx.alpha = _this.graphicsEngine.settings.LINK_DEFAULT_ALPHA;\n\n            // move to front layer\n            _this.graphicsEngine.nodesLayer.removeChild(nodeContainer);\n            _this.graphicsEngine.frontLayer.addChild(nodeContainer);\n            _this.graphicsEngine.nodeLabelsLayer.removeChild(labelGfx);\n            _this.graphicsEngine.frontLayer.addChild(labelGfx);\n\n\n            // move to front layer\n            // _this.graphicsEngine.nodesLayer.removeChild(nodeContainer);\n            // _this.graphicsEngine.frontLayer.addChild(nodeContainer);\n        });\n\n\n    }\n\n    //\n    highlightThisNodeAlso(nodeId) {\n        const nodeGfx = this.nodeDataToNodeGfx.get(nodeId);\n        nodeGfx.children[0].alpha = this.graphicsEngine.settings.NODE_BORDER_HIGHLIGHT_ALPHA;\n\n    }\n\n    resetFocus() {\n        // reset everything to normal\n        let _this = this;\n        // const\n\n        console.log(\"++reset focus\")\n        const {verticesToRender, edgesToRender} = this.dataStore.getDataToRender()\n        console.log(\"++\", verticesToRender, edgesToRender)\n\n        // TODO - review code, do we need forEach on getAllRawEdgesList instead of iterating over all\n        //  _this.linkDataToLinkGfx and _this.linkDataToLabelGfx\n        edgesToRender.forEach((link) => {\n            const linkGfx = _this.linkDataToLinkGfx.get(link.id);\n            const linkLabelGfx = _this.linkDataToLabelGfx.get(link.id);\n\n            if (linkGfx) {\n                linkGfx.alpha = _this.graphicsEngine.settings.LINK_DEFAULT_ALPHA;\n                linkLabelGfx.alpha = _this.graphicsEngine.settings.LINK_DEFAULT_ALPHA;\n                // // move back from front layer\n                _this.graphicsEngine.frontLayer.removeChild(linkGfx);\n                _this.graphicsEngine.linksLayer.addChild(linkGfx);\n                _this.graphicsEngine.frontLayer.removeChild(linkLabelGfx);\n                _this.graphicsEngine.linksLabelsLayer.addChild(linkLabelGfx);\n            }\n\n        })\n\n        verticesToRender.forEach((node) => {\n            const nodeGfx = _this.nodeDataToNodeGfx.get(node.id);\n            const labelGfx = _this.nodeDataToLabelGfx.get(node.id);\n\n            // move back from front layer\n            _this.graphicsEngine.frontLayer.removeChild(nodeGfx);\n            _this.graphicsEngine.nodesLayer.addChild(nodeGfx);\n            _this.graphicsEngine.frontLayer.removeChild(labelGfx);\n            _this.graphicsEngine.nodeLabelsLayer.addChild(labelGfx);\n\n            nodeGfx.alpha = _this.graphicsEngine.settings.NODE_DEFAULT_ALPHA;\n            labelGfx.alpha = _this.graphicsEngine.settings.NODE_DEFAULT_ALPHA;\n            nodeGfx.children[0].alpha = _this.graphicsEngine.settings.NODE_BORDER_UN_HIGHLIGHT_ALPHA;\n\n            // // // clearAndSetupNew hover effect\n\n\n            // const nodeGfxChildren = nodeGfx.children;\n            // for (let child of nodeGfxChildren) {\n            //     if (_this.hoveredNodeChildrenPairs[node.id]\n            //         && !_this.hoveredNodeChildrenPairs[node.id].includes(child)) {\n            //         nodeGfx.removeChild(child);\n            //     }\n            // }\n\n        })\n\n    }\n\n    updateNodePairs(newNodeDataGfxPairs) {\n\n        newNodeDataGfxPairs.forEach((nodeDataPair) => {\n            this.nodeDataGfxPairs.push(nodeDataPair)\n        })\n\n        // create lookup tables\n        // eslint-disable-next-line no-unused-vars\n        this.nodeDataToNodeGfx = new Map(this.nodeDataGfxPairs.map(([nodeData, nodeGfx, labelGfx]) => [nodeData.id, nodeGfx]));\n        // eslint-disable-next-line no-unused-vars\n        this.nodeGfxToNodeData = new Map(this.nodeDataGfxPairs.map(([nodeData, nodeGfx, labelGfx]) => [nodeGfx, nodeData.id]));\n        // eslint-disable-next-line no-unused-vars\n        this.nodeDataToLabelGfx = new Map(this.nodeDataGfxPairs.map(([nodeData, nodeGfx, labelGfx]) => [nodeData.id, labelGfx]));\n        // eslint-disable-next-line no-unused-vars\n        this.labelGfxToNodeData = new Map(this.nodeDataGfxPairs.map(([nodeData, nodeGfx, labelGfx]) => [labelGfx, nodeData.id]));\n        // add Neighbours map also.\n    }\n\n    updateLinkPairs(newLinkDataGfxPairs) {\n\n        newLinkDataGfxPairs.forEach((linkDataPair) => {\n            this.linkDataGfxPairs.push(linkDataPair)\n        })\n\n\n        // create lookup tables\n        // eslint-disable-next-line no-unused-vars\n        this.linkDataToLinkGfx = new Map(this.linkDataGfxPairs.map(([linkData, linkGfx, labelGfx]) => [linkData.id, linkGfx]));\n        // eslint-disable-next-line no-unused-vars\n        this.linkGfxToLinkData = new Map(this.linkDataGfxPairs.map(([linkData, linkGfx, labelGfx]) => [linkGfx, linkData.id]));\n        // eslint-disable-next-line no-unused-vars\n        this.linkDataToLabelGfx = new Map(this.linkDataGfxPairs.map(([linkData, linkGfx, labelGfx]) => [linkData.id, labelGfx]));\n        // eslint-disable-next-line no-unused-vars\n        this.labelGfxToLinkData = new Map(this.linkDataGfxPairs.map(([linkData, linkGfx, labelGfx]) => [labelGfx, linkData.id]));\n        // add Neighbours map also.\n    }\n\n\n}\n","import * as PIXI from 'pixi.js-legacy'\n// import * as PIXI from 'pixi.js';\nimport {Viewport} from 'pixi-viewport'\n// import {colorToNumber} from \"../canvas-utils\";\n// import FontFaceObserver from \"fontfaceobserver\";\nimport EventStore from \"./events\";\nimport GraphicsStore from \"../../core/graphics-store\";\nimport {colorToNumber} from \"../canvas-utils\";\nimport {LightenDarkenColor} from \"../../core/utils\";\n\nexport default class GraphicsEngine {\n\n\n    /*\n\n\n\n    let graphicsEngine = new GraphicsEngine(settings, dataStore, onElementSelected);\n\n\n\n\n     */\n\n    renderRequestId = undefined;\n    // clickedNodeData = undefined;\n    isRendering = undefined;\n    nodeMenuEl = undefined;\n    isFirstLoaded = true\n\n    //\n    // loadFont(fontFamily) {\n    //     // new FontFaceObserver(fontFamily).load();\n    // }\n\n    constructor(canvasElem, nodeMenuEl, settings, dataStore, onElementSelected) {\n        // let _this = this;\n        this.settings = settings;\n        this.dataStore = dataStore;\n        this.graphicsStore = new GraphicsStore(this.dataStore, this);\n\n        this.nodeMenuEl = nodeMenuEl;\n        this.eventStore = new EventStore(nodeMenuEl);\n        this.onElementSelected = onElementSelected; // used to send back any message to react component.\n\n\n        this.nodeLabels = Object.assign({}, JSON.parse(localStorage.getItem('nodeLabels')));\n        this.linkLabels = Object.assign({}, JSON.parse(localStorage.getItem('linkLabels')));\n        // this.loadFont(this.settings.ICON_FONT_FAMILY);\n        //\n        // new FontFaceObserver(this.settings.ICON_FONT_FAMILY).load();\n\n        // create PIXI application\n        this.pixiApp = new PIXI.Application({\n            width: this.settings.SCREEN_WIDTH,\n            height: this.settings.SCREEN_HEIGHT,\n            resolution: this.settings.RESOLUTION,\n            transparent: true,\n            // backgroundColor: 0xFFFFFF,\n            antialias: true,\n            autoStart: false, // disable automatic rendering by ticker, render manually instead, only when needed\n            forceCanvas: true,\n            autoDensity: true\n        });\n        this.pixiApp.view.addEventListener('contextmenu', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            return false;\n        });\n        canvasElem.appendChild(this.pixiApp.view);\n\n        this.viewport = new Viewport({\n            screenWidth: this.settings.SCREEN_WIDTH,\n            screenHeight: this.settings.SCREEN_HEIGHT,\n            worldWidth: this.settings.WORLD_WIDTH,\n            worldHeight: this.settings.WORLD_HEIGHT,\n            interaction: this.pixiApp.renderer.plugins.interaction\n        });\n        this.viewport.clampZoom({\n            minScale: this.settings.ZOOM_CLAMP_MIN_SCALE,\n            maxScale: this.settings.ZOOM_CLAMP_MAX_SCALE\n        })\n\n        this.viewport.on('frame-end', () => {\n            if (this.viewport.dirty) {\n                this.requestRender();\n                this.viewport.dirty = false;\n            }\n        });\n\n\n        // this.viewport.on('drag-start', (e) => {\n        //     console.log(\"viewport drag-start\", e);\n        // });\n\n        //\n        // this.viewport.on('moved', (e) => {\n        //     console.log(\"viewport moved\", e);\n        //\n        //\n        //     if (e.viewport.lastViewport) {\n        //         // _this.dataStore.selectedElementData\n        //         const selectedNodeData = this.eventStore.lastSelectedNodeData;\n        //         if (selectedNodeData) {\n        //             const nodeGfx = _this.graphicsStore.nodeDataToNodeGfx.get(selectedNodeData.id);\n        //             console.log(\"======nodeGfx\", nodeGfx.x, nodeGfx.y, nodeGfx);\n        //             if (nodeGfx) {\n        //                 _this.moveNodeMenuToPoint(nodeGfx.x, nodeGfx.y);\n        //             }\n        //\n        //         }\n        //\n        //     }\n        //\n        //     // // get the position of the node that is selected.\n        //\n        // });\n\n\n        this.setupCanvas();\n        this.preventWheelScrolling();\n        this.requestRender();\n\n    }\n\n    setNodeElem(nodeMenuEl) {\n        this.nodeMenuEl = nodeMenuEl;\n    }\n\n    // moveNodeMenuToPoint(x, y) {\n    //     console.log(\"moveNodeMenuToPoint\", x, y);\n    //     this.nodeMenuEl.style.left = x + \"px\";\n    //     this.nodeMenuEl.style.top = y + \"px\";\n    //\n    // }\n\n    setupCanvas() {\n        // create PIXI viewport\n\n        this.pixiApp.stage.addChild(this.viewport);\n        this.viewport\n            .drag()\n            .pinch()\n            .wheel()\n            .decelerate();\n\n\n        // adding layers for nodes and links\n        this.nodeMenuLayer = new PIXI.Container();\n        this.viewport.addChild(this.nodeMenuLayer);\n\n        this.linksLayer = new PIXI.Container();\n        this.viewport.addChild(this.linksLayer);\n\n        this.linksLabelsLayer = new PIXI.Container();\n        this.viewport.addChild(this.linksLabelsLayer);\n\n        this.nodesLayer = new PIXI.Container();\n        this.viewport.addChild(this.nodesLayer);\n\n        this.nodeLabelsLayer = new PIXI.Container();\n        this.viewport.addChild(this.nodeLabelsLayer);\n\n        this.frontLayer = new PIXI.Container();\n        this.viewport.addChild(this.frontLayer);\n\n    }\n\n    requestRender = () => {\n        let _this = this;\n        if (this.renderRequestId) {\n            return;\n        }\n        this.renderRequestId = window.requestAnimationFrame(() => {\n            _this.pixiApp.render();\n            _this.renderRequestId = undefined;\n        });\n    }\n\n    zoom2Point(x, y) {\n        this.viewport.center = new PIXI.Point(x, y);\n        this.viewport.fit(true, this.settings.WORLD_WIDTH / 4, this.settings.WORLD_HEIGHT / 4)\n        this.viewport.setZoom(1, true);\n        this.eventStore.hideMenu();\n    }\n\n    zoom2Node(nodeId) {\n        const nodeContainer = this.graphicsStore.nodeDataToNodeGfx.get(nodeId);\n        this.zoom2Point(nodeContainer.x, nodeContainer.y)\n    }\n\n\n    getNodeBorderGfx(nodeContainer) {\n        return nodeContainer.children[0];\n    }\n\n    highlightNodeById(nodeId) {\n        const nodeContainer = this.graphicsStore.nodeDataToNodeGfx.get(nodeId);\n        this.getNodeBorderGfx(nodeContainer).alpha = this.settings.NODE_BORDER_HIGHLIGHT_ALPHA;\n    }\n\n    unHighlightNodeById(nodeId) {\n        const nodeContainer = this.graphicsStore.nodeDataToNodeGfx.get(nodeId);\n        this.getNodeBorderGfx(nodeContainer).alpha = this.settings.NODE_BORDER_UN_HIGHLIGHT_ALPHA;\n    }\n\n    resetViewport() {\n        this.zoom2Point(this.settings.WORLD_WIDTH / 4, this.settings.WORLD_HEIGHT / 4)\n        this.viewport.setZoom(0.5, true);\n        // this.viewport.center = new PIXI.Point(this.settings.WORLD_WIDTH / 4, this.settings.WORLD_HEIGHT / 4);\n        // this.viewport.fit(true, this.settings.WORLD_WIDTH / 4, this.settings.WORLD_HEIGHT / 4)\n        // this.viewport.setZoom(0.5, true);\n        // this.nodeMenuEl.style.display = \"none\";\n\n    }\n\n    // getNodeLabel(nodeData) {\n    //     console.log(\"&&&&\", nodeData);\n    //     console.log(\"&&&&\", nodeData.meta.shapeOptions);\n    //     let labelString = null;\n    //     if (nodeData.meta.shapeOptions.labelPropertyKey === \"id\") {\n    //         labelString = nodeData.id;\n    //     } else {\n    //         labelString = nodeData.properties[nodeData.meta.shapeOptions.labelPropertyKey];\n    //     }\n    //     if (!labelString) {\n    //         labelString = nodeData.id;\n    //     }\n    //     return labelString;\n    // }\n\n\n    // getLinkLabel(linkData) {\n    //     return linkData.source.id + \"-\" + linkData.target.id;\n    // }\n\n//\n//     background(bgSize, inputSprite, type, forceSize) {\n//         /*\n//         https://gist.github.com/ClickSimply/581823db9cdc8d94ed3f78c1a548f50d\n// *  PixiJS Background Cover/Contain Script\n// *   Returns object\n// * . {\n// *       container: PixiJS Container\n// * .     doResize: Resize callback\n// *   }\n// *   ARGS:\n// *   bgSize: Object with x and y representing the width and height of background. Example: {x:1280,y:720}\n// *   inputSprite: Pixi Sprite containing a loaded image or other asset.  Make sure you preload assets into this sprite.\n// *   type: String, either \"cover\" or \"contain\".\n// *   forceSize: Optional object containing the width and height of the source sprite, example:  {x:1280,y:720}\n// */\n//         var sprite = inputSprite;\n//         var bgContainer = new PIXI.Container();\n//         var mask = new PIXI.Graphics().beginFill(0x8bc5ff).drawRect(0, 0, bgSize.x, bgSize.y).endFill();\n//         bgContainer.mask = mask;\n//         bgContainer.addChild(mask);\n//         bgContainer.addChild(sprite);\n//\n//         function resize() {\n//             var sp = {x: sprite.width, y: sprite.height};\n//             if (forceSize) sp = forceSize;\n//             var winratio = bgSize.x / bgSize.y;\n//             var spratio = sp.x / sp.y;\n//             var scale = 1;\n//             var pos = new PIXI.Point(0, 0);\n//             if (type === 'cover' ? (winratio > spratio) : (winratio < spratio)) {\n//                 //photo is wider than background\n//                 scale = bgSize.x / sp.x;\n//                 pos.y = -((sp.y * scale) - bgSize.y) / 2\n//             } else {\n//                 //photo is taller than background\n//                 scale = bgSize.y / sp.y;\n//                 pos.x = -((sp.x * scale) - bgSize.x) / 2\n//             }\n//\n//             sprite.scale = new PIXI.Point(scale, scale);\n//             sprite.position = pos;\n//         }\n//\n//         resize();\n//\n//         return {\n//             container: bgContainer,\n//             doResize: resize\n//         }\n//     }\n\n    createNode(nodeData) {\n        const _this = this;\n        const {\n            NODE_HIT_RADIUS,\n            // NODE_RADIUS,\n            LABEL_FONT_FAMILY, LABEL_FONT_SIZE,\n            LABEL_X_PADDING,\n            LABEL_Y_PADDING,\n            NODE_SELECTED_STROKE_WIDTH,\n            NODE_FOCUSED_NODE_BORDER_COLOR\n            // ICON_TEXT,\n            // ICON_FONT_FAMILY,\n            // ICON_FONT_SIZE\n        } = this.settings;\n\n\n        /*\n\n        meta:\nbgImagePropertyKey: undefined\nbgImageUrl: undefined\nlabelOptions:\nlabelColor: \"#dddddd\"\nlabelText: \"Hilda\"\nshowLabel: false\n__proto__: Object\nnodeShape: \"circle\"\nshapeOptions:\nfillColor: \"#406fbf\"\ninShapeHTML: \"Hilda\"\nradius: 24\nstrokeColor: \"#efefef\"\nstrokeWidth: 3\nlabelColor: \"#dddddd\"\n         */\n\n\n        // console.log(\"====nodeData>>>\", nodeData)\n        const nodeContainer = new PIXI.Container();\n        nodeContainer.x = nodeData.x;\n        nodeContainer.y = nodeData.y;\n        nodeContainer.interactive = true;\n        nodeContainer.buttonMode = true;\n        nodeContainer.hitArea = new PIXI.Circle(0, 0, nodeData.meta.shapeOptions.radius);\n\n        // console.log(\"event.currentTarget\", )\n        nodeContainer.on('rightdown', (event) => _this.eventStore.onNodeRightClicked(_this, this.dataStore.getVertex(_this.graphicsStore.nodeGfxToNodeData.get(event.currentTarget)), nodeContainer, event));\n        nodeContainer.on('mousedown', (event) => _this.eventStore.onNodeClicked(_this, this.dataStore.getVertex(_this.graphicsStore.nodeGfxToNodeData.get(event.currentTarget)), nodeContainer, event));\n        nodeContainer.on('mouseover', (event) => _this.eventStore.onNodeMouseOver(_this, this.dataStore.getVertex(_this.graphicsStore.nodeGfxToNodeData.get(event.currentTarget)), nodeContainer));\n        nodeContainer.on('mouseout', (event) => _this.eventStore.onNodeMouseOut(_this, this.dataStore.getVertex(_this.graphicsStore.nodeGfxToNodeData.get(event.currentTarget)), nodeContainer));\n        nodeContainer.on('mouseup', (event) => this.eventStore.onNodeUnClicked(_this, this.dataStore.getVertex(_this.graphicsStore.nodeGfxToNodeData.get(event.currentTarget)), nodeContainer));\n        nodeContainer.on('mouseupoutside', (event) => this.eventStore.onNodeUnClicked(_this, this.dataStore.getVertex(_this.graphicsStore.nodeGfxToNodeData.get(event.currentTarget)), nodeContainer));\n\n\n        // console.log(\"nodeData======\", nodeData.label, nodeData.meta.labelOptions.labelText, nodeData)\n\n\n        const circleSelectedBorder = new PIXI.Graphics();\n        circleSelectedBorder.x = 0;\n        circleSelectedBorder.y = 0;\n        circleSelectedBorder.lineStyle(NODE_SELECTED_STROKE_WIDTH, NODE_FOCUSED_NODE_BORDER_COLOR);\n        circleSelectedBorder.drawCircle(0, 0, nodeData.meta.shapeOptions.radius);\n        circleSelectedBorder.alpha = 0;\n        nodeContainer.addChild(circleSelectedBorder);\n\n        const circle = new PIXI.Graphics();\n        circle.x = 0;\n        circle.y = 0;\n        circle.beginFill(nodeData.meta.shapeOptions.fillColor);\n        circle.drawCircle(0, 0, nodeData.meta.shapeOptions.radius);\n        nodeContainer.addChild(circle);\n\n        const circleBorder = new PIXI.Graphics();\n        circleBorder.x = 0;\n        circleBorder.y = 0;\n        circleBorder.lineStyle(nodeData.meta.shapeOptions.strokeWidth, nodeData.meta.shapeOptions.strokeColor);\n        circleBorder.drawCircle(0, 0, nodeData.meta.shapeOptions.radius);\n        nodeContainer.addChild(circleBorder);\n\n        // const icon = new PIXI.Text(ICON_TEXT, {\n        //     fontFamily: ICON_FONT_FAMILY,\n        //     fontSize: ICON_FONT_SIZE,\n        //     fill: colorToNumber(nodeData.meta.shapeOptions.labelColor)\n        // });\n        // icon.x = 0;\n        // icon.y = 0;\n        // icon.anchor.set(0.5);\n        // nodeContainer.addChild(icon);\n\n        const nodeLabelContainer = new PIXI.Container();\n        nodeLabelContainer.x = nodeData.x;\n        nodeLabelContainer.y = nodeData.y;\n        nodeLabelContainer.interactive = true;\n        nodeLabelContainer.buttonMode = true;\n\n        const nodeLabelText = new PIXI.Text(nodeData.meta.labelOptions.labelText, {\n            fontFamily: LABEL_FONT_FAMILY,\n            fontSize: LABEL_FONT_SIZE,\n            fill: nodeData.meta.labelOptions.labelColor\n        });\n        nodeLabelText.resolution = this.settings.LABEL_RESOLUTION;\n\n        nodeLabelText.x = LABEL_X_PADDING;\n        nodeLabelText.y = NODE_HIT_RADIUS + LABEL_Y_PADDING;\n        nodeLabelText.anchor.set(0.5, 0);\n\n        nodeLabelContainer.addChild(nodeLabelText);\n        // nodeLabelContainer.alpha = 0.5;\n        return {nodeContainer, nodeLabelContainer}\n    }\n\n\n    createNodes(nodes) {\n        // create node graphics\n        let _this = this;\n        let newNodes = [];\n        nodes.forEach(nodeData => {\n            const nodeGfx = _this.graphicsStore.nodeDataToNodeGfx.get(nodeData.id);\n            if (!nodeGfx) {\n                newNodes.push(nodeData);\n            }\n        })\n        return newNodes.map((nodeData) => {\n\n            const nodeGfx = _this.graphicsStore.nodeDataToNodeGfx.get(nodeData.id);\n            if (!nodeGfx) {\n                // create node if doesn't exist\n                const {nodeContainer, nodeLabelContainer} = this.createNode(nodeData);\n                this.nodesLayer.addChild(nodeContainer);\n                this.nodeLabelsLayer.addChild(nodeLabelContainer);\n                return [nodeData, nodeContainer, nodeLabelContainer];\n            }\n\n        });\n\n    }\n\n\n    clearCanvas() {\n\n        this.clearNodeCanvas();\n        this.clearLinkCanvas();\n        while (this.frontLayer.firstChild) {\n            this.frontLayer.removeChild(this.frontLayer.firstChild);\n        }\n    }\n\n    clearNodeCanvas() {\n\n        while (this.nodesLayer.firstChild) {\n            console.log(\"===removing NodeCanvas\");\n            this.nodesLayer.removeChild(this.nodesLayer.firstChild);\n        }\n        while (this.nodeLabelsLayer.firstChild) {\n            this.nodeLabelsLayer.removeChild(this.nodeLabelsLayer.firstChild);\n        }\n\n\n    }\n\n    clearLinkCanvas() {\n        // console.log(\"this.dataStore.linkGraphicsArray.\", this.dataStore.linkGraphicsArray.length)\n        while (this.dataStore.linkGraphicsArray.length > 0) {\n            let linkGraphics = this.dataStore.linkGraphicsArray.pop();\n            try {\n                linkGraphics.clear();\n                this.linksLayer.removeChild(linkGraphics);\n                linkGraphics.destroy();\n            } catch (e) {\n                console.log(\"Failed to clear link graphics with error\", e);\n            }\n        }\n        while (this.dataStore.linkLabelGraphicsArray.length > 0) {\n            let linkLabelGraphics = this.dataStore.linkLabelGraphicsArray.pop();\n            try {\n                linkLabelGraphics.clear();\n                this.linksLabelsLayer.removeChild(linkLabelGraphics);\n                linkLabelGraphics.destroy();\n            } catch (e) {\n                console.log(\"Failed to clear link graphics with error\", e);\n            }\n        }\n    }\n\n\n    linearDistanceBetweenTwoPoints(x1, y1, x2, y2) {\n        return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    }\n\n    getPointForArrowAtPointWithPadding(x1, y1, x2, y2, padding) {\n\n        const d = this.linearDistanceBetweenTwoPoints(x1, y1, x2, y2)\n        const dt = d - padding;\n        //ratio of distances\n        let t = dt / d;\n        const x = (1 - t) * x1 + t * x2;\n        const y = (1 - t) * y1 + t * y2;\n        return {x, y};\n\n    }\n\n    // getTrianglePointsTan\n\n\n    getNormalAndTangentForTwoPoints(x1, y1, x2, y2, sameIndex) {\n        // x1, y1 is the first point and x2, y2 is the second point.\n\n        console.log(\"I might use sameIndex someday\", sameIndex)\n\n        let normal = [\n            -(y2 - this.settings.NODE_RADIUS),\n            x2 - this.settings.NODE_RADIUS,\n        ]\n\n\n        const l = Math.sqrt(normal[0] ** 2 + normal[1] ** 2);\n        normal[0] /= l;\n        normal[1] /= l;\n\n        const tangent = [\n            -normal[1] * 45,\n            normal[0] * 45\n        ]\n\n        normal[0] *= 30;\n        normal[1] *= 30;\n        return {normal, tangent,}\n    }\n\n\n    createTriangle(linkData, arrowColor) {\n        // 4d. Create a triangle https://stackoverflow.com/a/58573859/3448851\n        let triangle = new PIXI.Graphics();\n        triangle.lineStyle(1, arrowColor, 1);\n        triangle.beginFill(arrowColor, 1)\n        // first, let's compute normalized vector for our link:\n        let dx = linkData.target.x - linkData.source.x;\n        let dy = linkData.target.y - linkData.source.y;\n        let l = Math.sqrt(dx * dx + dy * dy);\n\n        if (l === 0) return; // if length is 0 - can't render arrows\n\n        // This is our normal vector. It describes direction of the graph\n        // link, and has length == 1:\n        let nx = dx / l;\n        let ny = dy / l;\n\n        // Now let's draw the arrow:\n        let arrowLength = 3 * 2;       // Length of the arrow\n        let arrowWingsLength = 2.5 * 2;  // How far arrow wings are from the link?\n\n        // This is where arrow should end. We do `(l - NODE_WIDTH)` to\n        // make sure it ends before the node UI element.\n        let ex = linkData.source.x + nx * (l - linkData.target.meta.shapeOptions.radiusBuffered);\n        let ey = linkData.source.y + ny * (l - linkData.target.meta.shapeOptions.radiusBuffered);\n\n        // Offset on the graph link, where arrow wings should be\n        let sx = linkData.source.x + nx * (l - linkData.target.meta.shapeOptions.radiusBuffered - arrowLength);\n        let sy = linkData.source.y + ny * (l - linkData.target.meta.shapeOptions.radiusBuffered - arrowLength);\n\n        // orthogonal vector to the link vector is easy to compute:\n        let topX = -ny;\n        let topY = nx;\n\n        // Let's draw the arrow:\n        triangle.moveTo(ex, ey);\n        triangle.lineTo(sx + topX * arrowWingsLength, sy + topY * arrowWingsLength);\n        // triangle.moveTo(ex, ey);\n        triangle.lineTo(sx - topX * arrowWingsLength, sy - topY * arrowWingsLength);\n        triangle.lineTo(ex, ey);\n        triangle.endFill();\n        return triangle;\n    }\n\n\n    createLink(linkData) {\n\n        /*\n\n        refer for curved lines with arrows\n        https://stackoverflow.com/questions/11808860/how-to-place-arrow-head-triangles-on-svg-lines\n         */\n        // console.log(\"=======linkData\", linkData.meta.shapeOptions.strokeColor, linkData);\n\n\n        const linkColor = linkData.meta.shapeOptions.strokeColor;\n        const {LINK_DEFAULT_LABEL_FONT_SIZE, LABEL_FONT_FAMILY, LINK_DEFAULT_WIDTH} = this.settings;\n        let _this = this;\n        let linkGfx = new PIXI.Graphics();\n        let linkGfxLabel = new PIXI.Graphics();\n        linkGfx.lineStyle(Math.sqrt(LINK_DEFAULT_WIDTH), linkColor);\n\n        // draw straight line with arrow and label if avaiable!\n        linkGfx.moveTo(linkData.source.x, linkData.source.y);\n        linkGfx.lineTo(linkData.target.x, linkData.target.y);\n\n        const strokeColor = linkData.meta.shapeOptions.strokeColorHex;\n        const arrowColor = colorToNumber(LightenDarkenColor(strokeColor, -30));\n\n        const triangle = this.createTriangle(linkData, arrowColor);\n        linkGfx.addChild(triangle);\n\n        if (linkData.meta.labelOptions.labelText) {\n            const linkLabelText = new PIXI.Text(linkData.meta.labelOptions.labelText, {\n                fontFamily: LABEL_FONT_FAMILY,\n                fontSize: LINK_DEFAULT_LABEL_FONT_SIZE,\n                fill: _this.settings.LINK_DEFAULT_LABEL_COLOR\n            });\n            linkLabelText.resolution = this.settings.LABEL_RESOLUTION;\n            // set label in the middle\n            linkLabelText.x = (linkData.source.x + linkData.target.x) / 2 - 10;\n            linkLabelText.y = (linkData.source.y + linkData.target.y) / 2 - 10;\n            // const sameIndex = 1;\n            linkLabelText.anchor.set(0.5, 0);\n            linkGfxLabel.addChild(linkLabelText)\n        }\n\n\n        /*\n        multiple links issue can be fixed here\n\n         */\n\n        /*\n        if (sameIndex === 1) {\n            linkGfx.moveTo(linkData.source.x, linkData.source.y);\n\n            linkGfx.lineTo(linkData.target.x, linkData.target.y);\n            linkGfx.beginFill(linkColor, 1);\n\n\n            // triangle for the arrow\n            //  The distance between Start and End point is given by\n            // xt, yt are the coordinates at a distance dt from source.\n            const t2 = this.getPointForArrowAtPointWithPadding(linkData.source.x, linkData.source.y,\n                linkData.target.x, linkData.target.y, this.settings.NODE_RADIUS + 1)\n            // const d = Math.sqrt((linkData.target.x - linkData.source.x) ** 2 + (linkData.target.y - linkData.source.y) ** 2)\n\n            // points for triangle with points t1, t2(point touching to circle), t3\n            const t1 = this.getPointForArrowAtPointWithPadding(\n                linkData.target.x + normal[0] + tangent[0],\n                linkData.target.y + normal[1] + tangent[1],\n                t2.x, t2.y, 6\n            )\n            const t3 = this.getPointForArrowAtPointWithPadding(\n                linkData.target.x - normal[0] + tangent[0],\n                linkData.target.y - normal[1] + tangent[1],\n                t2.x, t2.y\n                , 6\n            )\n\n            linkGfx.lineStyle(1, linkColor, 1, .5)\n                .moveTo(t1.x, t1.y)\n            linkGfx.lineTo(t2.x, t2.y)\n                .lineTo(t3.x, t3.y)\n                .lineTo(t1.x, t1.y)\n                .closePath()\n\n\n        }\n        */\n\n        /*\n                else {\n                    linkGfx.moveTo(linkData.source.x, linkData.source.y);\n\n                    console.log(\"linkData=====\", linkData, nextPoint.x, nextPoint.y)\n\n\n\n                    linkGfx\n                        .bezierCurveTo(linkData.source.x, linkData.source.y,\n                            nextPoint.x + 50, nextPoint.y + 50,\n                            linkData.target.x, linkData.target.y)\n\n                    // let linkCurveGfx = new PIXI.Graphics()\n                    // linkCurveGfx.lineStyle(10, 0xff0000, 1)\n                    //\n                    // linkCurveGfx.moveTo(linkData.source.x, linkData.source.y);\n                    //\n                    // linkCurveGfx.beginFill(this.settings.LINK_DEFAULT_COLOR, 1);\n                    // linkCurveGfx.arcTo(\n                    //     linkData.source.x, linkData.source.y, linkData.target.x, linkData.target.y, linkData.sameIndex * 600\n                    // )\n                    console.log(\"+++\", linkData.source.x, linkData.source.y, linkData.target.x, linkData.target.y, linkData.sameIndex * 60)\n                    // linkCurveGfx.lineStyle(10,0xff0000, 0.5)\n                    // linkCurveGfx.lineTo(200,200)\n\n                    //             let linkCurveGfx = new PIXI.Graphics()\n                    // linkCurveGfx.lineStyle(10,0x000000)\n                    //\n                    // linkCurveGfx.moveTo(0,0)\n                    // linkCurveGfx.arcTo(0,100,200,200, 600)\n                    // linkCurveGfx.lineStyle(10,0xff0000, 0.5)a\n                    // linkCurveGfx.lineTo(200,200)\n\n                    // linkGfx.addChild(linkCurveGfx)\n\n\n                    //\n                    // linkGfx.beginFill(this.settings.LINK_DEFAULT_COLOR, 1);\n                    // // triangle for the arrow\n                    // linkGfx.lineStyle(1, this.settings.LINK_DEFAULT_COLOR, 1, .5)\n                    //     .moveTo(t1.x, t1.y)\n                    // linkGfx.lineTo(t2.x, t2.y)\n                    //     .lineTo(t3.x, t3.y)\n                    //     .lineTo(t1.x, t1.y)\n\n                    // set label at the next point\n                    linkLabelText.x = (linkData.source.x + linkData.target.x) / 2 - 10 * sameIndex;\n                    linkLabelText.y = (linkData.source.y + linkData.target.y) / 2 - 10 * sameIndex;\n                    // linkLabelText.x = nextPoint.x;\n                    // linkLabelText.y = nextPoint.y;\n\n\n                }\n        */\n\n        // )\n        // linkGfx.buttonMode = true;\n        linkGfx.endFill();\n\n\n        let interval = setInterval(() => {\n            if (linkGfx.geometry && linkGfx.geometry.graphicsData.length > 0) {\n                let points = linkGfx.geometry.graphicsData[0].shape.points;\n                // console.log(\"points interval\", points.length, points);\n                if (points.length > 0) {\n                    linkGfx.interactive = true;\n                    linkGfx.buttonMode = true;\n\n                    if (points.length === 4) {\n                        // this is straight line; so making 2 point into 4 points to create a rectangle\n                        // structure to create hitArea around the link connecting the nodes in straight line.\n                        // const x1, y1, x2, y2 = points[0], points[1], points[2], points[3];\n                        const x1 = points[0];\n                        const y1 = points[1];\n                        const x2 = points[2];\n                        const y2 = points[3];\n                        // console.log(\"x1-y1\", x1, y1)\n                        points = [x1 + 3, y1 + 3, x2 + 3, y2 + 3, x2 - 3, y2 - 3, x1 - 3, y1 - 3]\n                    }\n\n                    linkGfx.hitArea = new PIXI.Polygon(points);\n                    // linkGfx.drawPolygon(points);\n                    linkGfx.endFill();\n                    linkGfxLabel.endFill();\n\n                    // linkGfx.click = mouseover;\n                    linkGfx.on(\"mouseover\", (mouseData) => _this.eventStore.onLinkMouseOver(_this, linkData, linkGfx, mouseData));\n                    linkGfx.on(\"mouseout\", (mouseData) => _this.eventStore.onLinkMouseOut(_this, linkData, linkGfx, mouseData));\n                    linkGfx.on('mousedown', event => _this.eventStore.onLinkClicked(_this, linkData, linkGfx, event));\n\n                    clearInterval(interval);\n                }\n            }\n        }, 50);\n\n        linkGfx.alpha = this.settings.LINK_DEFAULT_ALPHA;\n        linkGfxLabel.alpha = this.settings.LINK_DEFAULT_ALPHA;\n        return {linkGfx, linkGfxLabel};\n\n    }\n\n\n    updatePositions = () => {\n        console.log(\"updatePositions triggered\",);\n        this.clearLinkCanvas();\n        this.updateNodePositions();\n        this.updateLinkPositions();\n        this.requestRender();\n    };\n\n\n    updateLinkPositions() {\n        const links = this.dataStore.getAllRawEdgesList();\n        const linkDataGfxPairs = [];\n        for (let i = 0; i < links.length; i++) {\n            let {linkGfx, linkGfxLabel} = this.createLink(links[i])\n            this.dataStore.linkGraphicsArray.push(linkGfx);\n            this.linksLayer.addChild(linkGfx);\n\n            this.dataStore.linkLabelGraphicsArray.push(linkGfxLabel);\n            this.linksLabelsLayer.addChild(linkGfxLabel);\n            linkDataGfxPairs.push([links[i], linkGfx, linkGfxLabel])\n        }\n        this.graphicsStore.updateLinkPairs(linkDataGfxPairs);\n\n    }\n\n\n    updateNodePositions() {\n        let _this = this;\n        const nodes = this.dataStore.getAllRawVerticesList();\n        for (const node of nodes) {\n            if (_this.graphicsStore.nodeDataToNodeGfx.get(node.id)) {\n                _this.graphicsStore.nodeDataToNodeGfx.get(node.id).position = new PIXI.Point(node.x, node.y)\n            }\n            if (_this.graphicsStore.nodeDataToLabelGfx.get(node.id)) {\n                _this.graphicsStore.nodeDataToLabelGfx.get(node.id).position = new PIXI.Point(node.x, node.y)\n            }\n        }\n    }\n\n\n    renderGraphics() {\n\n\n        // this.graphicsStore.clear();\n        // this.\n        this.isRendering = true\n        const {verticesToRender, edgesToRender} = this.dataStore.getDataToRender();\n        console.log(\"vertices2Render ======== \", verticesToRender.length);\n        console.log(\"edges2Render ======== \", edgesToRender.length);\n\n        // Create nodes\n        const nodeDataGfxPairs = this.createNodes(verticesToRender);\n        this.graphicsStore.updateNodePairs(nodeDataGfxPairs);\n\n        // Create Links ?\n\n        this.updatePositions();\n        this.requestRender();\n\n\n        // initial draw\n        this.requestRender();\n\n    }\n\n    // addNewGraphics(newVertices, newEdges) {\n    //     // const {nodes, links} = this.dataStore;\n    //     console.log(\"======= total nodes and links after adding new data \", newVertices.length, newEdges.length);\n    //\n    //\n    //     const nodeDataGfxPairs = this.createNodes(newVertices);\n    //     this.graphicsStore.updateNodePairs(nodeDataGfxPairs);\n    //\n    //\n    //     this.updatePositions(); // nodes will be created in this step anyways.\n    // }\n\n\n    preventWheelScrolling() {\n        // prevent body scrolling\n        this.pixiApp.view.addEventListener('wheel', event => {\n            event.preventDefault();\n        });\n    }\n\n}\n","/*\n\n*/\n\n\nexport default class GESettings {\n\n    RESOLUTION = window.devicePixelRatio * 2;\n    FORCE_LAYOUT_NODE_REPULSION_STRENGTH = -1000;\n    FORCE_LAYOUT_ITERATIONS = 150;\n    DEFAULT_LINK_LENGTH = 200;\n    NODE_RADIUS = 10;\n    NODE_HIT_RADIUS = this.NODE_RADIUS + 10;\n    LABEL_FONT_FAMILY = 'Helvetica';\n    LABEL_FONT_SIZE = 12;\n    LABEL_X_PADDING = 5;\n    LABEL_Y_PADDING = -5;\n\n\n    NODE_DEFAULT_BORDER_COLOR = 0xf2f2f2;\n    NODE_FOCUSED_NODE_BORDER_COLOR = 0xefefef;\n    NODE_DEFAULT_ALPHA = 1;\n    NODE_BORDER_HIGHLIGHT_ALPHA = 0.9;\n    NODE_BORDER_UN_HIGHLIGHT_ALPHA = 0;\n\n    NODE_SELECTED_STROKE_WIDTH = 10;\n\n    LINK_DEFAULT_LABEL_FONT_SIZE = 10;\n    LINK_DEFAULT_WIDTH = 2;\n    LINK_DEFAULT_COLOR = 0x666666;\n    LINK_DEFAULT_LABEL_COLOR = 0x545454;\n    LINK_DEFAULT_ALPHA = 1;\n    LINK_UN_HIGHLIGHT_ALPHA = 0.15;\n\n\n\n    // ICON_FONT_FAMILY = 'Material Icons';\n    ICON_FONT_FAMILY = 'Font Awesome 5 Free';\n    ICON_FONT_SIZE = this.NODE_RADIUS / Math.SQRT2 * 2;\n    ICON_TEXT = 'f542';\n\n    ZOOM_CLAMP_MIN_SCALE = .2;\n    ZOOM_CLAMP_MAX_SCALE = 3;\n\n    NODE_MENU_X_PADDING =  50 + this.NODE_HIT_RADIUS;\n    NODE_MENU_Y_PADDING = 45 + this.NODE_RADIUS;\n\n    LABEL_RESOLUTION = 4;\n\n\n    constructor(screenWidth, screenHeight) {\n        if (screenWidth) {\n            this.SCREEN_WIDTH = screenWidth;\n        }\n        if (screenHeight) {\n            this.SCREEN_HEIGHT = screenHeight;\n        }\n        this.WORLD_WIDTH = this.SCREEN_WIDTH / 4;\n        this.WORLD_HEIGHT = this.SCREEN_HEIGHT / 4;\n\n        console.log(this.SCREEN_WIDTH, this.SCREEN_HEIGHT, this.WORLD_WIDTH, this.WORLD_HEIGHT)\n    }\n\n\n}\n","/*\n\n\n\n */\n\n\nimport * as d3 from \"d3\";\n\nexport default class GraphSimulator {\n\n    constructor(settings, onForceSimulationEnd, alphaDecay) {\n        /*\n        For table Canvas, use the alpha decay, so the rendering would be faster\n        and no need to use onSimulationEnd\n         */\n        this.settings = settings;\n        this.alphaDecay = alphaDecay;\n        this.onForceSimulationEnd = onForceSimulationEnd;\n        this.forceSimulator = this.generateForceSimulation();\n    }\n\n    generateForceSimulation() {\n        const simulation = d3.forceSimulation()\n            .force(\"charge\", d3.forceManyBody().strength(this.settings.FORCE_LAYOUT_NODE_REPULSION_STRENGTH))\n            .force(\"link\", d3.forceLink().id(d => d.id).distance(this.settings.DEFAULT_LINK_LENGTH))\n            .force(\"collide\", d3.forceCollide(this.settings.NODE_HIT_RADIUS).iterations(10))\n            // .force(\"center\", d3.forceCenter(this.settings.SCREEN_WIDTH / 2, this.settings.SCREEN_HEIGHT / 2))\n\n            .force(\"x\", d3.forceX())\n            .force(\"y\", d3.forceY())\n\n        // .tick(this.settings.FORCE_LAYOUT_ITERATIONS)\n\n        if (this.alphaDecay) {\n            simulation.alphaDecay(this.alphaDecay)\n        }\n\n        if (this.onForceSimulationEnd) {\n            simulation.on(\"end\", () => this.onForceSimulationEnd())\n        }\n\n        return simulation;\n        //.on(\"tick\", () => this.onForceSimulationEnd(this))\n        //.tick([this.settings.FORCE_LAYOUT_ITERATIONS])\n        //.alphaTarget(0.8);\n        //.stop();\n    }\n\n    addDataToGraphSimulation(vertices2RenderPrepared, edges2RenderPrepared) {\n        console.log(\"===addDataToGraphSimulation\", vertices2RenderPrepared, edges2RenderPrepared);\n\n\n        this.forceSimulator.nodes(vertices2RenderPrepared);\n        this.forceSimulator.force(\"link\").links(edges2RenderPrepared);\n\n\n        // .id(linkData => linkData.id)\n        // .distance(_this.settings.DEFAULT_LINK_LENGTH);\n        // this.forceSimulator.alphaTarget(0.3).restart();\n    }\n}\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faArrowAltCircleLeft,\n    faArrowAltCircleRight,\n    faDotCircle,\n    faMinusCircle, faTerminal\n} from \"@fortawesome/free-solid-svg-icons\";\nimport PropTypes from \"prop-types\";\n\n\nexport default class NodeMenu extends React.Component {\n\n    static defaultProps = {\n        getFocusedNodes: () => console.log(\"getFocusedNodes\"),\n        setFocusedNodes: (nodes) => console.error(\"setFocusedNodes not set\", nodes),\n        connector: null,\n        // selectedElementData: null,\n        makeQuery: () => console.error(\"makeQuery not set\"),\n        graphicsEngine: null,\n        setDefaultQuery: (query) => console.log(\"setDefaultQuery\", query),\n        setRightContentName: (name) => console.log(\"setRightContentName not set\", name)\n\n    }\n    static propTypes = {\n        getFocusedNodes: PropTypes.func,\n        setFocusedNodes: PropTypes.func,\n        connector: PropTypes.object,\n        // selectedElementData: PropTypes.object,\n        makeQuery: PropTypes.func,\n        graphicsEngine: PropTypes.object,\n        setDefaultQuery: PropTypes.func,\n        setRightContentName: PropTypes.func\n\n    }\n\n    componentDidMount() {\n        if (this.props.graphicsEngine) {\n            this.onClickFocus();\n        }\n    }\n\n    getLastSelectedNodeData() {\n        return this.props.graphicsEngine\n            ? this.props.graphicsEngine.eventStore.lastSelectedNodeData\n            : null;\n    }\n\n    onClickFocus() {\n        const lastSelectedNodeData = this.getLastSelectedNodeData();\n        console.log(\"onClickFocus========\", lastSelectedNodeData)\n        if (lastSelectedNodeData) {\n            this.props.graphicsEngine.dataStore.addNode2Focus(lastSelectedNodeData);\n            this.props.graphicsEngine.zoom2Point(lastSelectedNodeData.x, lastSelectedNodeData.y);\n            const focusedNodes = this.props.graphicsEngine.dataStore.getUniqueFocusedNodes();\n            this.props.setFocusedNodes(focusedNodes);\n            this.props.graphicsEngine.graphicsStore.focusOnElements(focusedNodes);\n            // this.setState({focusedNodes: this.props.graphicsEngine.dataStore.getUniqueFocusedNodes()});\n            this.hideMenu();\n        }\n\n    }\n\n    onClickShowInV() {\n        // alert(\"onClickShowInv clicked\");\n        const lastSelectedNodeData = this.getLastSelectedNodeData();\n        const query_string = this.props.connector.requestBuilder.getInEdgeVertices(lastSelectedNodeData.id);\n\n        // adding this node to focused,\n        // this.props.graphicsEngine.dataStore.addNode2Focus(lastSelectedNodeData);\n        // this.setState({focusedNodes: this.props.graphicsEngine.dataStore.getUniqueFocusedNodes()});\n        this.hideMenu();\n        this.props.makeQuery(query_string);\n\n\n    }\n\n    onClickShowOutV() {\n        // alert(\"onClickShowOutV clicked\");\n        const lastSelectedNodeData = this.getLastSelectedNodeData();\n        console.log(\"expandOutLinksAndNodes\", lastSelectedNodeData);\n        // TODO - improve performance of the query.\n        const query_string = this.props.connector.requestBuilder.getOutEdgeVertices(lastSelectedNodeData.id);\n\n        //\n        // this.props.graphicsEngine.dataStore.addNode2Focus(lastSelectedNodeData);\n        // this.setState({focusedNodes: this.props.graphicsEngine.dataStore.getUniqueFocusedNodes()});\n        this.hideMenu();\n        this.props.makeQuery(query_string);\n    }\n\n    hideMenu() {\n        this.props.graphicsEngine.eventStore.hideMenu();\n    }\n\n    cleanGraph() {\n        console.log(\"this.forceSimulator\", this.forceSimulator);\n        this.forceSimulator.forceSimulator.alphaTarget(0.8).restart();\n    }\n\n    resetFocus() {\n        this.props.graphicsEngine.dataStore.removeAllNodes2Focus();\n        this.props.graphicsEngine.graphicsStore.resetFocus();\n        this.props.graphicsEngine.resetViewport();\n    }\n\n    getVerboseIdentifier() {\n        // const elementData = this.props.selectedElementData;\n        const lastSelectedNodeData = this.getLastSelectedNodeData();\n        console.log(\"=====lastSelectedNodeData\", lastSelectedNodeData)\n        if (lastSelectedNodeData) {\n            const color = lastSelectedNodeData.meta.shapeOptions.fillColor;\n            const elem = document.querySelector('.nodeMenuContainer h5');\n            if (elem) {\n                elem.style.color = color;\n            }\n            return lastSelectedNodeData.meta.labelOptions.labelText;\n        }\n    }\n\n    getIdentifier() {\n        const lastSelectedNodeData = this.getLastSelectedNodeData();\n        console.log(\"=====lastSelectedNodeData\", lastSelectedNodeData)\n        if (lastSelectedNodeData) {\n            return lastSelectedNodeData.id;\n        }\n    }\n\n    checkIfAlreadyFocused() {\n        const lastSelectedNodeData = this.getLastSelectedNodeData();\n        if (lastSelectedNodeData) {\n            this.props.getFocusedNodes().forEach((focusedNode) => {\n                if (focusedNode.id === lastSelectedNodeData.id) {\n                    return true;\n                }\n            });\n        }\n\n    }\n\n    startNewQuery() {\n        const lastSelectedNodeData = this.getLastSelectedNodeData();\n\n        const elementId = lastSelectedNodeData.id;\n        let query = \"\";\n        if (Number.isInteger(elementId)) {\n            query = \"g.V(\" + lastSelectedNodeData.id + \")\";\n        } else {\n            query = \"g.V(\\\"\" + lastSelectedNodeData.id + \"\\\")\";\n        }\n        this.props.setRightContentName(\"query-console\");\n        this.props.setDefaultQuery(query);\n    }\n\n    render() {\n        return (\n            <div className=\"nodeMenuContainer\" style={{\"display\": \"none\"}}>\n                <h5>{this.getVerboseIdentifier()}</h5>\n                <p>ID: {this.getIdentifier()}</p>\n                <ul className={\"nodeMenu\"}>\n                    {\n                        this.checkIfAlreadyFocused() ?\n                            (\n                                <li onClick={() => this.resetFocus()}>\n                                    Reset focus\n                                </li>\n                            ) :\n                            (\n                                <li onClick={() => this.onClickFocus()}>\n                                    <FontAwesomeIcon icon={faDotCircle}/> Focus\n                                </li>\n                            )\n                    }\n                    <li onClick={() => this.onClickShowInV()}>\n                        <FontAwesomeIcon icon={faArrowAltCircleLeft}/> Show InV\n                    </li>\n                    <li onClick={() => this.onClickShowOutV()}>\n                        <FontAwesomeIcon icon={faArrowAltCircleRight}/> Show OutV\n                    </li>\n                    <li onClick={() => this.startNewQuery()}>\n                        <FontAwesomeIcon icon={faTerminal}/> Start Query\n                    </li>\n                    {/*<li onClick={() => this.cleanGraph()}>*/}\n                    {/*    <FontAwesomeIcon icon={faSync}/> Clean Graph*/}\n                    {/*</li>*/}\n                    <li onClick={() => this.hideMenu()}>\n                        <FontAwesomeIcon icon={faMinusCircle}/> hide menu\n                    </li>\n                </ul>\n            </div>\n\n        )\n    }\n}\n","import React from \"react\";\nimport GraphicsEngine from \"./graphics-engine\";\nimport \"./style.scss\";\nimport PropTypes from \"prop-types\";\nimport GESettings from \"./settings\";\nimport GraphSimulator from \"../../core/graph-simulator\";\nimport NodeMenu from \"./node-menu\";\n\nexport default class PIXICanvas extends React.Component {\n\n    /*\n\n\n    setHideVertexOptions={this.setHideVertexOptions.bind(this)}\n    setSelectedElementData={this.setSelectedElementData.bind(this)}\n    setRightContentName={this.setRightContentName.bind(this)}\n    setMiddleBottomContentName={this.setMiddleBottomContentName.bind(this)}\n    middleBottomContentName={this.state.middleBottomContentName}\n\n    selectedElementData={this.state.selectedElementData}\n    setStatusMessage={this.selectedElementData}\n\n    connector={this.connector}\n    resetShallReRenderD3Canvas={this.resetShallReRenderD3Canvas.bind(this)}\n    shallReRenderD3Canvas={this.state.shallReRenderD3Canvas}\n    makeQuery={this.makeQuery.bind(this)}\n\n    */\n\n    static defaultProps = {\n        setHideVertexOptions: () => console.error(\"setHideVertexOptions not set\",),\n        setSelectedElementData: (selectedData) => console.error(\"setSelectedElementData not set\", selectedData),\n        setRightContentName: (contentName) => console.error(\"setRightContentName not set\", contentName),\n        setMiddleBottomContentName: (contentName) => console.error(\"setMiddleBottomContentName not set\", contentName),\n        middleBottomContentName: null,\n        selectedElementData: null,\n        setStatusMessage: (message) => console.debug(\"setStatusMessage not set\", message),\n        showVertexOptions: (selectedLabel) => console.debug(\"this.showVertexOptions not set\", selectedLabel),\n\n        connector: null,\n        dataStore: null,\n        resetShallReRenderD3Canvas: () => console.log(\"resetShallReRenderD3Canvas\"),\n        shallReRenderD3Canvas: false,\n        makeQuery: () => console.error(\"makeQuery not set\"),\n        setGraphicsEngine: (graphicsEngine) => console.log(\"setGraphicsEngine not set\", graphicsEngine),\n\n        getFocusedNodes: () => console.log(\"getFocusedNodes\"),\n        setFocusedNodes: (nodes) => console.error(\"setFocusedNodes not set\", nodes),\n\n        setDefaultQuery: (query) => console.log(\"setDefaultQuery not set\", query),\n\n    }\n\n    static propTypes = {\n        setSelectedElementData: PropTypes.func,\n        setMiddleBottomContentName: PropTypes.func,\n        makeQuery: PropTypes.func,\n        setHideVertexOptions: PropTypes.func,\n        setRightContentName: PropTypes.func,\n        requestBuilder: PropTypes.object,\n        dataStore: PropTypes.object,\n        connector: PropTypes.object,\n        middleBottomContentName: PropTypes.string,\n\n        showVertexOptions: PropTypes.func,\n        shallReRenderD3Canvas: PropTypes.bool,\n        resetShallReRenderD3Canvas: PropTypes.func,\n        selectedElementData: PropTypes.object,\n        setStatusMessage: PropTypes.func,\n        setGraphicsEngine: PropTypes.func,\n\n        getFocusedNodes: PropTypes.func,\n        setFocusedNodes: PropTypes.func,\n\n        setDefaultQuery: PropTypes.func\n    }\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // focusedNodes: [],\n            shallReRender: true,\n            // zoomToPoint: [],\n        }\n    }\n\n\n    checkAndAddNewData2Simulation() {\n        /*\n\n        This will add the new data needed for the new simulation..\n\n         */\n        console.log(\"PIXICanvas checkAndAddNewData2Simulation()\", this.props.dataStore.getAllData());\n\n\n        this.graphicsEngine.clearCanvas();\n        this.graphicsEngine.isRendering = true;\n        this.props.setStatusMessage(\"Updating the graph...\");\n\n        const {verticesToRender, edgesToRender} = this.props.dataStore.determineAllDataToRender();\n\n        console.log(\"]=====verticesToRender, edgesToRender\", verticesToRender, edgesToRender);\n\n        // adding this data to force simulation\n        this.forceSimulator.addDataToGraphSimulation(verticesToRender, edgesToRender,);\n\n        // save the 2d position data to storage.\n        this.props.dataStore.setDataToRender(verticesToRender, edgesToRender);\n        // saves to already rendered data, to find the diff later.\n        this.props.dataStore.setAlreadyRenderedData(verticesToRender, edgesToRender);\n        // this.graphicsEngine.clearCanvas();\n\n        // add to simulation.\n        console.log(\"vertices2RenderPrepared\", verticesToRender);\n\n\n        // this.onForceSimulationEnd(this.graphicsEngine, this.setStatusMessage.bind(this));\n        if (this.props.shallReRenderD3Canvas === true) {\n            this.props.resetShallReRenderD3Canvas()\n        }\n\n    }\n\n    // shouldComponentUpdate(nextProps, nextState) {\n    //\n    //     if (this.graphicsEngine.isRendering) {\n    //         return false;\n    //     }\n    //     const {newVerticesToRender, newEdgesToRender} = this.props.dataStore.getNewDataToRender();\n    //     console.log(\"===newVerticesToRender\", newVerticesToRender, newEdgesToRender)\n    //     return newVerticesToRender.length > 0 || newEdgesToRender.length > 0;\n    //\n    // }\n\n    shouldComponentUpdate(nextProps) {\n        console.log(\"shouldComponentUpdate || nextProps.shallReRenderD3Canvas\", nextProps.shallReRenderD3Canvas)\n        // console.log(\"=this.state.focusedNodes !== newState.focusedNodes\", this.state.focusedNodes !== newState.focusedNodes, this.state.focusedNodes, newState.focusedNodes)\n\n        // if (this.state.focusedNodes !== newState.focusedNodes) {\n        //     this.graphicsEngine.graphicsStore.focusOnElements(this.state.focusedNodes);\n        // }\n\n        return nextProps.shallReRenderD3Canvas\n            || this.props.selectedElementData !== nextProps.selectedElementData\n            // || this.state.focusedNodes !== newState.focusedNodes;\n            || this.state.shallReRender === true;\n    }\n\n\n    componentDidUpdate() {\n        console.log(\"componentDidUpdate\", this.props.shallReRenderD3Canvas);\n\n        if (this.props.shallReRenderD3Canvas) {\n            // this.checkAndAddNewData2Simulation();\n            this.renderPIXICanvas();\n        }\n\n\n    }\n\n    renderPIXICanvas() {\n        let _this = this;\n        const canvasElem = document.querySelector(\".canvas\");\n        const nodeMenuEl = document.querySelector(\".nodeMenuContainer\");\n        // const graphCanvasStatus = document.querySelector(\"#graph-canvas-status\");\n\n        // remove previous canvas element;\n        while (canvasElem.firstChild) {\n            canvasElem.removeChild(canvasElem.firstChild);\n        }\n\n        let lastSelectedNodeData = null;\n        if (this.graphicsEngine) {\n            lastSelectedNodeData = this.graphicsEngine.eventStore.lastSelectedNodeData\n        }\n\n        console.log(\"canvasElem.offsetWidth,\", canvasElem.offsetWidth, canvasElem.offsetHeight)\n        this.settings = new GESettings(canvasElem.offsetWidth, canvasElem.offsetHeight);\n        this.graphicsEngine = new GraphicsEngine(canvasElem, nodeMenuEl,\n            this.settings,\n            this.props.dataStore,\n            this.onElementSelected.bind(this)\n        )\n\n        this.props.setGraphicsEngine(this.graphicsEngine);\n        if (lastSelectedNodeData) {\n            // assigning the last selected Node data back\n            this.graphicsEngine.eventStore.lastSelectedNodeData = lastSelectedNodeData;\n        }\n\n        this.forceSimulator = new GraphSimulator(this.settings, () => {\n            console.log(\"========on onForceSimulationEnd \")\n            // const {vertices2Render, edges2Render} = _this.getDataToRender();\n            _this.onForceSimulationEnd(_this.graphicsEngine, _this.setStatusMessage.bind(_this)\n            );\n\n        });\n\n        this.checkAndAddNewData2Simulation();\n    }\n\n\n    componentDidMount() {\n        console.log(\"componentDidMount\", this.props.shallReRenderD3Canvas);\n        this.renderPIXICanvas();\n    }\n\n    setStatusMessage(message) {\n        this.props.setStatusMessage(message);\n    }\n\n    onForceSimulationEnd(graphicsEngine, setStatusMessage) {\n        console.log(\"onForceSimulationEnd\", graphicsEngine, setStatusMessage);\n\n\n        graphicsEngine.renderGraphics();\n        graphicsEngine.isRendering = false;\n        if (graphicsEngine.isFirstLoaded === true) {\n            // center the view only for the first time.\n            graphicsEngine.resetViewport();\n            graphicsEngine.isFirstLoaded = false;\n        }\n\n        const lastSelectedNodeData = graphicsEngine.eventStore.lastSelectedNodeData;\n        // const nodeContainer = graphicsEngine.graphicsStore.nodeDataToNodeGfx.get(nodeData.id);\n        console.log(\"===lastSelectedNodeData\", lastSelectedNodeData)\n        const focusedNodes = graphicsEngine.dataStore.getUniqueFocusedNodes();\n\n        if (lastSelectedNodeData && focusedNodes.length === 0) {\n            graphicsEngine.zoom2Node(lastSelectedNodeData.id)\n            graphicsEngine.highlightNodeById(lastSelectedNodeData.id)\n        } else if (focusedNodes.length > 0) {\n            // graphicsEngine.zoom2Node(lastSelectedNodeData.id)\n            graphicsEngine.graphicsStore.focusOnElements(focusedNodes)\n            graphicsEngine.zoom2Node(focusedNodes[-0].id)\n\n        }\n        setStatusMessage(\"Updated the graph\");\n        // this.graphCanvasStatus.innerHTML = \"Updated the data\";\n\n        // this.graphicsEngine.updatePositions();\n        // GraphicsEngine.upd\n\n    }\n\n    onElementSelected(nodeData) {\n        if (this.props.middleBottomContentName !== \"vertex-options\") {\n            if (nodeData) {\n                this.props.setMiddleBottomContentName('selected-data-overview');\n                this.props.setSelectedElementData(nodeData);\n            } else {\n                // if data is none, remove the bottom content\n                this.props.setMiddleBottomContentName(null);\n                this.props.setSelectedElementData(null);\n            }\n\n        }\n    }\n\n    render() {\n        // console.log(\"PIXICanvas render()\", this.props.dataStore.getAllRawVerticesList())\n        console.log(\"this.state.focusedNodes\", this.props.getFocusedNodes());\n        return (\n            <div style={{\"width\": \"100%\", \"height\": \"100%\"}}>\n\n                <NodeMenu\n                    getFocusedNodes={this.props.getFocusedNodes}\n                    setFocusedNodes={this.props.setFocusedNodes}\n                    connector={this.props.connector}\n                    // selectedElementData={this.props.selectedElementData}\n                    makeQuery={this.props.makeQuery}\n                    graphicsEngine={this.graphicsEngine}\n                    setDefaultQuery={this.props.setDefaultQuery}\n                    setRightContentName={this.props.setRightContentName}\n                />\n                <div className=\"graphContainer canvas\">\n                </div>\n\n            </div>\n\n        )\n    }\n\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport ReactJson from 'react-json-view'\nimport \"./json.scss\";\nimport GraphSONDeSerializer from \"../../serializers/graphson-v3\";\n\nconst gremlinDeSerializer = new GraphSONDeSerializer()\n\nexport default class JSONCanvas extends React.Component {\n\n    static defaultProps = {\n        dataStore: null\n    }\n\n    static propTypes = {\n        dataStore: PropTypes.object\n    };\n\n    state = {\n        rjv_component: false\n    }\n\n    UNSAFE_componentWillMount() {\n        // there's probably a better way than setTimeout for non-blocking rendering\n        const {vertices, edges} = this.props.dataStore.getAllData();\n        console.log(\"JSONCanvas\", vertices, edges);\n\n        const vertexGroups = gremlinDeSerializer.groupByLabel(gremlinDeSerializer.removeMeta(vertices));\n        const edgeGroups = gremlinDeSerializer.groupByLabel(gremlinDeSerializer.removeMeta(edges));\n\n        const data = {\n            \"vertexGroups\": vertexGroups,\n            \"edgeGroups\": edgeGroups\n        }\n        const TIMEOUT = 10 // wait 10 ms\n        setTimeout(() => {\n            this.setState({\n                rjv_component: <ReactJson className={\"p-10\"} theme=\"monokai\" style={{\"backgroundColor\": \"transparent\"}}\n                                          src={data}/>\n            })\n        }, TIMEOUT)\n    }\n\n\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     // return shallowCompare(this, nextProps, nextState);\n    //     return true\n    // }\n\n    render() {\n        console.log(\"JsonCanvas render()\")\n        return <div className={\"jsonCanvas\"}>{this.getJsonOrLoader()}         </div>\n    }\n\n    getJsonOrLoader() {\n        const {rjv_component} = this.state\n        if (rjv_component === false) {\n            return <div className={\"loading-text\"}>loading...</div>\n        } else {\n            // component was rendered and stored to this var\n            return rjv_component\n        }\n    }\n\n\n}\n","import React, {Fragment} from \"react\";\n\nimport PropTypes from 'prop-types';\nimport \"./table.scss\";\nimport GraphSONDeSerializer from \"../../serializers/graphson-v3\";\nimport {getDataFromLocalStorage} from \"../../core/utils\";\nimport {renderPropertyData} from \"../canvas-utils\";\nimport GraphSimulator from \"../../core/graph-simulator\";\nimport GESettings from \"../graph/settings\";\n\n\nconst gremlinDeSerializer = new GraphSONDeSerializer();\n\nexport class VertexTableComponent extends React.Component {\n    static defaultProps = {\n        data: null,\n        label: null,\n        vertexSchema: {},\n        dataStore: null,\n        type: null\n    }\n\n    static propTypes = {\n        data: PropTypes.arrayOf(\n            PropTypes.shape({\n                properties: PropTypes.object,\n                type: PropTypes.string\n            })\n        ),\n        vertexSchema: PropTypes.object,\n        dataStore: PropTypes.object,\n        label: PropTypes.string,\n        type: PropTypes.string,\n    }\n\n    getPropertyKeys() {\n        if (this.props.data.length === 0) {\n            return []\n        } else {\n            return Object.keys(this.props.data[0].properties || {})\n        }\n    }\n\n    getElementType(elem) {\n        return elem.type === \"g:Vertex\" ? \"V\" : \"E\";\n    }\n\n    getElementColor(elem) {\n        const elType = this.getElementType(elem);\n        if (elType === \"V\" && elem.meta) {\n            return elem.meta.shapeOptions.fillColorHex;\n        } else if (elType === \"E\" && elem.meta) {\n            return elem.meta.shapeOptions.strokeColorHex;\n        }\n    }\n\n    getInELabels() {\n        let inELabelsConfig = []\n        this.props.vertexSchema.inE.map((inELabel) => {\n            inELabelsConfig.push({\n                edgeFillColorHex: this.props.dataStore.getEdgeOptions(inELabel)\n                    ? this.props.dataStore.getEdgeOptions(inELabel).shapeOptions.strokeColorHex\n                    : \"#efefef\",\n                edgeLabel: inELabel\n            })\n        });\n        return inELabelsConfig;\n    }\n\n    getOutELabels() {\n        let outELabelsConfig = []\n        this.props.vertexSchema.outE.map((outELabel) => {\n            // console.log(\"====this.props.getEdgeOptions(outELabel)\", this.props.dataStore.getEdgeOptions(outELabel))\n            outELabelsConfig.push({\n                edgeFillColorHex: this.props.dataStore.getEdgeOptions(outELabel)\n                    ? this.props.dataStore.getEdgeOptions(outELabel).shapeOptions.strokeColorHex\n                    : \"#efefef\",\n                edgeLabel: outELabel\n            })\n        });\n        return outELabelsConfig;\n    }\n\n    getFirstElement() {\n        return this.props.data[0];\n    }\n\n    render() {\n        const propertyKeys = this.getPropertyKeys();\n        const elColor = this.getElementColor(this.props.data[0]);\n        // console.log(\"VertexTableComponent here\", this.props.label)\n        // console.log(\"VertexTableComponent here  this.props.data[0]\", this.props.data[0])\n        // console.log(\"VertexTableComponent vertexSchema\", this.props.label, this.props.vertexSchema)\n        let colorOptions = {};\n        if (this.props.type === \"Vertex\") {\n            const _ = getDataFromLocalStorage(\"nodeLabels\", true) || {}\n            colorOptions = _[this.props.label] || {};\n        } else {\n            const _ = getDataFromLocalStorage(\"linkLabels\", true) || {}\n            colorOptions = _[this.props.label] || {}\n        }\n\n        return (\n            <div className={\"VertexTableComponent\"}>\n                {/*<h3>{this.props.type} | {this.props.label}</h3>*/}\n                <table className={\" mb-10 \"}>\n                    <thead>\n                    <tr style={{\n                        \"backgroundColor\": colorOptions.bgColor,\n                    }}>\n\n\n                        <th colSpan={2}>MetaData</th>\n                        {propertyKeys.length\n                            ? <th colSpan={propertyKeys.length}>Properties</th>\n                            : <Fragment/>\n                        }\n\n                        <th colSpan={this.getInELabels().length}>InE Data</th>\n                        <th colSpan={this.getOutELabels().length}>OutE Data</th>\n                    </tr>\n                    <tr style={{\n                        \"backgroundColor\": colorOptions.bgColor,\n                    }}>\n\n                        <td>Label<span>({this.getElementType(this.getFirstElement())})</span></td>\n                        <td>Id</td>\n                        {\n                            propertyKeys.map((propertyKey, index) => {\n                                return (\n                                    <td key={index}>{propertyKey}</td>\n                                )\n                            })\n                        }\n                        {\n                            this.getInELabels().map((edgeLabelConfig, index) => {\n                                return (\n                                    <td key={index}\n                                        style={{\"color\": edgeLabelConfig.edgeFillColorHex}}>{edgeLabelConfig.edgeLabel}</td>\n                                )\n                            })\n                        }\n                        {\n                            this.getOutELabels().map((edgeLabelConfig, index) => {\n                                return (\n                                    <td key={index}\n                                        style={{\"color\": edgeLabelConfig.edgeFillColorHex}}>{edgeLabelConfig.edgeLabel}</td>\n                                )\n                            })\n                        }\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        this.props.data.map((node) => {\n                            return (\n                                <tr key={node.id}>\n                                    {/*<td>{node.type}</td>*/}\n                                    <td style={{\"color\": elColor}}>{node.label}</td>\n                                    <td>{node.id}</td>\n                                    {\n                                        propertyKeys.map((prop, index) => {\n                                            return (\n                                                <td key={index}>{renderPropertyData(prop, node.properties[prop])}</td>)\n                                        })\n                                    }\n                                    {\n                                        this.getInELabels().map((inELabelConfig, index) => {\n                                            const vertices = node.inData[inELabelConfig.edgeLabel]\n                                                ? node.inData[inELabelConfig.edgeLabel].vertices\n                                                : [];\n                                            return (\n                                                <td key={index}>\n                                                    {\n                                                        vertices.map((vertex, vtxIndex) => {\n                                                            return (\n                                                                <button className={\"btn\"} key={vtxIndex}\n                                                                        title={vertex.label}\n                                                                        style={{\"borderColor\": vertex.fillColorHex}}>\n                                                                    {vertex.labelText}\n                                                                </button>\n                                                            )\n                                                        })\n                                                    }\n                                                </td>\n                                            )\n                                        })\n                                    }\n                                    {\n                                        this.getOutELabels().map((outELabelConfig, index) => {\n                                            const vertices = node.outData[outELabelConfig.edgeLabel]\n                                                ? node.outData[outELabelConfig.edgeLabel].vertices\n                                                : [];\n                                            return (\n                                                <td key={index}>\n                                                    {\n                                                        vertices.map((vertex, vtxIndex) => {\n                                                            return (\n                                                                <button className={\"btn\"} key={vtxIndex}\n                                                                        title={vertex.label}\n                                                                        style={{\"borderColor\": vertex.fillColorHex}}>\n                                                                    {vertex.labelText}\n                                                                </button>\n                                                            )\n                                                        })\n                                                    }\n                                                </td>\n                                            )\n                                        })\n                                    }\n                                </tr>\n                            )\n                        })\n                    }\n                    </tbody>\n                </table>\n\n\n            </div>\n        )\n    }\n\n}\n\nexport class EdgeTableComponent extends React.Component {\n    static defaultProps = {\n        data: null,\n        label: null,\n        type: null\n    }\n\n    static propTypes = {\n        data: PropTypes.arrayOf(\n            PropTypes.shape({\n                properties: PropTypes.object,\n                type: PropTypes.string\n            })\n        ),\n        label: PropTypes.string,\n        type: PropTypes.string,\n    }\n\n    getPropertyKeys() {\n        if (this.props.data.length === 0) {\n            return []\n        } else {\n            return Object.keys(this.props.data[0].properties || {})\n        }\n    }\n\n    getElementType(elem) {\n        return elem.type === \"g:Vertex\" ? \"V\" : \"E\";\n    }\n\n    getElementColor(elem) {\n        const elType = this.getElementType(elem);\n        if (elType === \"V\" && elem.meta) {\n            return elem.meta.shapeOptions.fillColorHex;\n        } else if (elType === \"E\" && elem.meta) {\n            return elem.meta.shapeOptions.strokeColorHex;\n        }\n    }\n\n    render() {\n        const propertyKeys = this.getPropertyKeys();\n        const elColor = this.getElementColor(this.props.data[0]);\n        // console.log(\"EdgeTableComponent here\", this.props.label)\n        // console.log(\"EdgeTableComponent here  this.props.data[0]\", this.props.data[0])\n        let colorOptions = {};\n        if (this.props.type === \"Vertex\") {\n            const _ = getDataFromLocalStorage(\"nodeLabels\", true) || {}\n            colorOptions = _[this.props.label] || {};\n        } else {\n            const _ = getDataFromLocalStorage(\"linkLabels\", true) || {}\n            colorOptions = _[this.props.label] || {}\n        }\n\n        return (\n            <div className={\"VertexTableComponent\"}>\n                {/*<h3>{this.props.type} | {this.props.label}</h3>*/}\n                <table className={\" mb-10 \"}>\n                    <thead>\n                    <tr style={{\n                        \"backgroundColor\": colorOptions.bgColor,\n                    }}>\n\n\n                        <th colSpan={2}>MetaData</th>\n                        {propertyKeys.length\n                            ? <th colSpan={propertyKeys.length}>Properties</th>\n                            : <Fragment/>\n                        }\n                        <th>from</th>\n                        <th>to (outV)</th>\n                    </tr>\n                    <tr style={{\n                        \"backgroundColor\": colorOptions.bgColor,\n                    }}>\n\n                        {/*style={{\"borderColor\": colorOptions.borderColor || \"inherit\"}}*/}\n                        {/*<th>Type</th>*/}\n                        <td>Label<span>({this.getElementType(this.props.data[0])})</span></td>\n                        <td>Id</td>\n                        {\n                            propertyKeys.map((propertyKey, index) => {\n                                return (\n                                    <td key={index}>{propertyKey}</td>\n                                )\n                            })\n                        }\n                        <td>from</td>\n                        <td>to (outV)</td>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        this.props.data.map((node) => {\n                            return (\n                                <tr key={node.id}>\n                                    {/*<td>{node.type}</td>*/}\n                                    <td style={{\"color\": elColor}}>{node.label}</td>\n                                    <td>{node.id}</td>\n                                    {\n\n                                        propertyKeys.map((prop, index) => {\n                                            return (\n                                                <td key={index}>{renderPropertyData(prop, node.properties[prop])}</td>)\n                                        })\n                                    }\n                                    <td>\n                                        <button className={\"btn\"} title={node.label}\n                                                style={{\"borderColor\": node.source.meta.shapeOptions.fillColorHex}}>\n                                            {node.source.meta.labelOptions.labelText}</button>\n                                    </td>\n                                    <td>\n                                        <button className={\"btn\"} title={node.label}\n                                                style={{\"borderColor\": node.target.meta.shapeOptions.fillColorHex}}>\n                                            {node.target.meta.labelOptions.labelText}</button>\n                                    </td>\n                                </tr>\n                            )\n                        })\n                    }\n                    </tbody>\n                </table>\n\n\n            </div>\n        )\n    }\n\n}\n\nexport default class TableCanvas extends React.Component {\n\n    static defaultProps = {\n        dataStore: null\n    }\n\n    static propTypes = {\n        dataStore: PropTypes.object,\n    }\n\n    render() {\n        // const {vertices, edges} = this.props.dataStore.getAllData();\n        const settings = new GESettings(0, 0);\n        const forceSimulator = new GraphSimulator(settings, null, 0.5);\n        const {verticesToRender, edgesToRender} = this.props.dataStore.determineAllDataToRender();\n        forceSimulator.addDataToGraphSimulation(verticesToRender, edgesToRender,);\n\n        const vertexGroups = gremlinDeSerializer.groupByLabel(verticesToRender);\n        const edgeGroups = gremlinDeSerializer.groupByLabel(edgesToRender);\n        return (\n            <div className={\"p-10 tableCanvas\"}>\n                <div className={\"___responseBox \"}>\n                    {\n                        Object.keys(vertexGroups).map((nodeLabel, index) => (\n                            <VertexTableComponent type={\"Vertex\"} key={nodeLabel + index}\n                                                  vertexSchema={this.props.dataStore.getVertexSchema(nodeLabel)}\n                                                  dataStore={this.props.dataStore}\n\n                                                  label={nodeLabel}\n                                                  data={vertexGroups[nodeLabel]}/>\n                        ))\n                    }\n                    {\n                        Object.keys(edgeGroups).map((linkLabel, index) => (\n                            <EdgeTableComponent type={\"Edge\"} key={edgeGroups + index} label={linkLabel}\n                                                data={edgeGroups[linkLabel]}/>\n                        ))\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport ReactJson from 'react-json-view'\nimport \"./raw-responses.scss\";\n\nexport default class RawResponsesCanvas extends React.Component {\n\n    static defaultProps = {\n        connector: null\n    }\n\n    static propTypes = {\n        connector: PropTypes.object\n\n    }\n\n    state = {\n        rjv_component: false\n    }\n\n    UNSAFE_componentWillMount() {\n\n        console.log(\"====UNSAFE_componentWillMount\", this.props.connector);\n        let data = {}\n        const lastResponse = this.props.connector.getLastResponse();\n        if (lastResponse) {\n            data = lastResponse.result.data;\n        }\n        if (data !== null) {\n\n\n            const TIMEOUT = 10 // wait 10 ms\n            setTimeout(() => {\n                this.setState({\n                    rjv_component: <ReactJson className={\"p-10\"} theme=\"monokai\"\n                                              style={{\"backgroundColor\": \"transparent\"}}\n                                              src={data}/>\n                })\n            }, TIMEOUT)\n        } else {\n            this.setState({\n                rjv_component: <p>Response is null</p>\n            })\n        }\n    }\n\n    render() {\n        return <div className={\"rawResponseCanvas p-10\"}>\n            <h4>Raw Response(from last Query only)</h4>\n            {this.getJsonOrLoader()}\n        </div>\n    }\n\n    getJsonOrLoader() {\n        const {rjv_component} = this.state\n        if (rjv_component === false) {\n            return <div className={\"loading-text\"}>loading...</div>\n        } else {\n            // component was rendered and stored to this var\n            return rjv_component\n        }\n    }\n\n\n}\n","import React from \"react\";\nimport \"./filter-nodes.scss\";\nimport PropTypes from \"prop-types\";\n// import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n// import {faFilter} from \"@fortawesome/free-solid-svg-icons\";\nimport GEPanel from \"../../ui-components/panels/panel\";\n\nexport default class FilterNodes extends React.Component {\n\n    static defaultProps = {\n        onClose: () => console.log(\"\")\n    }\n    static propTypes = {\n        onClose: PropTypes.func\n    }\n\n    render() {\n        return (\n            <div className={\"filter-nodes\"}>\n                <GEPanel\n                    title={\"Filter data in canvas\"}\n                    onClickClose={() => this.props.onClose(null)}\n                    showToggleBtn={false}\n                >\n                    <div className={\"p-10\"}>\n                        <label>Filter Nodes and links</label>\n                        {/*<input type=\"text\"/>*/}\n                        {/*<button className={\"focus-btn\"}><FontAwesomeIcon icon={faFilter}/> Filter</button>*/}\n                        <br/>\n                        <p style={{\"color\": \"#b85f5f\"}}>Still in design phase.</p>\n                        {/*<small>*/}\n                        {/*    <button style={{*/}\n                        {/*        \"color\": \"#4e4e4e\",*/}\n                        {/*        \"marginTop\": \"5px\"*/}\n                        {/*    }} onClick={() => this.props.onClose()}>*/}\n                        {/*        close this*/}\n                        {/*    </button>*/}\n                        {/*</small>*/}\n                    </div>\n                </GEPanel>\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport \"./modal.scss\";\nimport PropTypes from \"prop-types\";\n\nexport default class GEModal extends React.Component {\n\n    static propTypes = {\n        title: PropTypes.string,\n        children: PropTypes.any,\n        style: PropTypes.object\n    }\n\n    render() {\n        return (\n            <div className={\"ge-modal\"} style={this.props.style}>\n                {this.props.title ? (\n                    <div className={\"ge-modal-header\"}>\n                        <h4>{this.props.title}</h4>\n                    </div>\n                ) : (\n                    <span/>\n                )}\n\n                <div className={\"ge-modal-body\"}>{this.props.children}</div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport \"./focus-node.scss\";\nimport PropTypes from \"prop-types\";\nimport GEPanel from \"../../ui-components/panels/panel\";\nimport GEModal from \"../../ui-components/modal/modal\";\n\nexport default class FocusNode extends React.Component {\n\n    static defaultProps = {\n        onClose: () => console.log(\"\"),\n        dataStore: null,\n        getGraphicsEngine: null,\n        setFocusedNodes: null\n    }\n    static propTypes = {\n        onClose: PropTypes.func,\n        dataStore: PropTypes.object,\n        getGraphicsEngine: PropTypes.func,\n        setFocusedNodes: PropTypes.func\n    }\n\n    state = {\n        nodeTextOrId: \"\",\n        queryResults: [], // the results returned when searched for node text.\n        infoMessage: null,\n        errorMessage: null\n    }\n\n    onQueryChange(e) {\n        const searchWord = e.target.value;\n        let queryResults = []\n        if (searchWord) {\n            queryResults = this.props.dataStore.searchNodeByNodeLabelTextOrId(searchWord);\n        } else {\n            this.setState({infoMessage: null, errorMessage: null});\n        }\n        // if (searchWord) {\n        // find search results and\n        // const results = this.dataStore.searchByNodeLabelTextOrId(\n        this.setState({\n            nodeTextOrId: searchWord,\n            queryResults: queryResults\n        });\n        // }\n    }\n\n    onFormSubmit(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.onFocusNodeClicked();\n    }\n\n\n    onFocusNodeClicked(nodeData) {\n        //\n        const nodeLabel = this.state.nodeTextOrId;\n        // const nodeData = this.props.dataStore.getNodeByNodeLabelTextOrId(nodeLabel);\n        console.log(\"======****nodeData\", nodeData)\n        console.log(\"======****nodeLabel\", nodeLabel)\n        if (nodeData) {\n            // const graphicsEngine = this.props.getGraphicsEngine();\n            if (this.props.getGraphicsEngine()) {\n                // graphicsEngine.focusedNodes\n                this.props.getGraphicsEngine().dataStore.addNode2Focus(nodeData)\n\n                const uniqueNodes = Object.assign([],\n                    this.props.getGraphicsEngine().dataStore.getUniqueFocusedNodes());\n                this.props.getGraphicsEngine().graphicsStore.focusOnElements(uniqueNodes);\n                console.log(\"======uniqueNodes\", uniqueNodes)\n                this.props.setFocusedNodes(uniqueNodes)\n                this.props.getGraphicsEngine().zoom2Point(nodeData.x, nodeData.y);\n                this.setInfoMessage(\"Centered and highlighted the node '\" + nodeLabel + \"'\");\n            }\n        } else {\n            this.setErrorMessage(\"Unable to find the node with label or text '\" + nodeLabel +\n                \"'. NOTE: this search is case sensitive\");\n        }\n    }\n\n    setErrorMessage(message) {\n        this.setState({errorMessage: message, infoMessage: null})\n    }\n\n    setInfoMessage(message) {\n        this.setState({errorMessage: null, infoMessage: message})\n    }\n\n    render() {\n        return (\n            <div className={\"focus-node\"}>\n                <GEModal>\n                    <GEPanel\n                        title={\"Find and Focus a node in canvas\"}\n                        onClickClose={() => this.props.onClose(null)}\n                        showToggleBtn={false}\n                    >\n\n                        <div className={\"p-10\"}>\n                            <form id={\"queryForm\"}\n                                  onSubmit={(e) => this.onFormSubmit(e)}>\n\n                                <label>Search for node by label or Id to focus on</label>\n                                <input type=\"text\"\n                                       spellCheck={false}\n                                       autoFocus\n                                       value={this.state.nodeTextOrId}\n                                       onChange={this.onQueryChange.bind(this)}\n                                       placeholder={\"Node label text or Id\"}\n                                />\n                                {/*<button className={\"focus-btn\"} type={\"submit\"} onClick={() => this.onFocusNodeClicked()}>*/}\n                                {/*    <FontAwesomeIcon icon={faDotCircle}/> Focus*/}\n                                {/*</button>*/}\n                            </form>\n                            {/*<hr/>*/}\n                            <br/>\n\n\n                            {\n                                this.state.queryResults\n                                    ? <ul className={\"focus-results\"}>\n                                        {\n                                            this.state.queryResults.map((result, index) => {\n                                                return (\n                                                    <li onClick={() => this.onFocusNodeClicked(result)}\n                                                        key={index}>\n                                                        <span\n                                                            style={{\"backgroundColor\": result.meta.shapeOptions.fillColorHex}}>.</span>\n                                                        {result.meta.labelOptions.labelText}\n                                                    </li>\n                                                )\n                                            })\n                                        }\n                                    </ul>\n                                    : <span></span>\n                            }\n\n                            {\n                                this.state.errorMessage\n                                    ? <p className={\"error-message small\"}>\n                                        <strong>Error:</strong> {this.state.errorMessage}\n                                    </p> :\n                                    <span></span>\n                            }\n\n                            {\n                                this.state.infoMessage\n                                    ?\n                                    <p className={\"info-message small\"}><strong>Info:</strong> {this.state.infoMessage}\n                                    </p> :\n                                    <span></span>\n                            }\n\n                        </div>\n                    </GEPanel>\n                </GEModal>\n            </div>\n        )\n    }\n}\n","import React, {Fragment} from \"react\";\nimport List from \"../ui-components/lists/list\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faCamera, faFilter, faSearch, faSync,\n    faTrashAlt, faTable, faProjectDiagram\n} from \"@fortawesome/free-solid-svg-icons\";\nimport PropTypes from \"prop-types\";\nimport FilterNodes from \"./nav-ui-components/filter-nodes\";\nimport FocusNode from \"./nav-ui-components/focus-node\";\n\n\nexport default class CanvasNav extends React.Component {\n\n\n    static defaultProps = {\n        canvasType: null,\n        canvasCtrl: null,\n        connector: null,\n        dataStore: null,\n        getGraphicsEngine: () => console.log(\"getGraphicsEngine not set\"),\n        makeQuery: (query) => console.log(\"makeQuery not set \", query),\n        setFocusedNodes: (nodes) => console.log(\"setFocusedNodes not set \", nodes),\n        defaultQuery: null,\n        setDefaultQuery: (query) => console.log(\"setDefaultQuery\", query),\n        setRightContentName: () => console.log(\"setRightContentName\")\n\n    }\n    static propTypes = {\n        canvasType: PropTypes.string,\n        canvasCtrl: PropTypes.object,\n        makeQuery: PropTypes.func,\n        dataStore: PropTypes.object,\n        getGraphicsEngine: PropTypes.func,\n        // confirmFlushCanvas: PropTypes.func,\n        connector: PropTypes.object,\n        setFocusedNodes: PropTypes.func,\n        defaultQuery: PropTypes.string,\n        setDefaultQuery: PropTypes.func,\n        setRightContentName: PropTypes.func\n\n        // confirmRedrawCanvas: PropTypes.func\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            canvasMenuType: null\n        }\n    }\n\n    switchToCanvasMenu(canvasMenuType) {\n        console.log(\"updating canvasMenuType\", canvasMenuType);\n        this.setState({\n            canvasMenuType: canvasMenuType\n        });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.defaultQuery !== this.props.defaultQuery && this.props.defaultQuery) {\n            this.switchToCanvasMenu(\"query-console\");\n        }\n    }\n\n\n    render() {\n        return (\n            <div className={\"main-content-nav-left\"}>\n                <List type={\"aside-nav\"}>\n                    {/*<li>*/}\n                    {/*    /!*<div className={\"canvasToggle\"}>*!/*/}\n                    {/*    <button onClick={() => this.switchToCanvasMenu(\"query-console\")}*/}\n                    {/*            style={{\"padding\": \"11px 9.5px\"}}*/}\n                    {/*    >*/}\n                    {/*        <FontAwesomeIcon icon={faTerminal}/>*/}\n                    {/*    </button>*/}\n                    {/*    /!*</div>*!/*/}\n                    {/*</li>*/}\n                    <li>\n                        <div className={\"canvasToggle\"}>\n                            <button className={this.props.canvasType === \"graph\" ? \"selected\" : \"\"}\n                                    style={{\"padding\": \"11px 11px\", 'fontSize': \"11px\"}}\n                                    onClick={() => this.props.canvasCtrl.switchCanvasTo(\"graph\")}>\n                                <FontAwesomeIcon icon={faProjectDiagram}/>\n                            </button>\n                            <button className={this.props.canvasType === \"table\" ? \"selected\" : \"\"}\n                                    onClick={() => this.props.canvasCtrl.switchCanvasTo(\"table\")}>\n                                <FontAwesomeIcon icon={faTable}/>\n                            </button>\n                            {/*<button className={this.props.canvasType === \"json\" ? \"selected\" : \"\"}*/}\n                            {/*        onClick={() => this.props.canvasCtrl.switchCanvasTo(\"json\")}>JSON*/}\n                            {/*</button>*/}\n                            {/*<a className={this.canvasType === \"raw\" ? \"selected\" : \"\"}*/}\n                            {/*   onClick={() => this.props.switchCanvasTo(\"raw\")}>Raw</a>*/}\n\n                        </div>\n                    </li>\n\n\n                    {/*<li>*/}\n                    {/*    <button onClick={() => alert(\"Still in the Design stage\")}>*/}\n                    {/*        <FontAwesomeIcon icon={faSave}/>*/}\n                    {/*    </button>*/}\n                    {/*</li>*/}\n                    <li>\n                        <button title={\"clear the canvas\"}\n                                onClick={() => this.props.canvasCtrl.confirmFlushCanvas()}>\n                            <FontAwesomeIcon icon={faTrashAlt}/>\n                        </button>\n                    </li>\n                    <li style={{\"display\": this.props.canvasType === \"graph\" ? \"\" : \"none\"}}>\n                        <button title={\"re render the canvas\"}\n                                 onClick={() => this.props.canvasCtrl.confirmRedrawCanvas()}>\n                            <FontAwesomeIcon icon={faSync}/>\n                        </button>\n                    </li>\n                    <li style={{\"display\": this.props.canvasType === \"graph\" ? \"\" : \"none\"}}>\n                        <button onClick={() => this.props.canvasCtrl.downloadCanvasImage()}>\n                            <FontAwesomeIcon icon={faCamera}/>\n                        </button>\n                    </li>\n                    <li style={{\"display\": this.props.canvasType === \"graph\" ? \"\" : \"none\"}}>\n                        <button onClick={() => this.switchToCanvasMenu(\"focus-node\")}>\n                            <FontAwesomeIcon icon={faSearch}/>\n                        </button>\n                    </li>\n                    <li style={{\"display\": \"none\"}}>\n                        <button onClick={() => this.switchToCanvasMenu(\"filter-nodes\")}>\n                            <FontAwesomeIcon icon={faFilter}/>\n                        </button>\n                    </li>\n                </List>\n                <List type={\"aside-nav\"}>\n\n\n                    {/*<li>*/}\n                    {/*    <button onClick={() => this.props.setRightContentName(\"support\")}>*/}\n                    {/*        <FontAwesomeIcon icon={faLifeRing}/>*/}\n                    {/*    </button>*/}\n                    {/*</li>*/}\n                    {/*<li>*/}\n                    {/*    <button onClick={() => this.props.setRightContentName(\"about\")}>*/}\n                    {/*        <FontAwesomeIcon icon={faInfoCircle}/>*/}\n                    {/*    </button>*/}\n                    {/*</li>*/}\n                </List>\n\n                {\n                    this.state.canvasMenuType === \"filter-nodes\"\n                        ? (<FilterNodes onClose={this.switchToCanvasMenu.bind(this)}/>)\n                        // : this.state.canvasMenuType === \"query-console\"\n                        // // && (this.props.defaultQuery && !this.props.defaultQuery.query)\n                        // ? (\n                        //     <QueryConsole\n                        //         makeQuery={this.props.makeQuery}\n                        //         connector={this.props.connector}\n                        //         defaultQuery={this.props.defaultQuery}\n                        //         // value={this.state.defaultQuery}\n                        //         onClose={() => {\n                        //             this.switchToCanvasMenu(null);\n                        //             this.props.setDefaultQuery(\"\");\n                        //         }}\n                        //     />\n                        // )\n                        : this.state.canvasMenuType === \"focus-node\"\n                        ? (<FocusNode\n                            onClose={this.switchToCanvasMenu.bind(this)}\n                            dataStore={this.props.dataStore}\n                            getGraphicsEngine={this.props.getGraphicsEngine}\n                            setFocusedNodes={this.props.setFocusedNodes}\n                        />)\n                        : (<Fragment/>)\n                }\n            </div>\n        );\n    }\n\n}\n","/*\n\n */\n\n\nexport default class CanvasController {\n\n    constructor(connector, dataStore,\n                updateCanvasState,\n                setStatusMessage,\n                flushCanvas, setShallReRenderD3Canvas) {\n        this.connector = connector;\n        this.dataStore = dataStore;\n        this.updateCanvasState = updateCanvasState\n        this.setStatusMessage = setStatusMessage\n        this.flushCanvas = flushCanvas\n        this.setShallReRenderD3Canvas = setShallReRenderD3Canvas\n    }\n\n\n    switchCanvasTo(canvasType) {\n        this.updateCanvasState({\n            canvasType: canvasType,\n        });\n        this.setStatusMessage(\"Canvas switched to \" + canvasType);\n    }\n\n\n    confirmFlushCanvas() {\n        let r = window.confirm(\"Are you sure you want to clear the canvas\");\n        if (r === true) {\n            this.flushCanvas();\n        }\n    }\n\n    confirmRedrawCanvas() {\n\n        let r = window.confirm(\"Are you sure you want to re-draw the canvas\");\n        if (r === true) {\n            // this.setState({shallReRenderD3Canvas: true})\n            this.setShallReRenderD3Canvas(true);\n        }\n    }\n\n\n    downloadCanvasImage() {\n        // Source from:  http://stackoverflow.com/questions/18480474/how-to-save-an-image-from-canvas\n        const canvas = document.querySelector('canvas');\n        const filename = \"image.png\";\n        /// create an \"off-screen\" anchor tag\n        var lnk = document.createElement('a'), e;\n\n        /// the key here is to set the download attribute of the a tag\n        lnk.download = filename;\n\n        /// convert canvas content to data-uri for link. When download\n        /// attribute is set the content pointed to by link will be\n        /// pushed as \"download\" in HTML5 capable browsers\n        lnk.href = canvas.toDataURL(\"image/png;base64\");\n\n        /// create a \"fake\" click-event to trigger the download\n        if (document.createEvent) {\n            e = document.createEvent(\"MouseEvents\");\n            e.initMouseEvent(\"click\", true, true, window,\n                0, 0, 0, 0, 0, false, false, false,\n                false, 0, null);\n\n            lnk.dispatchEvent(e);\n        } else if (lnk.fireEvent) {\n            lnk.fireEvent(\"onclick\");\n        }\n    }\n\n}\n","import React from \"react\";\nimport \"./focused-nodes-list.scss\";\nimport GEList from \"../../ui-components/lists/list\";\nimport PropTypes from \"prop-types\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faWindowClose\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {invertColor} from \"../../core/utils\";\n\nexport default class FocusedNodesList extends React.Component {\n\n    static defaultProps = {\n        focusedNodes: [],\n        removeFocusedNode: (nodeId) => console.log(\"removedFocusedNode\", nodeId)\n    }\n\n    static propTypes = {\n        focusedNodes: PropTypes.array,\n        removeFocusedNode: PropTypes.func\n    }\n\n    removeFocusedNode(nodeId) {\n        console.log(\"removeFocusedNode\", nodeId);\n        this.props.removeFocusedNode(nodeId);\n    }\n\n    render() {\n        return (\n            <div className={\"focused-nodes-list\"}>\n                <GEList>\n                    {\n                        this.props.focusedNodes.map((focusedNode, index) => {\n                            console.log(\"=====focusedNode\", focusedNode);\n                            return (\n                                <li key={index} className={\"focused-node\"}\n                                    style={{\n                                        \"backgroundColor\": focusedNode.meta.shapeOptions.fillColorHex,\n                                        \"color\": invertColor(focusedNode.meta.shapeOptions.fillColorHex, true)\n                                    }}>\n                                    {focusedNode.meta.labelOptions.labelText}\n                                    <span className={\"close\"}\n                                          style={{\"color\": invertColor(focusedNode.meta.shapeOptions.fillColorHex, true)}}\n                                          onClick={() => this.removeFocusedNode(focusedNode.id)}>\n                                        <FontAwesomeIcon icon={faWindowClose}/>\n                                    </span>\n                                </li>\n                            )\n                        })\n                    }\n                </GEList>\n\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ErrorBoundary from \"./error-boundary\";\nimport PIXICanvas from \"./graph/pixi-canvas\";\nimport JSONCanvas from \"./json/json\";\nimport TableCanvas from \"./table/table\";\nimport RawResponsesCanvas from \"./raw-response/raw-responses\";\nimport CanvasNav from \"./canvas-nav\";\nimport CanvasController from \"./controller\";\nimport FocusedNodesList from \"./graph/focused-nodes-list\";\n// import GetStarted from \"../viewlets/get-started\";\n\nexport default class Canvas extends React.Component {\n\n    static defaultProps = {\n        setHideVertexOptions: () => console.error(\"setHideVertexOptions not set\",),\n        setSelectedElementData: (selectedData) => console.error(\"setSelectedElementData not set\", selectedData),\n        setRightContentName: (contentName) => console.error(\"setRightContentName not set\", contentName),\n        setMiddleBottomContentName: (contentName) => console.error(\"setMiddleBottomContentName not set\", contentName),\n        middleBottomContentName: null,\n        selectedElementData: null,\n        setStatusMessage: (message) => console.debug(\"setStatusMessage not set\", message),\n        showVertexOptions: (selectedLabel) => console.debug(\"this.showVertexOptions not set\", selectedLabel),\n\n        connector: false,\n        dataStore: null,\n        resetShallReRenderD3Canvas: () => console.log(\"resetShallReRenderD3Canvas\"),\n        shallReRenderD3Canvas: false,\n        makeQuery: () => console.error(\"makeQuery not set\"),\n        flushCanvas: () => console.error(\"flushCanvas not set\"),\n        setShallReRenderD3Canvas: (status) => console.error(\"setShallReRenderD3Canvas not set\", status),\n        query: null,\n        addQueryToState: (query) => console.error(\"addQueryToState not implemented\", query)\n        // setFocusedNodes: (nodes) => console.error(\"setFocusedNodes not set\"),\n    }\n\n    static propTypes = {\n        setSelectedElementData: PropTypes.func,\n        setMiddleBottomContentName: PropTypes.func,\n        setHideVertexOptions: PropTypes.func,\n        setRightContentName: PropTypes.func,\n        requestBuilder: PropTypes.object,\n        dataStore: PropTypes.object,\n        connector: PropTypes.object,\n        middleBottomContentName: PropTypes.string,\n\n        showVertexOptions: PropTypes.func,\n        shallReRenderD3Canvas: PropTypes.bool,\n        makeQuery: PropTypes.func,\n\n        resetShallReRenderD3Canvas: PropTypes.func,\n        selectedElementData: PropTypes.object,\n        setStatusMessage: PropTypes.func,\n\n        flushCanvas: PropTypes.func,\n        setShallReRenderD3Canvas: PropTypes.func,\n\n        query: PropTypes.string,\n        addQueryToState: PropTypes.func\n\n        // setFocusedNodes: PropTypes.func\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            defaultQuery: \"\",\n            canvasType: \"graph\",\n            graphicsEngine: null,\n            focusedNodes: [] //\n        }\n        // this.updateCanvasState = this.updateCanvasState.bind(this)\n        this.canvasCtrl = new CanvasController(this.props.connector,\n            this.props.dataStore,\n            this.updateCanvasState.bind(this),\n            this.props.setStatusMessage,\n            this.props.flushCanvas,\n            this.props.setShallReRenderD3Canvas,\n        );\n\n\n    }\n\n    setFocusedNodes(nodes) {\n        this.setState({focusedNodes: nodes});\n    }\n\n    getFocusedNodes() {\n        return this.state.focusedNodes;\n    }\n\n    updateCanvasState(message) {\n        this.setState(message);\n    }\n\n    setGraphicsEngine(graphicsEngine) {\n        this.setState({graphicsEngine: graphicsEngine})\n    }\n\n    getGraphicsEngine() {\n        return this.state.graphicsEngine;\n    }\n\n    componentDidUpdate() {\n        document.querySelector(\".main-content-body\").addEventListener(\"contextmenu \", function () {\n            console.log(\"Right Click\");\n            return false;\n        });\n    }\n\n    removeFocusedNode(nodeId) {\n        //\n\n        let graphicsEngine = this.getGraphicsEngine();\n        let focusedNodes = graphicsEngine.dataStore.getUniqueFocusedNodes();\n        graphicsEngine.dataStore.removeNodeFromFocus(nodeId);\n        let indexId = null\n        focusedNodes.forEach((focusedNode, index) => {\n            if (focusedNode.id === nodeId) {\n                indexId = index\n                return index;\n            }\n        });\n        focusedNodes.splice(indexId, 1);\n        console.log(\"===indexId\", indexId);\n        console.log(\"focusedNodes removed\", focusedNodes);\n        this.setFocusedNodes(focusedNodes);\n\n        if (focusedNodes.length !== 0) {\n            graphicsEngine.graphicsStore.focusOnElements(focusedNodes);\n        } else {\n            graphicsEngine.graphicsStore.resetFocus();\n        }\n        graphicsEngine.requestRender();\n\n    }\n\n    setDefaultQuery(query) {\n        this.setState({defaultQuery: query});\n        this.props.addQueryToState(query);\n    }\n\n\n    render() {\n        console.log(\"canvasQuery:\",this.state.defaultQuery,\"---\", this.props.query);\n        return (\n\n            <div\n                style={{\n                    height: \"inherit\"\n                }}\n            >\n\n                <CanvasNav\n                    canvasType={this.state.canvasType}\n                    canvasCtrl={this.canvasCtrl}\n                    makeQuery={this.props.makeQuery}\n                    connector={this.props.connector}\n                    dataStore={this.props.dataStore}\n                    getGraphicsEngine={this.getGraphicsEngine.bind(this)}\n                    setFocusedNodes={this.setFocusedNodes.bind(this)}\n                    defaultQuery={this.props.query}\n                    setDefaultQuery={this.setDefaultQuery.bind(this)}\n                    setRightContentName={this.props.setRightContentName}\n\n                    // switchCanvasTo={this.switchCanvasTo.bind(this)}\n                    // confirmFlushCanvas={this.confirmFlushCanvas.bind(this)}\n                    // confirmRedrawCanvas={this.confirmRedrawCanvas.bind(this)}\n                />\n\n                <div className={\"main-content-body\"}>\n                    {\n                        this.state.canvasType === \"graph\" && this.props.connector.getLastResponse()\n                            ? <FocusedNodesList focusedNodes={this.state.focusedNodes}\n                                                removeFocusedNode={this.removeFocusedNode.bind(this)}/>\n                            : <span></span>\n                    }\n                    {/*{*/}\n                    {/*    !this.props.connector.getLastResponse()*/}\n                    {/*        ? <GetStarted/>*/}\n                    {/*        : <span></span>*/}\n                    {/*}*/}\n\n                    <ErrorBoundary>\n                        {(() => {\n                            if (this.state.canvasType === \"graph\" && this.props.connector.getLastResponse()) {\n                                return (\n                                    <div style={{\"width\": \"100%\", \"height\": \"100%\"}}>\n                                        <PIXICanvas\n                                            // setShowVertexOptions={this.setShowVertexOptions.bind(this)}\n                                            setHideVertexOptions={this.props.setHideVertexOptions}\n                                            setSelectedElementData={this.props.setSelectedElementData}\n                                            setRightContentName={this.props.setRightContentName}\n                                            setMiddleBottomContentName={this.props.setMiddleBottomContentName}\n                                            middleBottomContentName={this.props.middleBottomContentName}\n\n                                            selectedElementData={this.props.selectedElementData}\n                                            setStatusMessage={this.props.setStatusMessage}\n\n                                            setGraphicsEngine={this.setGraphicsEngine.bind(this)}\n                                            connector={this.props.connector}\n                                            dataStore={this.props.dataStore}\n                                            resetShallReRenderD3Canvas={this.props.resetShallReRenderD3Canvas}\n                                            shallReRenderD3Canvas={this.props.shallReRenderD3Canvas}\n                                            makeQuery={this.props.makeQuery}\n                                            setFocusedNodes={this.setFocusedNodes.bind(this)}\n                                            getFocusedNodes={this.getFocusedNodes.bind(this)}\n                                            setDefaultQuery={this.setDefaultQuery.bind(this)}\n                                        />\n\n\n                                    </div>\n                                )\n                            } else if (this.state.canvasType === \"json\" && this.props.connector.getLastResponse()) {\n                                return (\n                                    <JSONCanvas\n                                        dataStore={this.props.dataStore}\n                                    />\n                                )\n                            } else if (this.state.canvasType === \"table\" && this.props.connector.getLastResponse()) {\n                                return (\n                                    <TableCanvas\n                                        dataStore={this.props.dataStore}\n                                    />\n                                )\n                            } else if (this.state.canvasType === \"raw\" && this.props.connector.getLastResponse()) {\n                                return (\n                                    <RawResponsesCanvas\n                                        connector={this.props.connector}\n                                    />\n                                )\n                            } else {\n                                return (\n                                    <span></span>\n                                )\n                            }\n                        })()}\n                    </ErrorBoundary>\n\n\n                </div>\n            </div>\n\n        )\n    }\n}\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPlayCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./query-console.scss\";\nimport PropTypes from \"prop-types\";\nimport GEPanel from \"../../ui-components/panels/panel\";\n\nconst Mousetrap = require(\"mousetrap\");\n\nexport default class QueryConsole extends React.Component {\n\n    static defaultProps = {\n        makeQuery: () => console.log(\"No Query Handler added yet\"),\n        connector: null,\n        flushCanvas: () => console.log(\"flushCanvas added  to QueryConsole\"),\n        defaultPlaceholderText: \"g.V().limit(5).toList();\",\n        onClose: () => console.log(\"onClose not implemented\"),\n        defaultQuery: null\n    }\n\n    static propTypes = {\n        requestBuilder: PropTypes.object,\n        onClose: PropTypes.func,\n        makeQuery: PropTypes.func,\n        connector: PropTypes.object,\n        flushCanvas: PropTypes.func,\n        defaultPlaceholderText: PropTypes.string,\n        defaultQuery: PropTypes.string\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            defaultQuery: this.props.defaultQuery\n        }\n    }\n\n    componentDidMount() {\n        document.getElementsByTagName('textarea')[0].focus();\n        Mousetrap.bind(\"esc\", () => this.props.onClose());\n    }\n\n    componentWillUnmount() {\n        // super.componentWillUnmount();\n        Mousetrap.unbind(\"esc\");\n    }\n\n\n    onEnterPress = (e) => {\n        if (e.keyCode === 13 && e.shiftKey === true) {\n            e.preventDefault();\n            e.stopPropagation();\n            this.formRef.dispatchEvent(new Event('submit'));\n\n            // document.getElementById('queryForm').submit();\n            // this.onFormSubmit(e);\n            // this.refs.formToSubmit.submit();\n        }\n    }\n\n    // componentDidUpdate(prevProps) {\n    //     // Typical usage (don't forget to compare props):\n    //     if (this.props.defaultQuery !== prevProps.defaultQuery ) {\n    //         this.setState({defaultQuery: this.props.defaultQuery});\n    //     }\n    //\n    //\n    // }\n\n    onQueryChange(e) {\n        this.setState({defaultQuery: e.target.value});\n    }\n\n\n    onFormSubmit(_this, e) {\n        e.preventDefault();\n        e.stopPropagation();\n        console.log(\"=====_this\", _this);\n        if (e.target.query.value) {\n            const query = _this.props.connector.requestBuilder.rawQuery(e.target.query.value)\n            _this.props.makeQuery(query, {source: \"console\"});\n        } else {\n            alert(\"Query cannot be null\")\n        }\n    }\n\n\n    render() {\n        console.log(\"queryConsole=======\", this.props.defaultQuery);\n        return (\n\n            <div className={\"queryConsole\"}>\n                <GEPanel\n                    title={\"Query Console\"}\n                    // onClickClose={() => this.props.onClose(null)}\n                    showToggleBtn={false}\n                    showCloseBtn={false}\n\n                >\n                    <div className={\"p-10\"}>\n\n                        <form ref={e => this.formRef = e} id={\"queryForm\"}\n                              onSubmit={(e) => this.onFormSubmit(this, e)}>\n                            {/*<p className={\"small \"}>Shift+Enter to submit the Query.</p>*/}\n\n\n                            <textarea\n                                spellCheck={false}\n                                autoFocus\n                                onChange={this.onQueryChange.bind(this)}\n                                name={\"query\"}\n                                onKeyDown={this.onEnterPress.bind(this)}\n                                value={this.state.defaultQuery}\n                                placeholder={this.props.defaultPlaceholderText}/>\n                            <div className={\"queryOptions\"}>\n                                <div className={\"float-left\"}>\n                                    {/*    <label htmlFor=\"isQueryRepeatEnabled\">*/}\n                                    {/*        <input type=\"checkbox\" name=\"isQueryRepeatEnabled\"*/}\n                                    {/*            // defaultChecked={\"checked\"}*/}\n                                    {/*               onClick={this.handleChange.bind(this)}*/}\n                                    {/*            // onChange={this.handleQueryRepeater}*/}\n                                    {/*               value=\".\"/>*/}\n                                    {/*        Repeat query <span className={\"repeatInfoCls\"}>every*/}\n                                    {/*<input type=\"number\"*/}\n                                    {/*       min={5}*/}\n                                    {/*       defaultValue={5}*/}\n                                    {/*    // value={15}*/}\n                                    {/*       name={\"queryRepeatFrequency\"}/>s.*/}\n                                    {/*    </span>*/}\n                                    {/*    </label>*/}\n                                    <button className={\"button m-0\"} type={\"submit\"}\n                                            onSubmit={(e) => this.onFormSubmit.bind(this, e)}\n                                    >\n                                        <FontAwesomeIcon icon={faPlayCircle}/> Run Query\n                                    </button>\n                                </div>\n                                <div className={\"float-right\"}>\n\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </GEPanel>\n            </div>\n\n        );\n    }\n}\n","import BaseView from \"./base\";\nimport React from \"react\";\nimport {redirectToConnectIfNeeded} from \"../core/utils\";\nimport GEHeader from \"../ui-components/layout/header\";\nimport List from \"../ui-components/lists/list\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faCog, faCubes,\n    faHistory, faHome, faInfoCircle, faLifeRing,\n    faStickyNote, faTerminal\n} from \"@fortawesome/free-solid-svg-icons\";\nimport Indicator from \"../ui-components/indicator/indicator\";\nimport Main from \"../ui-components/layout/main\";\n// import AsideNav from \"../ui-components/layout/aside-nav\";\nimport MainContent from \"../ui-components/layout/main-content\";\nimport AsideLeft from \"../ui-components/layout/aside-left\";\nimport GEPanel from \"../ui-components/panels/panel\";\nimport MainContentMiddle from \"../ui-components/layout/main-content-middle\";\nimport MainContentRight from \"../ui-components/layout/main-content-right\";\nimport AsideBottom from \"../ui-components/layout/aside-bottom\";\nimport GEFooter from \"../ui-components/layout/footer\";\nimport AsideRight from \"../ui-components/layout/aside-right\";\nimport SettingsComponent from \"../viewlets/settings\";\nimport LearnComponent from \"../viewlets/learn\";\nimport HistoryComponent from \"../viewlets/history\";\nimport SupportComponent from \"../viewlets/support\";\n// import QueryConsole from \"../canvas/nav-ui-components/query-console\";\nimport VerticesManagement from \"../viewlets/vertices-management\";\nimport EdgesManagement from \"../viewlets/edges-management\";\nimport AboutComponent from \"../viewlets/about\";\nimport {REPO_URL} from \"../config\";\nimport SelectedData from \"../viewlets/selected-data\";\nimport VertexOptions from \"../viewlets/vertex-options\";\nimport FounderNote from \"../viewlets/founder-note\";\nimport WhatsNew from \"../viewlets/whats-new\";\nimport GEList from \"../ui-components/lists/list\";\nimport Canvas from \"../canvas/canvas\";\nimport QueryConsole from \"../canvas/nav-ui-components/query-console\";\n\nconst Mousetrap = require(\"mousetrap\");\n\nexport default class ExplorerView extends BaseView {\n\n\n    state = {\n        ...this.state,\n        focusedNodes: []\n    }\n\n    processResponse(response) {\n        super.processResponse(response);\n        this.extendGraph(response);\n    }\n\n\n    // removeFocusedNode(nodeId){\n    //     console.log(\"removeFocusedNode\", nodeId);\n    //\n    // }\n\n    // startQuery(query) {\n    //     this.setState({\n    //         query: query,\n    //     })\n    // }\n\n    getQueryFromUrl() {\n        return new URLSearchParams(window.location.search).get(\"query\");\n    }\n\n    getLatestResponse() {\n        const lastResponse = this.connector.getLastResponse();\n        if (lastResponse) {\n            return {\n                status: lastResponse.getStatusCode(),\n                response: lastResponse.getResponseData(),\n                error: lastResponse.getError()\n            }\n        } else {\n            return {\n                status: null,\n                response: null,\n                error: null\n            }\n        }\n    }\n\n    setupHotKeys() {\n        Mousetrap.bind(\"ctrl+1\", () => this.switchCanvasTo(\"graph\"));\n        Mousetrap.bind(\"ctrl+2\", () => this.switchCanvasTo(\"table\"));\n        Mousetrap.bind(\"ctrl+3\", () => this.switchCanvasTo(\"json\"));\n        Mousetrap.bind(\"ctrl+4\", () => this.switchCanvasTo(\"raw\"));\n        // Mousetrap.bind(\"shift+/\", () => this.setLeftContent(\"query-console\"));\n        Mousetrap.bind(\"shift+h\", () => this.setLeftContent(\"history\"));\n        Mousetrap.bind(\"esc\", () => this.setLeftContent(null));\n    }\n\n    unSetupHotKeys() {\n        Mousetrap.unbind(\"ctrl+1\");\n        Mousetrap.unbind(\"ctrl+2\");\n        Mousetrap.unbind(\"ctrl+3\");\n        Mousetrap.unbind(\"ctrl+4\");\n        Mousetrap.unbind(\"shift+/\");\n        Mousetrap.unbind(\"shift+h\");\n        Mousetrap.unbind(\"esc\");\n    }\n\n    componentWillUnmount() {\n        super.componentWillUnmount();\n        this.unSetupHotKeys();\n    }\n\n    componentDidMount() {\n        redirectToConnectIfNeeded();\n        super.componentDidMount();\n        setTimeout(() => this.loadQueryFromUrl(), 300);\n        this.setupHotKeys()\n    }\n\n    loadQueryFromUrl() {\n        const query = this.getQueryFromUrl();\n        if (query && query !== \"null\") {\n            this.makeQuery(query, {source: \"console\"});\n        }\n    }\n\n    onErrorMessageFlyoutClose() {\n        this.setState({\n            \"errorMessage\": null\n        })\n    }\n\n\n    addQueryToConsole(query) {\n        this.addQueryToState(query);\n    }\n\n\n    reRenderCanvas() {\n        super.reRenderCanvas();\n        // const {vertices, edges } = this.dataStore.getAllData()\n        // this.resetShallReRenderD3Canvas();\n        this.setState({\n            // ...this.dataStore.getAllData(),\n            verticesCount: this.dataStore.getVerticesCount(),\n            edgesCount: this.dataStore.getEdgesCount(),\n        })\n\n    }\n\n    render() {\n        // console.log(\"explorer render() \", this.connector.getLastResponse(), this.connector.responsesList)\n        return (\n            <div className=\"App\">\n                <GEHeader>\n                    <List type={\"nav-left\"}>\n                        <li className={\"logo\"}>\n                            <a href=\"/\" className={\"no-bg\"}>\n                                <strong>Graph Explorer</strong>\n                            </a>\n                        </li>\n                    </List>\n                    <List type={\"nav-right\"}>\n\n\n                        <li>\n                            <button className={this.state.rightContentName === \"learn\" ? \"selected no-bg\" : \"no-bg\"}\n                                    onClick={() => this.setRightContentName(\"learn\")}>\n                                {/* eslint-disable-next-line react/no-unescaped-entities */}\n                                <FontAwesomeIcon icon={faCubes}/> Get Started\n                            </button>\n                        </li>\n                        {/*<li>*/}\n                        {/*    <button className={\"no-bg\"} onClick={() => this.setRightContentName(\"history\")}>*/}\n                        {/*        <FontAwesomeIcon icon={faHistory}/>*/}\n                        {/*    </button>*/}\n                        {/*</li>*/}\n\n                        {/*<li>*/}\n                        {/*    <button className={\"no-bg\"} onClick={() => this.setRightContentName(\"learn\")}>*/}\n                        {/*        <FontAwesomeIcon icon={faBook}/>*/}\n                        {/*    </button>*/}\n                        {/*</li>*/}\n\n                        <li>\n                            <button\n                                className={this.state.rightContentName === \"founder-note\" ? \"selected no-bg\" : \"no-bg\"}\n                                onClick={() => this.setRightContentName(\"founder-note\")}>\n                                <FontAwesomeIcon icon={faStickyNote}/>\n                            </button>\n                        </li>\n\n                        <li>\n                            <button className={this.state.rightContentName === \"settings\" ? \"selected no-bg\" : \"no-bg\"}\n                                    onClick={() => this.setRightContentName(\"settings\")}>\n                                <FontAwesomeIcon icon={faCog}/>\n                            </button>\n                        </li>\n\n\n                        <li style={{\"padding\": \"0 5px\"}}>\n                            <a style={{\"padding\": 0}} rel=\"noopener noreferrer\" target={\"_blank\"} href={REPO_URL}>\n                                <img\n                                    src=\"https://img.shields.io/github/stars/invanalabs/graph-explorer?color=%23429770&label=stars&logo=github&style=flat-square\"\n                                    alt=\"\"/>\n                            </a>\n                        </li>\n                    </List>\n                </GEHeader>\n                <Main>\n                    {/*<AsideNav>*/}\n                    {/*    <List type={\"aside-nav\"}>*/}\n                    {/*        /!*<li>*!/*/}\n                    {/*        /!*    <a onClick={() => this.setLeftContent(\"something\")}>*!/*/}\n                    {/*        /!*        <FontAwesomeIcon icon={faSearch}/>*!/*/}\n                    {/*        /!*    </a>*!/*/}\n                    {/*        /!*</li>*!/*/}\n                    {/*        <li>*/}\n                    {/*            <button onClick={() => this.setLeftContent(\"history\")}>*/}\n                    {/*                <FontAwesomeIcon icon={faHistory}/>*/}\n                    {/*            </button>*/}\n                    {/*        </li>*/}\n                    {/*        <li>*/}\n                    {/*            <button onClick={() => this.setLeftContent(\"settings\")}>*/}\n                    {/*                <FontAwesomeIcon icon={faCog}/>*/}\n                    {/*            </button>*/}\n                    {/*        </li>*/}\n                    {/*        <li>*/}\n                    {/*            <button onClick={() => this.setLeftContent(\"support\")}>*/}\n                    {/*                <FontAwesomeIcon icon={faLifeRing}/>*/}\n                    {/*            </button>*/}\n                    {/*        </li>*/}\n                    {/*        <li>*/}\n                    {/*            <button onClick={() => this.setLeftContent(\"learn\")}>*/}\n                    {/*                <FontAwesomeIcon icon={faBook}/>*/}\n                    {/*            </button>*/}\n                    {/*        </li>*/}\n\n                    {/*        <li>*/}\n                    {/*            <button onClick={() => this.setLeftContent(\"about\")}>*/}\n                    {/*                <FontAwesomeIcon icon={faInfoCircle}/>*/}\n                    {/*            </button>*/}\n                    {/*        </li>*/}\n                    {/*    </List>*/}\n                    {/*</AsideNav>*/}\n                    <MainContent>\n                        <AsideLeft extraClass={this.state.leftContentName ? \"\" : \"closed\"}>\n\n                        </AsideLeft>\n\n                        <MainContentRight\n                            extraClass={this.state.leftContentName ? \"\" : \"expanded\"}\n                            secondaryChild={\n                                this.state.bottomContentName === \"error-console\" ? (\n                                    <AsideBottom>\n                                        <GEPanel\n                                            title={\"Response Console\"}\n                                            onClickClose={() => this.setBottomContentName(null)}\n                                            showToggleBtn={false}\n                                        >\n                                            {this.state.errorMessage\n                                                ? <pre>{JSON.stringify(this.state.errorMessage, null, 2)}</pre>\n                                                : <span>\n                                                    <pre>{JSON.stringify(this.getLatestResponse().error, null, 2)}</pre>\n                                                </span>\n                                            }\n\n                                        </GEPanel>\n                                    </AsideBottom>\n                                ) : (\n                                    <span/>\n                                )\n                            }\n                        >\n                            <Canvas\n                                setStatusMessage={this.setStatusMessage.bind(this)}\n\n                                setHideVertexOptions={this.setHideVertexOptions.bind(this)}\n                                setSelectedElementData={this.setSelectedElementData.bind(this)}\n                                setRightContentName={this.setRightContentName.bind(this)}\n                                setMiddleBottomContentName={this.setMiddleBottomContentName.bind(this)}\n                                middleBottomContentName={this.state.middleBottomContentName}\n\n                                selectedElementData={this.state.selectedElementData}\n\n                                connector={this.connector}\n                                dataStore={this.dataStore}\n                                resetShallReRenderD3Canvas={this.resetShallReRenderD3Canvas.bind(this)}\n                                shallReRenderD3Canvas={this.state.shallReRenderD3Canvas}\n                                setShallReRenderD3Canvas={this.setShallReRenderD3Canvas.bind(this)}\n                                makeQuery={this.makeQuery.bind(this)}\n\n                                flushCanvas={this.flushCanvas.bind(this)}\n\n                                query={this.state.query}\n\n                                addQueryToState={this.addQueryToState.bind(this)}\n\n                            />\n                        </MainContentRight>\n                        <MainContentMiddle>\n                            <div\n                                className={\n                                    this.state.middleBottomContentName\n                                        ? \"main-content-top\"\n                                        : \"main-content-top bottom-closed\"\n                                }\n                            >\n                                {/*<GEPanel*/}\n                                {/*    title={\"Query Console\"}*/}\n                                {/*    showToggleBtn={false}*/}\n                                {/*    showCloseBtn={false}*/}\n                                {/*>*/}\n                                {/*    <QueryConsole*/}\n                                {/*        onQuerySubmit={this.onQuerySubmit.bind(this)}*/}\n                                {/*        query={this.state.query}*/}\n                                {/*        flushCanvas={this.flushCanvas.bind(this)}*/}\n                                {/*        // onClose={this.onLeftFlyOutClose.bind(this)}*/}\n                                {/*    />*/}\n                                {/*</GEPanel>        */}\n\n                                <div className={\"main-content-nav\"}>\n                                    <GEList>\n                                        <li style={{\"paddingLeft\": \"3px\"}}>\n                                            <button\n                                                className={this.state.middleTopContentName === 'vertices-management' ? \"active\" : ''}\n                                                onClick={() => this.setMiddleTopContentName(\"vertices-management\")}>\n                                                Vertices\n                                            </button>\n                                        </li>\n                                        <li>\n                                            <button\n                                                className={this.state.middleTopContentName === 'edges-management' ? \"active\" : ''}\n                                                onClick={() => this.setMiddleTopContentName(\"edges-management\")}>\n                                                Edges\n                                            </button>\n                                        </li>\n                                        {/*<li>*/}\n                                        {/*    <button*/}\n                                        {/*        className={this.state.middleTopContentName === \"query-console\" ? 'active' : ''}*/}\n                                        {/*        onClick={() => this.setMiddleTopContentName(\"query-console\")}>*/}\n                                        {/*        Query Console*/}\n                                        {/*    </button>*/}\n                                        {/*</li>*/}\n                                    </GEList>\n                                </div>\n\n                                {\n                                    this.state.middleTopContentName === \"vertices-management\" ?\n                                        (\n                                            <VerticesManagement\n                                                parentGraphComponent={this}\n                                                setShowVertexOptions={this.setShowVertexOptions.bind(this)}\n                                            />\n\n                                        ) :\n                                        this.state.middleTopContentName === \"edges-management\" ?\n                                            (\n                                                <EdgesManagement\n                                                    parentGraphComponent={this}\n                                                    setShowVertexOptions={this.setShowVertexOptions.bind(this)}\n                                                />\n\n                                            ) : (<div></div>)\n                                    // this.state.middleTopContentName === \"query-console\" ? (\n                                    //     <QueryConsole\n                                    //         makeQuery={this.makeQuery.bind(this)}\n                                    //         query={this.state.query}\n                                    //         connector={this.connector}\n                                    //         flushCanvas={this.flushCanvas.bind(this)}\n                                    //     />\n                                    // ) : (<div></div>)\n\n                                }\n                                {/*<GEPanel*/}\n                                {/*    title={\"Vertices\"}*/}\n                                {/*    showToggleBtn={false}*/}\n                                {/*    showCloseBtn={false}*/}\n                                {/*>*/}\n                                {/*</GEPanel>*/}\n                            </div>\n                            <div\n                                className={\n                                    this.state.middleBottomContentName\n                                        ? \"main-content-bottom\"\n                                        : \"main-content-bottom closed\"\n                                }\n                            >\n                                {/*{this.state.middleBottomContentName ? (*/}\n                                {/*    <GEPanel*/}\n                                {/*        title={\"Middle Bottom Content\"}*/}\n                                {/*        showToggleBtn={false}*/}\n                                {/*        onClickClose={() => this.setMiddleBottomContentName(null)}*/}\n                                {/*        // showCloseBtn={true}*/}\n                                {/*    >*/}\n                                {/*        <p>middle bottom here</p>*/}\n                                {/*    </GEPanel>*/}\n                                {/*) : (*/}\n                                {/*    <span/>*/}\n                                {/*)}*/}\n                                {\n\n                                    this.state.middleBottomContentName === \"selected-data-overview\" && this.state.selectedElementData\n                                        ?\n                                        <GEPanel\n                                            // title={\"Selected Element Data\"}\n                                            title={this.state.selectedElementData.meta.labelOptions.labelText\n                                            || this.state.selectedElementData.id.toString()}\n                                            headerStyle={{\n                                                'color': this.state.selectedElementData.type === \"g:Vertex\"\n                                                    ? this.state.selectedElementData.meta.shapeOptions.fillColorHex\n                                                    : this.state.selectedElementData.meta.shapeOptions.strokeColorHex,\n                                                // 'color': invertColor(this.state.selectedElementData.meta.shapeOptions.fillColor, true)\n                                            }}\n                                            showToggleBtn={false}\n                                            showCloseBtn={true}\n                                            onClickClose={() => {\n                                                this.setHideVertexOptions();\n                                                this.setRightContentName(null)\n                                            }}\n                                        >\n                                            <SelectedData\n                                                selectedData={this.state.selectedElementData}\n                                                onClose={() => {\n                                                    this.setSelectedElementData(null);\n                                                    this.setRightContentName(null)\n                                                }}/>\n\n                                        </GEPanel>\n                                        :\n                                        this.state.middleBottomContentName === \"vertex-options\" && this.state.selectedLabel\n                                            ?\n                                            <GEPanel\n                                                title={this.state.selectedLabel + \" | Element Options\"}\n                                                // title={null}\n                                                onClickClose={() => {\n                                                    this.setHideVertexOptions();\n                                                    this.setRightContentName(null)\n                                                }}\n                                                showToggleBtn={false}\n                                            >\n                                                <VertexOptions selectedLabel={this.state.selectedLabel}\n                                                               selectedLabelType={this.state.selectedLabelType}\n                                                               setStatusMessage={this.setStatusMessage.bind(this)}\n                                                               setErrorMessage={this.setErrorMessage.bind(this)}\n                                                               onClose={() => {\n                                                                   this.setHideVertexOptions.bind(this);\n                                                                   this.setRightContentName(null)\n                                                               }}\n                                                               reRenderCanvas={this.reRenderCanvas.bind(this)}\n                                                               setShallReRenderD3Canvas={this.setShallReRenderD3Canvas.bind(this)}\n                                                />\n\n                                            </GEPanel>\n                                            : <span></span>\n                                }\n                            </div>\n\n                        </MainContentMiddle>\n                        <GEList type={\"aside\"}>\n\n                            <li style={{\"marginTop\": \"22px\"}}>\n                                <button onClick={() => this.setRightContentName(null)}\n                                        className={this.state.rightContentName === null ? \"selected\" : \"\"}\n                                >\n                                    <FontAwesomeIcon icon={faHome}/><span>Overview</span>\n                                </button>\n                            </li>\n\n                            <li style={{\"marginTop\": \"97px\"}}>\n                                <button onClick={() => this.setRightContentName(\"query-console\")}\n                                        className={this.state.rightContentName === \"query-console\" ? \"selected\" : \"\"}\n                                >\n                                    <FontAwesomeIcon icon={faTerminal}/><span>Query&nbsp;Console</span>\n                                </button>\n                            </li>\n                            <li style={{\"marginTop\": \"125px\"}}>\n                                <button onClick={() => this.setRightContentName(\"history\")}\n                                        className={this.state.rightContentName === \"history\" ? \"selected\" : \"\"}\n                                >\n                                    <FontAwesomeIcon icon={faHistory}/><span>History</span>\n                                </button>\n                            </li>\n                            <li style={{\"marginTop\": \"80px\"}}>\n                                <button onClick={() => this.setRightContentName(\"support\")}\n                                        className={this.state.rightContentName === \"support\" ? \"selected\" : \"\"}\n                                >\n                                    <FontAwesomeIcon icon={faLifeRing}/><span>Support</span>\n                                </button>\n                            </li>\n                            <li style={{\"marginTop\": \"80px\"}}>\n                                <button onClick={() => this.setRightContentName(\"about\")}\n                                        className={this.state.rightContentName === \"about\" ? \"selected\" : \"\"}\n                                >\n                                    <FontAwesomeIcon icon={faInfoCircle}/><span>About</span>\n                                </button>\n                            </li>\n                        </GEList>\n                    </MainContent>\n                </Main>\n                <GEFooter>\n                    <List type={\"nav-left\"}>\n                        {\n                            this.state.isConnected2Gremlin\n                                ?\n                                <li className={\"ml-5\"}>\n                                    <Indicator isConnected2Gremlin={this.state.isConnected2Gremlin}/>\n                                </li>\n                                : <span></span>\n                        }\n                        <li><span>{this.state.statusMessage} </span></li>\n                        {\n                            this.state.isLoading && this.state.loaderElapsedTimer && this.state.loaderElapsedTimer > 0\n                                ? <li><span>({this.state.loaderElapsedTimer}s elapsed)</span></li>\n                                : <span></span>\n                        }\n                    </List>\n                    <List type={\"nav-right\"}>\n                        <li>\n                            <button className={\"no-bg\"}>{this.getProtocol()} protocol</button>\n                        </li>\n                        {this.getLatestResponse().status\n                            ?\n                            <li>\n                                <button className={\"no-bg\"} onClick={() => this.setBottomContentName(\"error-console\")}>\n                                    <span>{\n                                        this.getLatestResponse().status ?\n                                            this.getLatestResponse().status < 200 && this.getLatestResponse().status > 300\n                                                ? <strong\n                                                    className={\"error-badge\"}>{this.getLatestResponse().status}</strong>\n                                                : <strong\n                                                    className={\"ok-badge\"}>{this.getLatestResponse().status}</strong>\n                                            : <strong>NA</strong>\n                                    }&nbsp;response</span>\n\n                                    <span>\n                                        {this.queryEndedAt - this.queryStartedAt} ms\n                                    </span>\n                                </button>\n                            </li>\n                            : <li><span></span></li>\n                        }\n                        <li>\n                            <span>{this.state.canvasType} canvas</span>\n                        </li>\n                        <li>\n                            <span>{this.dataStore.getVerticesCount()} vertices, {this.dataStore.getEdgesCount()} edges</span>\n                        </li>\n                    </List>\n                </GEFooter>\n\n\n                {this.state.rightContentName ? (\n                    <AsideRight>\n                        {console.log(\"========== rightContentName\", this.state.rightContentName)}\n\n                        {\n                            this.state.rightContentName === \"founder-note\"\n                                ?\n                                <GEPanel\n                                    title={\"Note from Author\"}\n                                    onClickClose={() => this.setRightContentName(null)}\n                                    showToggleBtn={false}\n                                > <FounderNote\n                                    setRightContentName={this.setRightContentName.bind(this)}\n                                    onClose={() => this.setRightContentName(null)}/>\n                                </GEPanel>\n                                : this.state.rightContentName === \"whats-new\"\n                                ?\n                                <GEPanel\n                                    title={\"What's New\"}\n                                    onClickClose={() => this.setRightContentName(null)}\n                                    showToggleBtn={false}\n                                > <WhatsNew\n                                    setLeftContent={this.setLeftContent.bind(this)}\n                                    onClose={() => this.setRightContentName(null)}/>\n                                </GEPanel>\n                                : <span></span>\n                        }\n                        {\n                            this.state.rightContentName === \"settings\"\n                                ? (\n                                    <GEPanel\n                                        title={\"Settings\"}\n                                        onClickClose={() => this.setRightContentName(null)}\n                                        showToggleBtn={false}\n                                    >\n                                        <SettingsComponent/>\n                                    </GEPanel>\n                                ) :\n                                this.state.rightContentName === \"learn\"\n                                    ? (\n                                        <GEPanel\n                                            title={\"Get Started\"}\n                                            onClickClose={() => this.setRightContentName(null)}\n                                            showToggleBtn={false}\n                                        >\n                                            <LearnComponent\n                                                addQueryToConsole={this.addQueryToConsole.bind(this)}\n                                                makeQuery={this.makeQuery.bind(this)}\n                                                onClose={() => this.setLeftContent(null)}\n                                            />\n\n\n                                        </GEPanel>\n                                    ) :\n                                    this.state.rightContentName === \"support\"\n                                        ? (\n                                            <GEPanel\n                                                title={\"Support\"}\n                                                // onClickClose={() => this.setRightContentName(null)}\n                                                showCloseBtn={false}\n                                                showToggleBtn={false}\n                                            >\n                                                <SupportComponent/>\n                                            </GEPanel>\n                                        ) :\n                                        this.state.rightContentName === \"about\"\n                                            ? (\n                                                <GEPanel\n                                                    title={\"About\"}\n                                                    // onClickClose={() => this.setRightContentName(null)}\n                                                    showCloseBtn={false}\n                                                    showToggleBtn={false}\n                                                >\n                                                    <AboutComponent/>\n                                                </GEPanel>\n                                            ) : (<span></span>)\n                        }\n                    </AsideRight>\n                ) : (\n                    <span/>\n                )}\n                {this.state.rightContentName &&\n                (this.state.rightContentName === \"history\"\n                    || this.state.rightContentName === \"query-console\") ? (\n                    <AsideRight size={\"lg\"}>\n                        {\n                            this.state.rightContentName === \"history\" ? (\n                                <GEPanel\n                                    title={\"History\"}\n                                    // onClickClose={() => this.setRightContentName(null)}\n                                    showToggleBtn={false}\n                                    showCloseBtn={false}>\n                                    <HistoryComponent\n                                        makeQuery={this.makeQuery.bind(this)}\n                                        // requestBuilder={this.requestBuilder}\n                                        addQueryToConsole={this.addQueryToConsole.bind(this)}\n                                    />\n                                </GEPanel>\n                            ) : this.state.rightContentName === \"query-console\" ? (\n                                <QueryConsole\n                                    makeQuery={this.makeQuery.bind(this)}\n                                    connector={this.connector}\n                                    defaultQuery={this.state.query}\n                                    // value={this.state.defaultQuery}\n                                    onClose={() => {\n                                        this.setRightContentName(null);\n                                        // this.setDefaultQuery(\"\");\n                                    }}\n                                />\n                            ) : <span></span>\n                        }\n                    </AsideRight>\n                ) : (\n                    <span/>\n                )}\n                {super.render()}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport \"./404.scss\";\nimport PropTypes from \"prop-types\";\n\nexport default class Page404 extends React.Component {\n\n    static propTypes = {\n        location: PropTypes.any\n    }\n\n    render() {\n        const {location} = this.props;\n\n        return (\n            <div className={\"error-view-404\"}>\n                <h2>\n                    No match found for <code>{location.pathname}</code>\n                </h2>\n                <p>\n                    <a href={document.referrer} title={document.referrer}>\n                        &larr; go back{\" \"}\n                    </a>{\" \"}\n                    or <a href={\"/\"}> go home</a>\n                </p>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport Modal from \"../ui-components/modal/modal\";\nimport {setDataToLocalStorage} from \"../core/utils\";\nimport {GE_CONSTANTS, VERSION, ABOUT_TEXT, DEMO_URL} from \"../config\";\nimport \"./connect.scss\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faPlayCircle,\n    faAngleDown,\n    faTimesCircle,\n    faPlug,\n} from \"@fortawesome/free-solid-svg-icons\";\n\n\nexport default class SetupGremlinServerConnection extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            errorMessage: null,\n            showExtraHeaderOptions: false,\n            extraHeadersCount: 1\n        }\n    }\n\n    checkIfSecureProtocol(url) {\n        const protocol = new URL(url).protocol;\n        return protocol === \"https:\" || protocol === \"wss:\";\n    }\n\n\n    getHeaders() {\n\n        let headers = {};\n        document.querySelectorAll(\".headerItem\").forEach((elem) => {\n            const key = elem.querySelector(\".headerKey\").value;\n            const val = elem.querySelector(\".headerValue\").value;\n            console.log(\"======\", key, val);\n            headers[key] = val;\n        })\n        return headers;\n    }\n\n    onFormSubmit(e) {\n\n        const gremlinServerUrl = e.target.gremlinServerUrl.value;\n        const graphEngineName = e.target.graphEngineName.value;\n        // const isHttps = new URL(window.location.href).protocol === \"https:\" || new URL(window.location.href).protocol === \"wss:\";\n        e.preventDefault();\n\n        if (!gremlinServerUrl) {\n            alert(\"Invalid connection string\");\n        } else if (this.checkIfSecureProtocol(window.location.href) && !this.checkIfSecureProtocol(gremlinServerUrl)) {\n            alert(\"Your connection string is not secure. You can only use https or wss connection string \" +\n                \"when you are using Graph Explorer via https connection.\")\n        } else if (gremlinServerUrl) {\n            const headers = this.getHeaders();\n            setDataToLocalStorage(GE_CONSTANTS.gremlinServerUrlKey, gremlinServerUrl);\n            setDataToLocalStorage(GE_CONSTANTS.httpHeadersKey, headers);\n            setDataToLocalStorage(GE_CONSTANTS.graphEngineName, graphEngineName);\n            window.location.href = \"/\";\n        }\n    }\n\n    openDemo() {\n        window.open(DEMO_URL);\n    }\n\n    getErrorFromUrlString() {\n        const urlParams = new URLSearchParams(window.location.search);\n        return urlParams.get('error');\n    }\n\n    componentDidMount() {\n\n        // document.addEventListener('input', (e) => {\n        //\n        //     if (e.target.getAttribute('name') === \"graphEngineName\")\n        //         console.log(e.target.value)\n        // })\n\n        function updateInputPlaceholder(event) {\n            console.log(\"event\", event.target.id);\n            const el = document.querySelector(\"[name=gremlinServerUrl]\");\n            if (event.target.id === \"gremlinEngine\") {\n                el.placeholder = \"http://localhost:8182/gremlin\";\n            } else {\n                el.placeholder = \"http://localhost:8000/graphql\";\n            }\n        }\n\n        document.querySelectorAll(\"input[name='graphEngineName']\").forEach((input) => {\n            input.addEventListener('change', updateInputPlaceholder);\n        });\n\n        const errorMessage = this.getErrorFromUrlString();\n        if (errorMessage) {\n            alert(errorMessage);\n        }\n    }\n\n    toggleMoreOptions() {\n\n        const errorMessage = \"To provide custom headers, \" +\n            \"you need to provide connection string\" +\n            \" with http(s) protocol.\";\n        const gremlinServerUrl = document.querySelector('[name=\"gremlinServerUrl\"]').value;\n        if (!gremlinServerUrl) {\n            alert(errorMessage);\n            return\n        }\n        const isHttp = new URL(gremlinServerUrl).protocol.includes(\"http\");\n        if (isHttp) {\n            this.setState({showExtraHeaderOptions: !this.state.showExtraHeaderOptions})\n        } else {\n            alert(errorMessage);\n        }\n\n    }\n\n    addNewHeader() {\n        this.setState({extraHeadersCount: this.state.extraHeadersCount + 1})\n    }\n\n    removeHeader() {\n        this.setState({extraHeadersCount: this.state.extraHeadersCount - 1})\n\n    }\n\n\n    render() {\n        const headersArrayTemp = Array.from({length: this.state.extraHeadersCount}, (_, index) => index + 1);\n\n        return (\n            <div>\n                <div className={\"connect-heading\"}>\n                    <p className={\"invana-logo\"}>Invana</p>\n                    <h1>Graph Explorer <small>({VERSION})</small></h1>\n                    <p>{ABOUT_TEXT}</p>\n                </div>\n                <div className=\"github-stars\">\n                    <a href=\"https://github.com/invanalabs/graph-explorer\"\n                       target={\"_blank\"} rel=\"noopener noreferrer\">\n                        <img\n                            src=\"https://img.shields.io/github/stars/invanalabs/graph-explorer?color=%23429770&label=stars%20on%20github&logo=github&style=for-the-badge\"\n                            alt=\"\"/>\n                    </a>\n                </div>\n                <Modal title={null} size={\"md\"}\n                    // style={{\"top\": \"100px\", \"left\": \"auto\",\"right\": \"20px\", }}\n                    //    style={{\"top\": \"250px\", \"left\": \"20px\",}}\n                       style={{\n                           \"position\": \"relative\", \"left\": \"20px\", \"width\": \"450px\",\n                           \"borderBottomWidth\": \"4px\"\n                       }}\n                >\n                    <div className={\"connect\"}>\n                        <div className={\"top-section\"}>\n                            <h4><FontAwesomeIcon icon={faPlug}/> Connect to Invana Engine </h4>\n                            {/*<p>Invana Engine is a GraphQL API for Apache TinkerPop supported*/}\n                            {/*    Graph Databases.</p>*/}\n                        </div>\n                        {/*<hr/>*/}\n\n                        <div className={\"bottom-section\"}>\n                            <form action=\"\" onSubmit={this.onFormSubmit.bind(this)}>\n\n\n                                {/*<input type=\"radio\" id=\"gremlinEngine\" name=\"graphEngineName\" value=\"gremlin\"*/}\n                                {/*       defaultChecked/>*/}\n                                {/*<label className={\"graphEngineNameLabel\"} htmlFor=\"gremlinEngine\">Gremlin</label>*/}\n\n                                <input type=\"hidden\" id=\"invanaEngine\" name=\"graphEngineName\" value=\"invana-engine\"/>\n                                {/*<label className={\"graphEngineNameLabel\"} htmlFor=\"invanaEngine\">Invana Engine</label>*/}\n\n                                <input type=\"text\" name={\"gremlinServerUrl\"}\n                                    // defaultValue={\"ws://localhost:8182/gremlin\"}\n                                       placeholder={\"http://127.0.0.1:8000/graphql\"}/>\n                                <br/>\n\n                                <p>\n                                    <button className={\"extra-headers-btn\"} type={\"button\"} onClick={this.toggleMoreOptions.bind(this)}>\n                                        http headers <FontAwesomeIcon icon={faAngleDown}/>\n                                    </button>\n                                </p>\n                                {\n                                    this.state.showExtraHeaderOptions\n                                        ?\n                                        <div className={\"headersList\"}>\n\n                                            <h4>Extra HTTP Headers</h4>\n                                            {\n                                                headersArrayTemp.map((headerItem) => {\n                                                    return <div key={headerItem}\n                                                                className={\"headerItem headerItem-\" + headerItem}>\n                                                        <input type=\"text\"\n                                                               className={\"headerKey\"}\n                                                               placeholder={\"header key\"}\n                                                               name={\"headerKey\"}\n                                                        />\n                                                        <input type=\"text\"\n                                                               className={\"headerValue\"}\n                                                               placeholder={\"header value\"}\n                                                               name={\"headerValue\"}\n                                                        />\n                                                        <button type={\"button\"} onClick={this.removeHeader.bind(this)}>\n                                                            <FontAwesomeIcon icon={faTimesCircle}/>\n                                                        </button>\n\n                                                    </div>\n\n                                                })\n                                            }\n\n                                            <p>\n                                                <button type={\"button\"} onClick={this.addNewHeader.bind(this)}> + add\n                                                    new header\n                                                </button>\n                                            </p>\n                                        </div>\n                                        : <span></span>\n\n                                }\n\n                                <button type={\"submit\"} className={\"primary-btn button\"}>Connect</button>\n\n                                <button onClick={() => this.openDemo()} type={\"button\"}\n                                        className={\" button secondary-btn ml-10\"}>\n                                    <FontAwesomeIcon icon={faPlayCircle}/> watch demo\n                                </button>\n                                {/*<a target={\"_blank\"} rel=\"noopener noreferrer\" href=\"https://invana.io/help.html\">*/}\n                                {/*    <FontAwesomeIcon icon={faQuestionCircle}/>*/}\n                                {/*</a>*/}\n\n                            </form>\n                            {this.state.errorMessage ?\n                                (\n                                    <p>\n                                        <small className={\"errorMessage\"}>{this.state.errorMessage}</small>\n                                    </p>\n                                ) : (<span></span>)\n                            }\n                            <p style={{\"marginTop\": \"1rem\"}}>\n                                {/*<FontAwesomeIcon icon={faQuestionCircle}/> | &nbsp;*/}\n                                {/*<a href=\"\">Training Videos &nbsp;</a>*/}\n                                {/*<FontAwesomeIcon icon={faQuestionCircle}/> &nbsp; | &nbsp;*/}\n                                <a href=\"https://invana.io/help.html\">How to setup Invana Engine</a>&nbsp;\n                                | &nbsp; <a href=\"https://invana.io/help.html\">Help</a>\n                            </p>\n\n                        </div>\n                    </div>\n                </Modal>\n                <p className={\"built-with\"}><small>Built with love for Humans\n                    & Innovations at <a\n                        className={\"selected\"}\n                        target={\"_blank\"}\n                        rel=\"noopener noreferrer\"\n                        href=\"https://invana.io\">Invana</a></small>\n                </p>\n\n                {/*<Modal title={null} size={\"md\"} style={{\"top\": \"250px\", \"right\": \"20px\"}}>*/}\n                {/*    <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SuxC4EH0RCs\" frameBorder=\"0\"*/}\n                {/*            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"*/}\n                {/*            allowFullScreen></iframe>*/}\n                {/*</Modal>*/}\n\n            </div>\n\n        )\n    }\n}\n","import React from \"react\";\nimport {askToSwitchGremlinServer, redirectToConnectIfNeeded} from \"../core/utils\";\n\nexport default class SwitchServerView extends React.Component {\n\n\n    render() {\n        redirectToConnectIfNeeded();\n        askToSwitchGremlinServer();\n        window.location.href = \"/\";\n        return (\n            <span>switching server...</span>\n        )\n\n    }\n}\n","import React, { Suspense } from \"react\";\nimport HomeView from \"./views/home\";\nimport ExplorerView from \"./views/explorer\";\nimport Page404 from \"./ui-components/error-views/404\";\nimport SetupGremlinServerConnection from \"./views/connect\";\nimport SwitchServerView from \"./views/switch-server\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <Suspense fallback={<div style={{ color: \"white\" }}>Loading...</div>}>\n          <Switch>\n            <Route exact path=\"/\" component={HomeView} />\n            <Route exact path=\"/explorer\" component={ExplorerView} />\n            <Route exact path=\"/connect\" component={SetupGremlinServerConnection} />\n            <Route exact path=\"/switch-server\" component={SwitchServerView} />\n            <Route component={Page404} />\n          </Switch>\n        </Suspense>\n      </Router>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}