[{"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/index.js":"1","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/reportWebVitals.js":"2","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/App.js":"3","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/page-404.js":"4","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/switch-server.js":"5","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/index.js":"6","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/layout/default.js":"7","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/ui-components/canvas.js":"8","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/ui-components/menu.js":"9","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/ui-components/sidebar.js":"10","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/utils.js":"11","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/explorer/explorer.js":"12","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/schema/schema.js":"13","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/settings/settings.js":"14","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/connect/connect.js":"15","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/settings.js":"16","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/layout/remote.js":"17","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/invana-engine.js":"18","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/websocket.js":"19","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/http.js":"20","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/query-builder/gremlin.js":"21","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/query-builder/invana-engine.js":"22","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/serializers/invana-engine.js":"23","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/core/utils.js":"24","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/serializers/graphson-v3.js":"25","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/utils.js":"26","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/query-builder/base.js":"27","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/base.js":"28","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/query-builder/utils.js":"29","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/serializers/base.js":"30","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/responses/invana-engine.js":"31","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/responses/gremlin.js":"32","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/responses/base.js":"33","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/layout/blank.js":"34","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/ui-components/main-content.js":"35","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/example-data/data.js":"36","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/data/index.js":"37","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/viewlets/data-sidebar.js":"38","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/interface/tables/index.js":"39","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/interface/utils.js":"40"},{"size":510,"mtime":1610658465694,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":1608290002870,"results":"43","hashOfConfig":"42"},{"size":1485,"mtime":1610691603716,"results":"44","hashOfConfig":"42"},{"size":696,"mtime":1608395041954,"results":"45","hashOfConfig":"42"},{"size":394,"mtime":1608394917828,"results":"46","hashOfConfig":"42"},{"size":1482,"mtime":1610549400253,"results":"47","hashOfConfig":"42"},{"size":2726,"mtime":1610693151053,"results":"48","hashOfConfig":"42"},{"size":335,"mtime":1608419132577,"results":"49","hashOfConfig":"42"},{"size":825,"mtime":1610648011874,"results":"50","hashOfConfig":"42"},{"size":268,"mtime":1610549400280,"results":"51","hashOfConfig":"42"},{"size":559,"mtime":1610658465615,"results":"52","hashOfConfig":"42"},{"size":4226,"mtime":1610565374988,"results":"53","hashOfConfig":"42"},{"size":271,"mtime":1610549400273,"results":"54","hashOfConfig":"42"},{"size":275,"mtime":1610549400272,"results":"55","hashOfConfig":"42"},{"size":9995,"mtime":1610549400279,"results":"56","hashOfConfig":"42"},{"size":926,"mtime":1610550115334,"results":"57","hashOfConfig":"42"},{"size":7707,"mtime":1610658465688,"results":"58","hashOfConfig":"42"},{"size":1040,"mtime":1610549400241,"results":"59","hashOfConfig":"42"},{"size":3274,"mtime":1610658465709,"results":"60","hashOfConfig":"42"},{"size":795,"mtime":1610549400241,"results":"61","hashOfConfig":"42"},{"size":959,"mtime":1610549400244,"results":"62","hashOfConfig":"42"},{"size":3569,"mtime":1610549400245,"results":"63","hashOfConfig":"42"},{"size":1301,"mtime":1610549400245,"results":"64","hashOfConfig":"42"},{"size":324,"mtime":1610549400243,"results":"65","hashOfConfig":"42"},{"size":10047,"mtime":1610549400245,"results":"66","hashOfConfig":"42"},{"size":1852,"mtime":1610658465627,"results":"67","hashOfConfig":"42"},{"size":961,"mtime":1610549400244,"results":"68","hashOfConfig":"42"},{"size":2920,"mtime":1610658465704,"results":"69","hashOfConfig":"42"},{"size":198,"mtime":1610549400245,"results":"70","hashOfConfig":"42"},{"size":753,"mtime":1610549400245,"results":"71","hashOfConfig":"42"},{"size":817,"mtime":1610658465716,"results":"72","hashOfConfig":"42"},{"size":407,"mtime":1607441280380,"results":"73","hashOfConfig":"42"},{"size":643,"mtime":1607441280379,"results":"74","hashOfConfig":"42"},{"size":353,"mtime":1610549400248,"results":"75","hashOfConfig":"42"},{"size":295,"mtime":1610549400248,"results":"76","hashOfConfig":"42"},{"size":526,"mtime":1610703387394,"results":"77","hashOfConfig":"42"},{"size":8493,"mtime":1610707131199,"results":"78","hashOfConfig":"42"},{"size":2390,"mtime":1610707146451,"results":"79","hashOfConfig":"42"},{"size":17607,"mtime":1610706331228,"results":"80","hashOfConfig":"42"},{"size":639,"mtime":1610699814589,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1urfhgo",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"84"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/index.js",[],["166","167"],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/reportWebVitals.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/App.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/page-404.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/switch-server.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/index.js",["168"],"import React from \"react\";\n\n// import RemoteGraphComponent from \"../core/graph-component\";\n// import GraphSONDeSerializer from \"../serializers/graphson-v3\";\n// import {managementVertexLabel} from \"../config\";\nimport {\n    managementVertexLabel\n} from \"../../config\";\n// import {setElementColorOptionsToStorageUsingResponse} from \"../core/utils\";\n\nexport default class IndexView extends React.Component {\n\n\n    componentDidMount() {\n        // super.componentDidMount();\n        // let _this = this;\n        // console.log(\"=_this.connector.requestBuilder.initQuery()\", _this.connector.requestBuilder.initQuery())\n        // setTimeout(function () {\n        //     _this.makeQuery(_this.connector.requestBuilder.filterVertices(\n        //         managementVertexLabel, 50\n        //     ), {source: \"internal\"});\n        // }, 200)\n        window.location.href = \"/connect\";\n    }\n\n    processResponse(response) {\n        let _this = this;\n        // let response = this.connector.getLastResponse();\n        console.log(\"processResponse received\", response);\n        // const statusCode = response.getStatusCode();\n        const transporterStatusCode = response.transporterStatusCode;\n        if (transporterStatusCode >= 200 && transporterStatusCode < 300) {\n            // setElementColorOptionsToStorageUsingResponse(response);\n            window.location.href = \"/explorer\";\n        } else {\n            window.location.href = \"/connect?error=Failed to connect&transporterStatus=\" + transporterStatusCode;\n            _this.setState({\n                \"errorMessage\": JSON.stringify(response,),\n                \"showErrorMessage\": true,\n                \"statusMessage\": \"Query Successfully Responded.\" +\n                    \" But returned non 200 status[\" + response.status.code + \"]\"\n            })\n        }\n    }\n\n    render() {\n        return(<div></div>)\n    }\n\n}\n","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/layout/default.js",["169"],"import React from \"react\";\nimport {Nav, Navbar} from \"react-bootstrap\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCog} from \"@fortawesome/free-solid-svg-icons\";\nimport BlankLayout from \"./blank\";\nimport RemoteEngine from \"./remote\";\nimport {STUDIO_SETTINGS} from \"../../settings\";\n\n\nexport default class DefaultLayout extends RemoteEngine {\n\n\n    // static propTypes = {\n    //     children: PropTypes.any,\n    //     leftSideNav: PropTypes.any,\n    //\n    //     primaryNav: PropTypes.any,\n    //     secondaryNav: PropTypes.any,\n    // };\n\n    // static defaultProp = {\n    //     connectionUrl: STUDIO_SETTINGS.CONNECTION_URL\n    // }\n\n    render() {\n        return (\n            <BlankLayout>\n                <Navbar\n                    // bg=\"transparent\"\n                        className={\"border-bottom\"} expand=\"lg\">\n                    <Navbar.Brand href=\"/\" className={\"ml-3\"}>Invana Studio</Navbar.Brand>\n                    <Nav className=\"ml-auto\">\n                        {/*<Nav.Item>*/}\n                        {/*    <Nav.Link href=\"/connect\"*/}\n                        {/*              className={this.props.location.pathname === \"/connect\" ? \"active\" : \"\"}>*/}\n                        {/*        Connect*/}\n                        {/*    </Nav.Link>*/}\n                        {/*</Nav.Item>*/}\n                        <Nav.Item>\n\n                            <Nav.Link href={\"/explorer\"}\n                                      className={this.props.location.pathname === \"/explorer\" ? \"active\" : \"\"}>\n                                Explorer</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link href=\"/data\"\n                                      className={this.props.location.pathname === \"/example-data\" ? \"active\" : \"\"}>\n                                Data</Nav.Link>\n                        </Nav.Item>\n\n\n                        <Nav.Item>\n                            <Nav.Link href=\"/schema\"\n                                      className={this.props.location.pathname === \"/schema\" ? \"active\" : \"\"}>\n                                Functions</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link href=\"/settings\"\n                                      className={this.props.location.pathname === \"/settings\" ? \"active\" : \"\"}>\n                                <FontAwesomeIcon icon={faCog}\n                                />\n                            </Nav.Link>\n                        </Nav.Item>\n                    </Nav>\n                </Navbar>\n                {this.props.children}\n            </BlankLayout>\n        )\n    }\n}\n","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/ui-components/canvas.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/ui-components/menu.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/ui-components/sidebar.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/utils.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/explorer/explorer.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/schema/schema.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/settings/settings.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/connect/connect.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/settings.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/layout/remote.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/invana-engine.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/websocket.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/http.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/query-builder/gremlin.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/query-builder/invana-engine.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/serializers/invana-engine.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/core/utils.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/serializers/graphson-v3.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/utils.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/query-builder/base.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/base.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/query-builder/utils.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/serializers/base.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/responses/invana-engine.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/responses/gremlin.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/connector/responses/base.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/layout/blank.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/ui-components/main-content.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/example-data/data.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/views/data/index.js",["170","171","172","173"],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/viewlets/data-sidebar.js",[],"/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/interface/tables/index.js",["174","175"],"import React, {Fragment} from \"react\";\nimport PropTypes from 'prop-types';\nimport \"./index.scss\";\nimport {getDataFromLocalStorage} from \"../../utils\";\nimport {renderPropertyData} from \"../utils\";\nimport Badge from \"react-bootstrap/Badge\";\n\n\nexport default class TableInterface extends React.Component {\n\n    static defaultProps = {\n        // dataStore: null,\n        elementsData: [],\n        elementsLabel: \"Collection label\",\n        elementsType: \"g:Vertex\",\n        elementsSchema: null,\n\n    }\n\n    static propTypes = {\n        // dataStore: PropTypes.object,\n        elementsData: PropTypes.array,\n        elementsLabel: PropTypes.string,\n        elementsType: PropTypes.string,\n        elementsSchema: PropTypes.object,\n        showLabel: PropTypes.bool\n    }\n\n    render() {\n\n        return (\n            <div className={\"p-10 tableCanvas\"}>\n                <div className={\"___responseBox \"}>\n                    {\n\n                        this.props.elementsType === \"g:Vertex\"\n                            ?\n                            <VertexTableComponent type={\"Vertex\"}\n                                                  showLabel={this.props.showLabel}\n                                                  vertexSchema={this.props.elementsSchema}\n                                                  dataStore={this.props.dataStore}\n                                                  label={this.props.elementsLabel}\n                                                  data={this.props.elementsData}/>\n\n                            : <span/>\n\n                    }\n                    {\n                        this.props.elementsType === \"g:Edge\"\n                            ?\n                            <EdgeTableComponent type={\"Edge\"}\n                                                showLabel={this.props.showLabel}\n                                                label={this.props.elementsLabel}\n                                                data={this.props.elementsData}/>\n\n                            : <span/>\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport class VertexTableComponent extends React.Component {\n    static defaultProps = {\n        data: null,\n        label: null,\n        vertexSchema: {},\n        dataStore: null,\n        type: null,\n        showLabel: false\n    }\n\n    static propTypes = {\n        data: PropTypes.arrayOf(\n            PropTypes.shape({\n                properties: PropTypes.object,\n                type: PropTypes.string\n            })\n        ),\n        vertexSchema: PropTypes.object,\n        dataStore: PropTypes.object,\n        label: PropTypes.string,\n        type: PropTypes.string,\n        showLabel: PropTypes.bool\n    }\n\n    getPropertyKeys() {\n        if (this.props.data.length === 0) {\n            return []\n        } else {\n            return Object.keys(this.props.data[0].properties || {})\n        }\n    }\n\n    getElementType(elem) {\n        return elem.type === \"g:Vertex\" ? \"V\" : \"E\";\n    }\n\n    getElementColor(elem) {\n        const elType = this.getElementType(elem);\n        if (elType === \"V\" && elem.meta) {\n            return elem.meta.shapeOptions.fillColorHex;\n        } else if (elType === \"E\" && elem.meta) {\n            return elem.meta.shapeOptions.strokeColorHex;\n        }\n    }\n\n    getInELabels() {\n        let inELabelsConfig = []\n        this.props.vertexSchema.inE.map((inELabel) => {\n            inELabelsConfig.push({\n                edgeFillColorHex: this.props.dataStore.getEdgeOptions(inELabel)\n                    ? this.props.dataStore.getEdgeOptions(inELabel).shapeOptions.strokeColorHex\n                    : \"#efefef\",\n                edgeLabel: inELabel\n            })\n        });\n        return inELabelsConfig;\n    }\n\n    getOutELabels() {\n        let outELabelsConfig = []\n        this.props.vertexSchema.outE.map((outELabel) => {\n            // console.log(\"====this.props.getEdgeOptions(outELabel)\", this.props.dataStore.getEdgeOptions(outELabel))\n            outELabelsConfig.push({\n                edgeFillColorHex: this.props.dataStore.getEdgeOptions(outELabel)\n                    ? this.props.dataStore.getEdgeOptions(outELabel).shapeOptions.strokeColorHex\n                    : \"#efefef\",\n                edgeLabel: outELabel\n            })\n        });\n        return outELabelsConfig;\n    }\n\n    getFirstElement() {\n        return this.props.data[0];\n    }\n\n    render() {\n        const propertyKeys = this.getPropertyKeys();\n        const elColor = this.getElementColor(this.props.data[0]);\n        // console.log(\"VertexTableComponent here\", this.props.label)\n        // console.log(\"VertexTableComponent here  this.props.data[0]\", this.props.data[0])\n        // console.log(\"VertexTableComponent vertexSchema\", this.props.label, this.props.vertexSchema)\n        let colorOptions = {};\n        if (this.props.type === \"Vertex\") {\n            const _ = getDataFromLocalStorage(\"nodeLabels\", true) || {}\n            colorOptions = _[this.props.label] || {};\n        } else {\n            const _ = getDataFromLocalStorage(\"linkLabels\", true) || {}\n            colorOptions = _[this.props.label] || {}\n        }\n\n        const inELabels = [];// this.getInELabels();\n        const outELabels = []; // this.getOutELabels();\n\n        return (\n\n            <div className={\"VertexTableComponent\"}>\n                {/*<h3>{this.props.type} | {this.props.label}</h3>*/}\n                <table className={\" mb-10 \"}>\n                    <thead>\n                    <tr style={{\n                        \"backgroundColor\": colorOptions.bgColor,\n                    }}>\n                        {\n                            this.props.showLabel === true\n                                ? <th colSpan={2}>MetaData</th>\n                                : <th colSpan={1}>Id</th>\n                        }\n                        {propertyKeys.length\n                            ? <th colSpan={propertyKeys.length}>Properties</th>\n                            : <Fragment/>\n                        }\n                        {\n                            inELabels.length > 0\n                                ? <th colSpan={inELabels.length}>InE Data</th>\n                                : <React.Fragment/>\n                        }\n                        {\n                            outELabels.length > 0\n                                ? <th colSpan={outELabels.length}>OutE Data</th>\n                                : <React.Fragment/>\n                        }\n                    </tr>\n                    <tr style={{\n                        \"backgroundColor\": colorOptions.bgColor,\n                    }}>\n                        {\n                            this.props.showLabel === true\n                                ? <td>Label<span>({this.getElementType(this.getFirstElement())})</span></td>\n                                : <React.Fragment/>\n                        }\n\n                        <td>Id</td>\n                        {\n                            propertyKeys.map((propertyKey, index) => {\n                                return (\n                                    <td key={index}>{propertyKey}</td>\n                                )\n                            })\n                        }\n                        {\n                            inELabels.length > 0\n                                ? inELabels.map((edgeLabelConfig, index) => {\n                                    return (\n                                        <td key={index}\n                                            style={{\"color\": edgeLabelConfig.edgeFillColorHex}}>{edgeLabelConfig.edgeLabel}</td>\n                                    )\n                                })\n                                : <React.Fragment/>\n                        }\n                        {\n                            outELabels.length > 0\n                                ? outELabels.map((edgeLabelConfig, index) => {\n                                    return (\n                                        <td key={index}\n                                            style={{\"color\": edgeLabelConfig.edgeFillColorHex}}>{edgeLabelConfig.edgeLabel}</td>\n                                    )\n                                })\n                                : <React.Fragment/>\n                        }\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        this.props.data.map((node) => {\n                            return (\n                                <tr key={node.id}>\n                                    {/*<td>{node.type}</td>*/}\n                                    {\n                                        this.props.showLabel === true\n                                            ? <td style={{\"color\": elColor}}>{node.label}</td>\n                                            : <React.Fragment/>\n                                    }\n\n                                    <td><Badge variant=\"secondary\">{node.id}</Badge></td>\n                                    {\n                                        propertyKeys.map((prop, index) => {\n                                            return (\n                                                <td key={index}>{renderPropertyData(prop, node.properties[prop])}</td>)\n                                        })\n                                    }\n                                    {\n                                        inELabels.map((inELabelConfig, index) => {\n                                            const vertices = node.inData[inELabelConfig.edgeLabel]\n                                                ? node.inData[inELabelConfig.edgeLabel].vertices\n                                                : [];\n                                            return (\n                                                <td key={index}>\n                                                    {\n                                                        vertices.map((vertex, vtxIndex) => {\n                                                            return (\n                                                                <button className={\"btn\"} key={vtxIndex}\n                                                                        title={vertex.label}\n                                                                        style={{\"borderColor\": vertex.fillColorHex}}>\n                                                                    {vertex.labelText}\n                                                                </button>\n                                                            )\n                                                        })\n                                                    }\n                                                </td>\n                                            )\n                                        })\n                                    }\n                                    {\n                                        outELabels.map((outELabelConfig, index) => {\n                                            const vertices = node.outData[outELabelConfig.edgeLabel]\n                                                ? node.outData[outELabelConfig.edgeLabel].vertices\n                                                : [];\n                                            return (\n                                                <td key={index}>\n                                                    {\n                                                        vertices.map((vertex, vtxIndex) => {\n                                                            return (\n                                                                <button className={\"btn\"} key={vtxIndex}\n                                                                        title={vertex.label}\n                                                                        style={{\"borderColor\": vertex.fillColorHex}}>\n                                                                    {vertex.labelText}\n                                                                </button>\n                                                            )\n                                                        })\n                                                    }\n                                                </td>\n                                            )\n                                        })\n                                    }\n                                </tr>\n                            )\n                        })\n                    }\n                    </tbody>\n                </table>\n\n\n            </div>\n        )\n    }\n\n}\n\nexport class EdgeTableComponent extends React.Component {\n    static defaultProps = {\n        data: null,\n        label: null,\n        type: null\n    }\n\n    static propTypes = {\n        data: PropTypes.arrayOf(\n            PropTypes.shape({\n                properties: PropTypes.object,\n                type: PropTypes.string\n            })\n        ),\n        label: PropTypes.string,\n        type: PropTypes.string,\n    }\n\n    getPropertyKeys() {\n        if (this.props.data.length === 0) {\n            return []\n        } else {\n            return Object.keys(this.props.data[0].properties || {})\n        }\n    }\n\n    getElementType(elem) {\n        return elem.type === \"g:Vertex\" ? \"V\" : \"E\";\n    }\n\n    getElementColor(elem) {\n        const elType = this.getElementType(elem);\n        if (elType === \"V\" && elem.meta) {\n            return elem.meta.shapeOptions.fillColorHex;\n        } else if (elType === \"E\" && elem.meta) {\n            return elem.meta.shapeOptions.strokeColorHex;\n        }\n    }\n\n    render() {\n        const propertyKeys = this.getPropertyKeys();\n        const elColor = this.getElementColor(this.props.data[0]);\n        // console.log(\"EdgeTableComponent here\", this.props.label)\n        // console.log(\"EdgeTableComponent here  this.props.data[0]\", this.props.data[0])\n        let colorOptions = {};\n        if (this.props.type === \"Vertex\") {\n            const _ = getDataFromLocalStorage(\"nodeLabels\", true) || {}\n            colorOptions = _[this.props.label] || {};\n        } else {\n            const _ = getDataFromLocalStorage(\"linkLabels\", true) || {}\n            colorOptions = _[this.props.label] || {}\n        }\n\n        return (\n            <div className={\"VertexTableComponent\"}>\n                {/*<h3>{this.props.type} | {this.props.label}</h3>*/}\n                <table className={\" mb-10 \"}>\n                    <thead>\n                    <tr style={{\n                        \"backgroundColor\": colorOptions.bgColor,\n                    }}>\n\n\n                        <th colSpan={2}>MetaData</th>\n                        {propertyKeys.length\n                            ? <th colSpan={propertyKeys.length}>Properties</th>\n                            : <Fragment/>\n                        }\n                        <th>from</th>\n                        <th>to (outV)</th>\n                    </tr>\n                    <tr style={{\n                        \"backgroundColor\": colorOptions.bgColor,\n                    }}>\n\n                        {/*style={{\"borderColor\": colorOptions.borderColor || \"inherit\"}}*/}\n                        {/*<th>Type</th>*/}\n                        <td>Label<span>({this.getElementType(this.props.data[0])})</span></td>\n                        <td>Id</td>\n                        {\n                            propertyKeys.map((propertyKey, index) => {\n                                return (\n                                    <td key={index}>{propertyKey}</td>\n                                )\n                            })\n                        }\n                        <td>from</td>\n                        <td>to (outV)</td>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        this.props.data.map((node) => {\n                            return (\n                                <tr key={node.id}>\n                                    {/*<td>{node.type}</td>*/}\n                                    <td style={{\"color\": elColor}}>{node.label}</td>\n                                    <td>{node.id}</td>\n                                    {\n\n                                        propertyKeys.map((prop, index) => {\n                                            return (\n                                                <td key={index}>{renderPropertyData(prop, node.properties[prop])}</td>)\n                                        })\n                                    }\n                                    <td>\n                                        <button className={\"btn\"} title={node.label}\n                                                style={{\"borderColor\": node.source.meta.shapeOptions.fillColorHex}}>\n                                            {node.source.meta.labelOptions.labelText}</button>\n                                    </td>\n                                    <td>\n                                        <button className={\"btn\"} title={node.label}\n                                                style={{\"borderColor\": node.target.meta.shapeOptions.fillColorHex}}>\n                                            {node.target.meta.labelOptions.labelText}</button>\n                                    </td>\n                                </tr>\n                            )\n                        })\n                    }\n                    </tbody>\n                </table>\n\n\n            </div>\n        )\n    }\n\n}\n\n","/Users/rrmerugu/Projects/invanalabs/graph-explorer-redesign/src/web/interface/utils.js",[],{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","severity":1,"message":"181","line":7,"column":5,"nodeType":"182","messageId":"183","endLine":7,"endColumn":26},{"ruleId":"180","severity":1,"message":"184","line":7,"column":9,"nodeType":"182","messageId":"183","endLine":7,"endColumn":24},{"ruleId":"180","severity":1,"message":"185","line":3,"column":9,"nodeType":"182","messageId":"183","endLine":3,"endColumn":13},{"ruleId":"180","severity":1,"message":"186","line":3,"column":15,"nodeType":"182","messageId":"183","endLine":3,"endColumn":26},{"ruleId":"180","severity":1,"message":"187","line":3,"column":28,"nodeType":"182","messageId":"183","endLine":3,"endColumn":38},{"ruleId":"180","severity":1,"message":"188","line":9,"column":5,"nodeType":"182","messageId":"183","endLine":9,"endColumn":13},{"ruleId":"189","severity":1,"message":"190","line":111,"column":52,"nodeType":"191","messageId":"192","endLine":111,"endColumn":54},{"ruleId":"189","severity":1,"message":"190","line":124,"column":54,"nodeType":"191","messageId":"192","endLine":124,"endColumn":56},"no-native-reassign",["193"],"no-negated-in-lhs",["194"],"no-unused-vars","'managementVertexLabel' is defined but never used.","Identifier","unusedVar","'STUDIO_SETTINGS' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'InputGroup' is defined but never used.","'faCircle' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]